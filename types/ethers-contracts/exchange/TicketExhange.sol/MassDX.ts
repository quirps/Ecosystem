/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace MassDX {
  export type SaleInputStruct = {
    ticketAddress: PromiseOrValue<string>;
    ticketId: PromiseOrValue<BigNumberish>;
    ticketAmount: PromiseOrValue<BigNumberish>;
    tokenAmountPerTicket: PromiseOrValue<BigNumberish>;
    tokenAddress: PromiseOrValue<string>;
  };

  export type SaleInputStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    ticketAddress: string;
    ticketId: BigNumber;
    ticketAmount: BigNumber;
    tokenAmountPerTicket: BigNumber;
    tokenAddress: string;
  };

  export type TotalSaleStruct = {
    saleId: PromiseOrValue<BigNumberish>;
    sale: MassDX.SaleInputStruct;
  };

  export type TotalSaleStructOutput = [
    BigNumber,
    MassDX.SaleInputStructOutput
  ] & { saleId: BigNumber; sale: MassDX.SaleInputStructOutput };
}

export interface MassDXInterface extends utils.Interface {
  functions: {
    "TIME_POOL_FEE_PERCENTAGE()": FunctionFragment;
    "batchStakeTimePool(uint256[],uint8[],uint256[],address[])": FunctionFragment;
    "buyTickets(uint96,uint256)": FunctionFragment;
    "calculateReward(address,uint8,uint32,uint256)": FunctionFragment;
    "cancelSale(uint96)": FunctionFragment;
    "collectReward(uint256)": FunctionFragment;
    "collectRewardCleanupUser(address,uint32)": FunctionFragment;
    "collectRewardCleanupUser(address[],uint32[])": FunctionFragment;
    "massDXProtocol()": FunctionFragment;
    "rollingEarningsSumRatio()": FunctionFragment;
    "sellTicket((uint96,(address,uint256,uint256,uint256,address)))": FunctionFragment;
    "sellTickets((uint96,(address,uint256,uint256,uint256,address))[])": FunctionFragment;
    "stakeSumGetter(address,uint32,uint8)": FunctionFragment;
    "stakeTimePool(uint256,uint8,uint256,address)": FunctionFragment;
    "ticketSale(uint96)": FunctionFragment;
    "timePoolStakes(uint256)": FunctionFragment;
    "timeSlotActivationBitMap(address,uint32)": FunctionFragment;
    "timeSlotRewards(address,uint32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "TIME_POOL_FEE_PERCENTAGE"
      | "batchStakeTimePool"
      | "buyTickets"
      | "calculateReward"
      | "cancelSale"
      | "collectReward"
      | "collectRewardCleanupUser(address,uint32)"
      | "collectRewardCleanupUser(address[],uint32[])"
      | "massDXProtocol"
      | "rollingEarningsSumRatio"
      | "sellTicket"
      | "sellTickets"
      | "stakeSumGetter"
      | "stakeTimePool"
      | "ticketSale"
      | "timePoolStakes"
      | "timeSlotActivationBitMap"
      | "timeSlotRewards"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "TIME_POOL_FEE_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchStakeTimePool",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "buyTickets",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateReward",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSale",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "collectReward",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "collectRewardCleanupUser(address,uint32)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "collectRewardCleanupUser(address[],uint32[])",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "massDXProtocol",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rollingEarningsSumRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellTicket",
    values: [MassDX.TotalSaleStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "sellTickets",
    values: [MassDX.TotalSaleStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeSumGetter",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeTimePool",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ticketSale",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "timePoolStakes",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "timeSlotActivationBitMap",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "timeSlotRewards",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "TIME_POOL_FEE_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchStakeTimePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyTickets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancelSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectRewardCleanupUser(address,uint32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectRewardCleanupUser(address[],uint32[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "massDXProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rollingEarningsSumRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellTicket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sellTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeSumGetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeTimePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ticketSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "timePoolStakes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeSlotActivationBitMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeSlotRewards",
    data: BytesLike
  ): Result;

  events: {
    "MigrationCancelled(address,uint32)": EventFragment;
    "MigrationInitiated(address,uint32)": EventFragment;
    "OwnershipChanged(address,address)": EventFragment;
    "SaleCancelled(uint96)": EventFragment;
    "SaleCreated(tuple)": EventFragment;
    "SaleExecuted(uint96,uint256,address,uint256,uint256)": EventFragment;
    "Staked(uint32,uint8,uint256,address)": EventFragment;
    "StakerRewardsCollected(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MigrationCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MigrationInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SaleCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SaleCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SaleExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakerRewardsCollected"): EventFragment;
}

export interface MigrationCancelledEventObject {
  cancellor: string;
  timeCancelled: number;
}
export type MigrationCancelledEvent = TypedEvent<
  [string, number],
  MigrationCancelledEventObject
>;

export type MigrationCancelledEventFilter =
  TypedEventFilter<MigrationCancelledEvent>;

export interface MigrationInitiatedEventObject {
  initiatior: string;
  timeInitiatied: number;
}
export type MigrationInitiatedEvent = TypedEvent<
  [string, number],
  MigrationInitiatedEventObject
>;

export type MigrationInitiatedEventFilter =
  TypedEventFilter<MigrationInitiatedEvent>;

export interface OwnershipChangedEventObject {
  oldOwner: string;
  newOwner: string;
}
export type OwnershipChangedEvent = TypedEvent<
  [string, string],
  OwnershipChangedEventObject
>;

export type OwnershipChangedEventFilter =
  TypedEventFilter<OwnershipChangedEvent>;

export interface SaleCancelledEventObject {
  arg0: BigNumber;
}
export type SaleCancelledEvent = TypedEvent<
  [BigNumber],
  SaleCancelledEventObject
>;

export type SaleCancelledEventFilter = TypedEventFilter<SaleCancelledEvent>;

export interface SaleCreatedEventObject {
  arg0: MassDX.TotalSaleStructOutput;
}
export type SaleCreatedEvent = TypedEvent<
  [MassDX.TotalSaleStructOutput],
  SaleCreatedEventObject
>;

export type SaleCreatedEventFilter = TypedEventFilter<SaleCreatedEvent>;

export interface SaleExecutedEventObject {
  saleId: BigNumber;
  ticketAmount: BigNumber;
  buyer: string;
  sellerFee: BigNumber;
  timePoolTokensMinted: BigNumber;
}
export type SaleExecutedEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, BigNumber],
  SaleExecutedEventObject
>;

export type SaleExecutedEventFilter = TypedEventFilter<SaleExecutedEvent>;

export interface StakedEventObject {
  timeStart: number;
  stakeInterval: number;
  stakeAmouunt: BigNumber;
  staker: string;
}
export type StakedEvent = TypedEvent<
  [number, number, BigNumber, string],
  StakedEventObject
>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export interface StakerRewardsCollectedEventObject {
  staker: string;
  amount: BigNumber;
}
export type StakerRewardsCollectedEvent = TypedEvent<
  [string, BigNumber],
  StakerRewardsCollectedEventObject
>;

export type StakerRewardsCollectedEventFilter =
  TypedEventFilter<StakerRewardsCollectedEvent>;

export interface MassDX extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MassDXInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    TIME_POOL_FEE_PERCENTAGE(overrides?: CallOverrides): Promise<[number]>;

    batchStakeTimePool(
      _stakeIds: PromiseOrValue<BigNumberish>[],
      _stakeIntervals: PromiseOrValue<BigNumberish>[],
      _stakeAmounts: PromiseOrValue<BigNumberish>[],
      _tokenAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyTickets(
      _saleId: PromiseOrValue<BigNumberish>,
      _ticketAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    calculateReward(
      _tokenAddress: PromiseOrValue<string>,
      _stakeInterval: PromiseOrValue<BigNumberish>,
      _stakeStartTimeSlot: PromiseOrValue<BigNumberish>,
      _stakeAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { reward_: BigNumber }>;

    cancelSale(
      _saleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collectReward(
      _stakeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "collectRewardCleanupUser(address,uint32)"(
      _tokenAddress: PromiseOrValue<string>,
      _startTimeSlot: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "collectRewardCleanupUser(address[],uint32[])"(
      _tokenAddresses: PromiseOrValue<string>[],
      _startTimeSlots: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    massDXProtocol(overrides?: CallOverrides): Promise<[string]>;

    rollingEarningsSumRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    sellTicket(
      _ticket: MassDX.TotalSaleStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sellTickets(
      _tickets: MassDX.TotalSaleStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakeSumGetter(
      _tokenAddress: PromiseOrValue<string>,
      _timeSlot: PromiseOrValue<BigNumberish>,
      _stakeDayInterval: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stakeTimePool(
      _stakeId: PromiseOrValue<BigNumberish>,
      _stakeInterval: PromiseOrValue<BigNumberish>,
      _stakeAmount: PromiseOrValue<BigNumberish>,
      _tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ticketSale(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string, BigNumber, number, string] & {
        ticketAddress: string;
        ticketId: BigNumber;
        ticketAmount: BigNumber;
        tokenAddress: string;
        tokenAmountPerTicket: BigNumber;
        status: number;
        sellerAddress: string;
      }
    >;

    timePoolStakes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, string, number, BigNumber, string, number] & {
        startTimeSlot: number;
        staker: string;
        stakeInterval: number;
        amount: BigNumber;
        tokenAddress: string;
        status: number;
      }
    >;

    timeSlotActivationBitMap(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    timeSlotRewards(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalSlotSum: BigNumber;
        totalEarningsPerSum: BigNumber;
      }
    >;
  };

  TIME_POOL_FEE_PERCENTAGE(overrides?: CallOverrides): Promise<number>;

  batchStakeTimePool(
    _stakeIds: PromiseOrValue<BigNumberish>[],
    _stakeIntervals: PromiseOrValue<BigNumberish>[],
    _stakeAmounts: PromiseOrValue<BigNumberish>[],
    _tokenAddresses: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyTickets(
    _saleId: PromiseOrValue<BigNumberish>,
    _ticketAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  calculateReward(
    _tokenAddress: PromiseOrValue<string>,
    _stakeInterval: PromiseOrValue<BigNumberish>,
    _stakeStartTimeSlot: PromiseOrValue<BigNumberish>,
    _stakeAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cancelSale(
    _saleId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collectReward(
    _stakeId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "collectRewardCleanupUser(address,uint32)"(
    _tokenAddress: PromiseOrValue<string>,
    _startTimeSlot: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "collectRewardCleanupUser(address[],uint32[])"(
    _tokenAddresses: PromiseOrValue<string>[],
    _startTimeSlots: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  massDXProtocol(overrides?: CallOverrides): Promise<string>;

  rollingEarningsSumRatio(overrides?: CallOverrides): Promise<BigNumber>;

  sellTicket(
    _ticket: MassDX.TotalSaleStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sellTickets(
    _tickets: MassDX.TotalSaleStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakeSumGetter(
    _tokenAddress: PromiseOrValue<string>,
    _timeSlot: PromiseOrValue<BigNumberish>,
    _stakeDayInterval: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stakeTimePool(
    _stakeId: PromiseOrValue<BigNumberish>,
    _stakeInterval: PromiseOrValue<BigNumberish>,
    _stakeAmount: PromiseOrValue<BigNumberish>,
    _tokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ticketSale(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, string, BigNumber, number, string] & {
      ticketAddress: string;
      ticketId: BigNumber;
      ticketAmount: BigNumber;
      tokenAddress: string;
      tokenAmountPerTicket: BigNumber;
      status: number;
      sellerAddress: string;
    }
  >;

  timePoolStakes(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number, string, number, BigNumber, string, number] & {
      startTimeSlot: number;
      staker: string;
      stakeInterval: number;
      amount: BigNumber;
      tokenAddress: string;
      status: number;
    }
  >;

  timeSlotActivationBitMap(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  timeSlotRewards(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      totalSlotSum: BigNumber;
      totalEarningsPerSum: BigNumber;
    }
  >;

  callStatic: {
    TIME_POOL_FEE_PERCENTAGE(overrides?: CallOverrides): Promise<number>;

    batchStakeTimePool(
      _stakeIds: PromiseOrValue<BigNumberish>[],
      _stakeIntervals: PromiseOrValue<BigNumberish>[],
      _stakeAmounts: PromiseOrValue<BigNumberish>[],
      _tokenAddresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    buyTickets(
      _saleId: PromiseOrValue<BigNumberish>,
      _ticketAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateReward(
      _tokenAddress: PromiseOrValue<string>,
      _stakeInterval: PromiseOrValue<BigNumberish>,
      _stakeStartTimeSlot: PromiseOrValue<BigNumberish>,
      _stakeAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelSale(
      _saleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    collectReward(
      _stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "collectRewardCleanupUser(address,uint32)"(
      _tokenAddress: PromiseOrValue<string>,
      _startTimeSlot: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "collectRewardCleanupUser(address[],uint32[])"(
      _tokenAddresses: PromiseOrValue<string>[],
      _startTimeSlots: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    massDXProtocol(overrides?: CallOverrides): Promise<string>;

    rollingEarningsSumRatio(overrides?: CallOverrides): Promise<BigNumber>;

    sellTicket(
      _ticket: MassDX.TotalSaleStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    sellTickets(
      _tickets: MassDX.TotalSaleStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    stakeSumGetter(
      _tokenAddress: PromiseOrValue<string>,
      _timeSlot: PromiseOrValue<BigNumberish>,
      _stakeDayInterval: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakeTimePool(
      _stakeId: PromiseOrValue<BigNumberish>,
      _stakeInterval: PromiseOrValue<BigNumberish>,
      _stakeAmount: PromiseOrValue<BigNumberish>,
      _tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    ticketSale(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string, BigNumber, number, string] & {
        ticketAddress: string;
        ticketId: BigNumber;
        ticketAmount: BigNumber;
        tokenAddress: string;
        tokenAmountPerTicket: BigNumber;
        status: number;
        sellerAddress: string;
      }
    >;

    timePoolStakes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, string, number, BigNumber, string, number] & {
        startTimeSlot: number;
        staker: string;
        stakeInterval: number;
        amount: BigNumber;
        tokenAddress: string;
        status: number;
      }
    >;

    timeSlotActivationBitMap(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    timeSlotRewards(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalSlotSum: BigNumber;
        totalEarningsPerSum: BigNumber;
      }
    >;
  };

  filters: {
    "MigrationCancelled(address,uint32)"(
      cancellor?: null,
      timeCancelled?: null
    ): MigrationCancelledEventFilter;
    MigrationCancelled(
      cancellor?: null,
      timeCancelled?: null
    ): MigrationCancelledEventFilter;

    "MigrationInitiated(address,uint32)"(
      initiatior?: null,
      timeInitiatied?: null
    ): MigrationInitiatedEventFilter;
    MigrationInitiated(
      initiatior?: null,
      timeInitiatied?: null
    ): MigrationInitiatedEventFilter;

    "OwnershipChanged(address,address)"(
      oldOwner?: null,
      newOwner?: null
    ): OwnershipChangedEventFilter;
    OwnershipChanged(
      oldOwner?: null,
      newOwner?: null
    ): OwnershipChangedEventFilter;

    "SaleCancelled(uint96)"(arg0?: null): SaleCancelledEventFilter;
    SaleCancelled(arg0?: null): SaleCancelledEventFilter;

    "SaleCreated(tuple)"(arg0?: null): SaleCreatedEventFilter;
    SaleCreated(arg0?: null): SaleCreatedEventFilter;

    "SaleExecuted(uint96,uint256,address,uint256,uint256)"(
      saleId?: null,
      ticketAmount?: null,
      buyer?: null,
      sellerFee?: null,
      timePoolTokensMinted?: null
    ): SaleExecutedEventFilter;
    SaleExecuted(
      saleId?: null,
      ticketAmount?: null,
      buyer?: null,
      sellerFee?: null,
      timePoolTokensMinted?: null
    ): SaleExecutedEventFilter;

    "Staked(uint32,uint8,uint256,address)"(
      timeStart?: null,
      stakeInterval?: null,
      stakeAmouunt?: null,
      staker?: null
    ): StakedEventFilter;
    Staked(
      timeStart?: null,
      stakeInterval?: null,
      stakeAmouunt?: null,
      staker?: null
    ): StakedEventFilter;

    "StakerRewardsCollected(address,uint256)"(
      staker?: null,
      amount?: null
    ): StakerRewardsCollectedEventFilter;
    StakerRewardsCollected(
      staker?: null,
      amount?: null
    ): StakerRewardsCollectedEventFilter;
  };

  estimateGas: {
    TIME_POOL_FEE_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    batchStakeTimePool(
      _stakeIds: PromiseOrValue<BigNumberish>[],
      _stakeIntervals: PromiseOrValue<BigNumberish>[],
      _stakeAmounts: PromiseOrValue<BigNumberish>[],
      _tokenAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyTickets(
      _saleId: PromiseOrValue<BigNumberish>,
      _ticketAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    calculateReward(
      _tokenAddress: PromiseOrValue<string>,
      _stakeInterval: PromiseOrValue<BigNumberish>,
      _stakeStartTimeSlot: PromiseOrValue<BigNumberish>,
      _stakeAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelSale(
      _saleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collectReward(
      _stakeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "collectRewardCleanupUser(address,uint32)"(
      _tokenAddress: PromiseOrValue<string>,
      _startTimeSlot: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "collectRewardCleanupUser(address[],uint32[])"(
      _tokenAddresses: PromiseOrValue<string>[],
      _startTimeSlots: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    massDXProtocol(overrides?: CallOverrides): Promise<BigNumber>;

    rollingEarningsSumRatio(overrides?: CallOverrides): Promise<BigNumber>;

    sellTicket(
      _ticket: MassDX.TotalSaleStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sellTickets(
      _tickets: MassDX.TotalSaleStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakeSumGetter(
      _tokenAddress: PromiseOrValue<string>,
      _timeSlot: PromiseOrValue<BigNumberish>,
      _stakeDayInterval: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakeTimePool(
      _stakeId: PromiseOrValue<BigNumberish>,
      _stakeInterval: PromiseOrValue<BigNumberish>,
      _stakeAmount: PromiseOrValue<BigNumberish>,
      _tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ticketSale(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timePoolStakes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timeSlotActivationBitMap(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timeSlotRewards(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    TIME_POOL_FEE_PERCENTAGE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchStakeTimePool(
      _stakeIds: PromiseOrValue<BigNumberish>[],
      _stakeIntervals: PromiseOrValue<BigNumberish>[],
      _stakeAmounts: PromiseOrValue<BigNumberish>[],
      _tokenAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyTickets(
      _saleId: PromiseOrValue<BigNumberish>,
      _ticketAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    calculateReward(
      _tokenAddress: PromiseOrValue<string>,
      _stakeInterval: PromiseOrValue<BigNumberish>,
      _stakeStartTimeSlot: PromiseOrValue<BigNumberish>,
      _stakeAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelSale(
      _saleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collectReward(
      _stakeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "collectRewardCleanupUser(address,uint32)"(
      _tokenAddress: PromiseOrValue<string>,
      _startTimeSlot: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "collectRewardCleanupUser(address[],uint32[])"(
      _tokenAddresses: PromiseOrValue<string>[],
      _startTimeSlots: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    massDXProtocol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rollingEarningsSumRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sellTicket(
      _ticket: MassDX.TotalSaleStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sellTickets(
      _tickets: MassDX.TotalSaleStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakeSumGetter(
      _tokenAddress: PromiseOrValue<string>,
      _timeSlot: PromiseOrValue<BigNumberish>,
      _stakeDayInterval: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakeTimePool(
      _stakeId: PromiseOrValue<BigNumberish>,
      _stakeInterval: PromiseOrValue<BigNumberish>,
      _stakeAmount: PromiseOrValue<BigNumberish>,
      _tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ticketSale(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timePoolStakes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timeSlotActivationBitMap(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timeSlotRewards(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
