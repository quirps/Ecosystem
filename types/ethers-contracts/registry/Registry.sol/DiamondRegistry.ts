/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace DiamondRegistry {
  export type EcosystemStruct = {
    name: PromiseOrValue<string>;
    ecosytemAddress: PromiseOrValue<string>;
    versionNumber: PromiseOrValue<BytesLike>;
  };

  export type EcosystemStructOutput = [string, string, string] & {
    name: string;
    ecosytemAddress: string;
    versionNumber: string;
  };

  export type VersionStruct = {
    exists: PromiseOrValue<boolean>;
    uploadedTimestamp: PromiseOrValue<BigNumberish>;
    facetCuts: IDiamondCut.FacetCutStruct[];
  };

  export type VersionStructOutput = [
    boolean,
    number,
    IDiamondCut.FacetCutStructOutput[]
  ] & {
    exists: boolean;
    uploadedTimestamp: number;
    facetCuts: IDiamondCut.FacetCutStructOutput[];
  };
}

export declare namespace IDiamondCut {
  export type FacetCutStruct = {
    facetAddress: PromiseOrValue<string>;
    action: PromiseOrValue<BigNumberish>;
    functionSelectors: PromiseOrValue<BytesLike>[];
  };

  export type FacetCutStructOutput = [string, number, string[]] & {
    facetAddress: string;
    action: number;
    functionSelectors: string[];
  };
}

export interface DiamondRegistryInterface extends utils.Interface {
  functions: {
    "deployVersion(bytes32,string,uint256,bytes)": FunctionFragment;
    "getUserEcosystems(address)": FunctionFragment;
    "getVersion(bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "registerOptimizationFacet(uint240,bytes2,bytes,bytes)": FunctionFragment;
    "uploadVersion(bytes32,(address,uint8,bytes4[])[])": FunctionFragment;
    "versions(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "deployVersion"
      | "getUserEcosystems"
      | "getVersion"
      | "owner"
      | "registerOptimizationFacet"
      | "uploadVersion"
      | "versions"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deployVersion",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserEcosystems",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerOptimizationFacet",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "uploadVersion",
    values: [PromiseOrValue<BytesLike>, IDiamondCut.FacetCutStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "versions",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "deployVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserEcosystems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerOptimizationFacet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uploadVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "versions", data: BytesLike): Result;

  events: {
    "EcosystemDeployed(address,address,bytes32)": EventFragment;
    "MigrationCancelled(address,uint32)": EventFragment;
    "MigrationInitiated(address,uint32)": EventFragment;
    "VersionUpgraded(bytes32,bytes32,address)": EventFragment;
    "VersionUploaded(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EcosystemDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MigrationCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MigrationInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VersionUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VersionUploaded"): EventFragment;
}

export interface EcosystemDeployedEventObject {
  user: string;
  ecosystem: string;
  versionNumber: string;
}
export type EcosystemDeployedEvent = TypedEvent<
  [string, string, string],
  EcosystemDeployedEventObject
>;

export type EcosystemDeployedEventFilter =
  TypedEventFilter<EcosystemDeployedEvent>;

export interface MigrationCancelledEventObject {
  cancellor: string;
  timeCancelled: number;
}
export type MigrationCancelledEvent = TypedEvent<
  [string, number],
  MigrationCancelledEventObject
>;

export type MigrationCancelledEventFilter =
  TypedEventFilter<MigrationCancelledEvent>;

export interface MigrationInitiatedEventObject {
  initiatior: string;
  timeInitiatied: number;
}
export type MigrationInitiatedEvent = TypedEvent<
  [string, number],
  MigrationInitiatedEventObject
>;

export type MigrationInitiatedEventFilter =
  TypedEventFilter<MigrationInitiatedEvent>;

export interface VersionUpgradedEventObject {
  newVersion: string;
  oldVersion: string;
  ecosystemOwner: string;
}
export type VersionUpgradedEvent = TypedEvent<
  [string, string, string],
  VersionUpgradedEventObject
>;

export type VersionUpgradedEventFilter = TypedEventFilter<VersionUpgradedEvent>;

export interface VersionUploadedEventObject {
  versionNumber: string;
}
export type VersionUploadedEvent = TypedEvent<
  [string],
  VersionUploadedEventObject
>;

export type VersionUploadedEventFilter = TypedEventFilter<VersionUploadedEvent>;

export interface DiamondRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DiamondRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deployVersion(
      versionNumber: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<string>,
      salt: PromiseOrValue<BigNumberish>,
      diamondBytecode: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getUserEcosystems(
      ecosystemsOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [DiamondRegistry.EcosystemStructOutput[]] & {
        ecosystems_: DiamondRegistry.EcosystemStructOutput[];
      }
    >;

    getVersion(
      versionNumber: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[DiamondRegistry.VersionStructOutput]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    registerOptimizationFacet(
      mainVersion: PromiseOrValue<BigNumberish>,
      optimizationType: PromiseOrValue<BytesLike>,
      bytecode: PromiseOrValue<BytesLike>,
      params: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uploadVersion(
      versionNumber: PromiseOrValue<BytesLike>,
      facetCuts: IDiamondCut.FacetCutStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    versions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number] & { exists: boolean; uploadedTimestamp: number }
    >;
  };

  deployVersion(
    versionNumber: PromiseOrValue<BytesLike>,
    name: PromiseOrValue<string>,
    salt: PromiseOrValue<BigNumberish>,
    diamondBytecode: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getUserEcosystems(
    ecosystemsOwner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<DiamondRegistry.EcosystemStructOutput[]>;

  getVersion(
    versionNumber: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<DiamondRegistry.VersionStructOutput>;

  owner(overrides?: CallOverrides): Promise<string>;

  registerOptimizationFacet(
    mainVersion: PromiseOrValue<BigNumberish>,
    optimizationType: PromiseOrValue<BytesLike>,
    bytecode: PromiseOrValue<BytesLike>,
    params: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uploadVersion(
    versionNumber: PromiseOrValue<BytesLike>,
    facetCuts: IDiamondCut.FacetCutStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  versions(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, number] & { exists: boolean; uploadedTimestamp: number }
  >;

  callStatic: {
    deployVersion(
      versionNumber: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<string>,
      salt: PromiseOrValue<BigNumberish>,
      diamondBytecode: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getUserEcosystems(
      ecosystemsOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<DiamondRegistry.EcosystemStructOutput[]>;

    getVersion(
      versionNumber: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<DiamondRegistry.VersionStructOutput>;

    owner(overrides?: CallOverrides): Promise<string>;

    registerOptimizationFacet(
      mainVersion: PromiseOrValue<BigNumberish>,
      optimizationType: PromiseOrValue<BytesLike>,
      bytecode: PromiseOrValue<BytesLike>,
      params: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    uploadVersion(
      versionNumber: PromiseOrValue<BytesLike>,
      facetCuts: IDiamondCut.FacetCutStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    versions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number] & { exists: boolean; uploadedTimestamp: number }
    >;
  };

  filters: {
    "EcosystemDeployed(address,address,bytes32)"(
      user?: null,
      ecosystem?: null,
      versionNumber?: null
    ): EcosystemDeployedEventFilter;
    EcosystemDeployed(
      user?: null,
      ecosystem?: null,
      versionNumber?: null
    ): EcosystemDeployedEventFilter;

    "MigrationCancelled(address,uint32)"(
      cancellor?: null,
      timeCancelled?: null
    ): MigrationCancelledEventFilter;
    MigrationCancelled(
      cancellor?: null,
      timeCancelled?: null
    ): MigrationCancelledEventFilter;

    "MigrationInitiated(address,uint32)"(
      initiatior?: null,
      timeInitiatied?: null
    ): MigrationInitiatedEventFilter;
    MigrationInitiated(
      initiatior?: null,
      timeInitiatied?: null
    ): MigrationInitiatedEventFilter;

    "VersionUpgraded(bytes32,bytes32,address)"(
      newVersion?: null,
      oldVersion?: null,
      ecosystemOwner?: null
    ): VersionUpgradedEventFilter;
    VersionUpgraded(
      newVersion?: null,
      oldVersion?: null,
      ecosystemOwner?: null
    ): VersionUpgradedEventFilter;

    "VersionUploaded(bytes32)"(
      versionNumber?: null
    ): VersionUploadedEventFilter;
    VersionUploaded(versionNumber?: null): VersionUploadedEventFilter;
  };

  estimateGas: {
    deployVersion(
      versionNumber: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<string>,
      salt: PromiseOrValue<BigNumberish>,
      diamondBytecode: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getUserEcosystems(
      ecosystemsOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVersion(
      versionNumber: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    registerOptimizationFacet(
      mainVersion: PromiseOrValue<BigNumberish>,
      optimizationType: PromiseOrValue<BytesLike>,
      bytecode: PromiseOrValue<BytesLike>,
      params: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uploadVersion(
      versionNumber: PromiseOrValue<BytesLike>,
      facetCuts: IDiamondCut.FacetCutStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    versions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deployVersion(
      versionNumber: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<string>,
      salt: PromiseOrValue<BigNumberish>,
      diamondBytecode: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getUserEcosystems(
      ecosystemsOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVersion(
      versionNumber: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerOptimizationFacet(
      mainVersion: PromiseOrValue<BigNumberish>,
      optimizationType: PromiseOrValue<BytesLike>,
      bytecode: PromiseOrValue<BytesLike>,
      params: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uploadVersion(
      versionNumber: PromiseOrValue<BytesLike>,
      facetCuts: IDiamondCut.FacetCutStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    versions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
