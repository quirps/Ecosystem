/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  ExchangeRewardPool,
  ExchangeRewardPoolInterface,
} from "../../exchange/ExchangeRewardPool";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_exchangeRewardERC1155",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "MigrationAlreadyCompleted",
    type: "error",
  },
  {
    inputs: [],
    name: "MigrationAlreadyInitiated",
    type: "error",
  },
  {
    inputs: [],
    name: "MigrationNotInitiated",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "cancellor",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "timeCancelled",
        type: "uint32",
      },
    ],
    name: "MigrationCancelled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "initiatior",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "timeInitiatied",
        type: "uint32",
      },
    ],
    name: "MigrationInitiated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldOwner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint32",
        name: "timeStart",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "enum LibTimeManagement.StakeDayInterval",
        name: "stakeInterval",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "stakeAmouunt",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "staker",
        type: "address",
      },
    ],
    name: "Staked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "staker",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "StakerRewardsCollected",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "_stakeIds",
        type: "uint256[]",
      },
      {
        internalType: "enum LibTimeManagement.StakeDayInterval[]",
        name: "_stakeIntervals",
        type: "uint8[]",
      },
      {
        internalType: "uint256[]",
        name: "_stakeAmounts",
        type: "uint256[]",
      },
      {
        internalType: "address[]",
        name: "_tokenAddresses",
        type: "address[]",
      },
    ],
    name: "batchStakeTimePool",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenAddress",
        type: "address",
      },
      {
        internalType: "enum LibTimeManagement.StakeDayInterval",
        name: "_stakeInterval",
        type: "uint8",
      },
      {
        internalType: "uint32",
        name: "_stakeStartTimeSlot",
        type: "uint32",
      },
      {
        internalType: "uint256",
        name: "_stakeAmount",
        type: "uint256",
      },
    ],
    name: "calculateReward",
    outputs: [
      {
        internalType: "uint256",
        name: "reward_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_stakeId",
        type: "uint256",
      },
    ],
    name: "collectReward",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenAddress",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "_startTimeSlot",
        type: "uint32",
      },
    ],
    name: "collectRewardCleanupUser",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_tokenAddresses",
        type: "address[]",
      },
      {
        internalType: "uint32[]",
        name: "_startTimeSlots",
        type: "uint32[]",
      },
    ],
    name: "collectRewardCleanupUser",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "rollingEarningsSumRatio",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenAddress",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "_timeSlot",
        type: "uint32",
      },
      {
        internalType: "enum LibTimeManagement.StakeDayInterval",
        name: "_stakeDayInterval",
        type: "uint8",
      },
    ],
    name: "stakeSumGetter",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_stakeId",
        type: "uint256",
      },
      {
        internalType: "enum LibTimeManagement.StakeDayInterval",
        name: "_stakeInterval",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "_stakeAmount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_tokenAddress",
        type: "address",
      },
    ],
    name: "stakeTimePool",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "timePoolStakes",
    outputs: [
      {
        internalType: "uint32",
        name: "startTimeSlot",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "staker",
        type: "address",
      },
      {
        internalType: "enum LibTimeManagement.StakeDayInterval",
        name: "stakeInterval",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "enum ExchangeRewardPool.StakeStatus",
        name: "status",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    name: "timeSlotActivationBitMap",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    name: "timeSlotRewards",
    outputs: [
      {
        internalType: "uint256",
        name: "totalSlotSum",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalEarningsPerSum",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c060405234801561000f575f5ffd5b50604051611ed8380380611ed883398101604081905261002e91610049565b63ffffffff42166080526001600160a01b031660a052610076565b5f60208284031215610059575f5ffd5b81516001600160a01b038116811461006f575f5ffd5b9392505050565b60805160a051611e336100a55f395f81816105840152610a7101525f818161126701526113550152611e335ff3fe608060405234801561000f575f5ffd5b50600436106100a6575f3560e01c8063aaf34a941161006e578063aaf34a941461019a578063b3994df0146101ad578063bd3507da146101c0578063c0276c35146101d3578063c622ade31461021c578063cad803aa14610225575f5ffd5b80630f778e4d146100aa5780631c36f61d146100be5780631f319c85146100d15780639971047d1461014f5780639fc6bbee14610162575b5f5ffd5b6100bc6100b8366004611611565b5050565b005b6100bc6100cc3660046116f9565b610238565b6101346100df366004611825565b600260208190525f918252604090912080546001820154919092015463ffffffff83169264010000000081046001600160a01b0390811693600160c01b90920460ff9081169391821691600160a01b90041686565b60405161014696959493929190611864565b60405180910390f35b6100bc61015d366004611930565b6102ca565b61018c610170366004611611565b600560209081525f928352604080842090915290825290205481565b604051908152602001610146565b6100bc6101a83660046119f3565b610400565b61018c6101bb366004611a36565b610794565b6100bc6101ce366004611825565b6107f8565b6102076101e1366004611611565b600360209081525f92835260408084209091529082529020600181015460029091015482565b60408051928352602083019190915201610146565b61018c60045481565b61018c610233366004611a76565b610b76565b5f5b868110156102c0576102b888888381811061025757610257611abe565b9050602002013587838151811061027057610270611abe565b602002602001015187878581811061028a5761028a611abe565b905060200201358686868181106102a3576102a3611abe565b90506020020160208101906101a89190611ad2565b60010161023a565b5050505050505050565b5f546001600160a01b03166102dd610c7d565b6001600160a01b0316146103535760405162461bcd60e51b815260206004820152603260248201527f4d757374207573652074686520636c65616e75704164647265737320746f206160448201527131b1b2b9b9903a3432b9b290333ab732399760711b60648201526084015b60405180910390fd5b80518251146103b95760405162461bcd60e51b815260206004820152602c60248201527f496e70757420706172616d6574657220617267756d656e74206c656e6774687360448201526b1036bab9ba1036b0ba31b41760a11b606482015260840161034a565b5f5b82518110156103f3576103f88382815181106103d9576103d9611abe565b60200260200101518383815181106103f3576103f3611abe565b505050565b6001016103bb565b5f8481526002602052604090205463ffffffff16156104775760405162461bcd60e51b815260206004820152602d60248201527f412054696d6520506f6f6c207374616b6520616c72656164792065786973747360448201526c081dda5d1a081d1a1a5cc81a59609a1b606482015260840161034a565b306001600160a01b038216036104cf5760405162461bcd60e51b815260206004820152601e60248201527f52657761726420746f6b656e73206172656e2774207374616b6561626c650000604482015260640161034a565b5f6104d984610c8b565b90505f6104f063ffffffff428116908490610cc416565b90505f6104fc86610ce4565b6105099060ff1686611b13565b6001600160a01b0385165f90815260036020908152604080832063ffffffff8716845290915281209192508291908860048111156105495761054961183c565b600481111561055a5761055a61183c565b81526020019081526020015f205f8282546105759190611b26565b90915550506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663f5298aca6105b1610c7d565b6040516001600160e01b031960e084901b1681526001600160a01b0391821660048201529087166024820152604481018890526064015f604051808303815f87803b1580156105fe575f5ffd5b505af1158015610610573d5f5f3e3d5ffd5b505050506040518060c001604052808363ffffffff168152602001610633610c7d565b6001600160a01b031681526020018760048111156106535761065361183c565b8152602081018790526001600160a01b03861660408201526060015f90525f8881526002602090815260409182902083518154928501516001600160a01b0316640100000000026001600160c01b031990931663ffffffff9091161791909117808255918301519091829060ff60c01b1916600160c01b8360048111156106dc576106dc61183c565b0217905550606082015160018083019190915560808301516002830180546001600160a01b039092166001600160a01b031983168117825560a08601519391926001600160a81b0319161790600160a01b90849081111561073f5761073f61183c565b02179055509050507fa163e685e5175da6bd47631e95f99190e5729b9ae285b946dc09132981ab03dd828787610773610c7d565b6040516107839493929190611b39565b60405180910390a150505050505050565b6001600160a01b0383165f90815260036020908152604080832063ffffffff861684529091528120818360048111156107cf576107cf61183c565b60048111156107e0576107e061183c565b81526020019081526020015f205490505b9392505050565b5f81815260026020819052604082208054918101546001820154919260ff600160c01b820416926001600160a01b039283169263ffffffff8316926401000000009004168661084686610c8b565b6108509085611b73565b90505f6002880154600160a01b900460ff1660018111156108735761087361183c565b146108ca5760405162461bcd60e51b815260206004820152602160248201527f4d75736e2774206861766520636f6c6c656374656420726577617264732079656044820152601d60fa1b606482015260840161034a565b865464010000000090046001600160a01b03166108e5610c7d565b6001600160a01b03161461093b5760405162461bcd60e51b815260206004820152601b60248201527f4d75737420626520746865206f726967696e616c207374616b65720000000000604482015260640161034a565b4263ffffffff1661094b5f610c8b565b6109559083611b73565b63ffffffff16106109a85760405162461bcd60e51b815260206004820152601d60248201527f5374616b6520706572696f64206973207374696c6c206f6e676f696e67000000604482015260640161034a565b6001600160a01b0385165f90815260036020908152604080832063ffffffff881684529091528120906109dd87898888610b76565b60028a018054600160a01b60ff60a01b199091161790556040516323b872dd60e01b81523060048201526001600160a01b03868116602483015260448201839052919250908816906323b872dd906064016020604051808303815f875af1158015610a4a573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a6e9190611b8f565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f242432a30610aa7610c7d565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529082166024820152908a166044820152606481018d905260a060848201525f60a482015260c4015f604051808303815f87803b158015610b09575f5ffd5b505af1158015610b1b573d5f5f3e3d5ffd5b505050507fcc024663f9b37b508025f131283368a8776da63f5d9ccca3285754a40453969d610b48610c7d565b604080516001600160a01b039092168252602082018d90520160405180910390a15050505050505050505050565b5f5f5f5f610b85888888610d03565b925092509250610bbd6040518060400160405280601081526020016f626f6f6c2076616c756520697320257360801b81525084610d9b565b8215610bce575f9350505050610c75565b6001600160a01b0388165f90815260036020908152604080832063ffffffff808716855292528083206002908101549285168452908320015482919091509150610c456040518060400160405280601581526020017466696e616c2072657761726473206172616520257360581b81525082610de0565b670de0b6b3a764000087610c598484611bae565b610c639190611bc1565b610c6d9190611b13565b955050505050505b949350505050565b5f610c86610e25565b905090565b5f610c94610e77565b826004811115610ca657610ca661183c565b60ff1660058110610cb957610cb9611abe565b602002015192915050565b5f81610cd08185611bd8565b610cda9085611bff565b6107f19190611b73565b5f5f610cef83610c8b565b9050610cf9610eb9565b6107f19082611c1b565b5f5f5f610d11868686610ec3565b9050610d586040518060400160405280602081526020017f74686973206973207468652066696e616c2072657761726420736c6f742025738152508263ffffffff16610de0565b8063ffffffff165f03610d735750600191505f905080610d92565b610d7d8685611207565b9150610d8e8263ffffffff166113d9565b5f92505b93509350939050565b6100b88282604051602401610db1929190611c70565b60408051601f198184030181529190526020810180516001600160e01b031663c3b5563560e01b179052611421565b6100b88282604051602401610df6929190611c93565b60408051601f198184030181529190526020810180516001600160e01b0316632d839cb360e21b179052611421565b5f60143610801590610e6057507f413a4c31c13c7c3de0c7da37be5d779b152baf3f21a1cb760fda41eb8ca97776546001600160a01b031633145b15610e72575060131936013560601c90565b503390565b610e7f6115c5565b506040805160a0810182526201518081526203f4806020820152620bdd80918101919091526217bb006060820152622f7600608082015290565b5f610c865f610c8b565b5f5f5f5f5f5f610f016040518060400160405280601081526020016f737461727420736c6f7420697320257360801b8152508863ffffffff16610de0565b610f1563ffffffff808916908a9061142a16565b9450610f4f6040518060400160405280601081526020016f66696e616c20736c6f7420697320257360801b8152508663ffffffff16610de0565b610f6363ffffffff808716905f9061145116565b6001600160a01b038b165f90815260056020908152604080832063ffffffff8616845290915290205491955093509150610f9c88610ce4565b9050610fad8463ffffffff166113d9565b610fe360405180604001604052806011815260200170737461727420706f736974696f6e20257360781b8152508460ff16610de0565b5f80610ff260ff861684611475565b91509150610fff846114a4565b5f8261100b5783611015565b6110158285611cb4565b90505f5b8160ff168160ff1610156110b6575f6110328289611cb4565b90505f611040826002611db0565b8816146110ad5761107d6040518060400160405280601181526020017066696e616c20706f73697469696f20257360781b8152508260ff16610de0565b611085610eb9565b6110929060ff8316611dbe565b61109c908a611b73565b9a50505050505050505050506107f1565b50600101611019565b5060ff84166110c58288611cb4565b6110d0906001611de4565b60ff16036110e8575f985050505050505050506107f1565b8261115b5760405162461bcd60e51b815260206004820152603860248201527f4d75737420626520756e646572666c6f77656420746f2072656163682074686960448201527f7320706f696e74202d20437269746963616c204572726f720000000000000000606482015260840161034a565b60ff5f6111768e61117163ffffffff8f166114e9565b611508565b5090505f5b8460ff168160ff1610156111f3575f6111948285611cb4565b90505f6111a2826002611db0565b8416146111ea576111b1610eb9565b6111be9060ff8316611dbe565b6111cd8c63ffffffff166114e9565b6111d79190611b73565b9c505050505050505050505050506107f1565b5060010161117b565b505f9e9d5050505050505050505050505050565b5f5f611211610eb9565b61121b9084611bff565b90505f5f61123a61122a610eb9565b63ffffffff808616919061156116565b915091505f6112498784611508565b5090505f6112588360ff611cb4565b60ff1682901b9050806112e0577f000000000000000000000000000000000000000000000000000000000000000063ffffffff168463ffffffff1610156112a6575f955050505050506113d3565b5f6112af610eb9565b6112ba856001611de4565b60ff166112c79190611dbe565b6112d19087611bff565b90506112dd8982611207565b50505b5f5b8360ff168160ff161015611352575f6112fb8286611cb4565b90505f600161130b836002611db0565b6113159190611bae565b85161461134957611324610eb9565b6113319060ff8316611dbe565b61133b9087611b73565b9750505050505050506113d3565b506001016112e2565b507f000000000000000000000000000000000000000000000000000000000000000063ffffffff168463ffffffff161015611394575f955050505050506113d3565b5f61139d610eb9565b6113a8856001611de4565b60ff166113b59190611dbe565b6113bf9089611bff565b90506113cb8982611207565b505050505050505b92915050565b61141e816040516024016113ef91815260200190565b60408051601f198184030181529190526020810180516001600160e01b031663f82c50f160e01b179052611421565b50565b61141e816115a6565b5f6114345f610c8b565b61143d83610c8b565b6114479085611b73565b6107f19190611bff565b5f5f5f61145d84610c8b565b90506114698582611561565b90969095509350505050565b5f8082840360ff8086169082161115611497576001925061010003905061149d565b5f925090505b9250929050565b61141e816040516024016114ba91815260200190565b60408051601f198184030181529190526020810180516001600160e01b03166327b7cf8560e01b179052611421565b5f60ff6114f4610eb9565b6114fe9190611dbe565b6113d39083611bff565b5f5f5f6115145f610c8b565b90505f8061152c63ffffffff80881690859061156116565b506001600160a01b039097165f908152600560209081526040822063ffffffff90991690915296909652509194909350915050565b5f808061156f60ff85611dbe565b90508361157c8287611bd8565b6115869190611c1b565b91506115928186611bd8565b61159c9086611bff565b9250509250929050565b5f6a636f6e736f6c652e6c6f6790505f5f835160208501845afa505050565b6040518060a001604052806005906020820280368337509192915050565b80356001600160a01b03811681146115f9575f5ffd5b919050565b803563ffffffff811681146115f9575f5ffd5b5f5f60408385031215611622575f5ffd5b61162b836115e3565b9150611639602084016115fe565b90509250929050565b5f5f83601f840112611652575f5ffd5b50813567ffffffffffffffff811115611669575f5ffd5b6020830191508360208260051b850101111561149d575f5ffd5b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f1916810167ffffffffffffffff811182821017156116c0576116c0611683565b604052919050565b5f67ffffffffffffffff8211156116e1576116e1611683565b5060051b60200190565b8035600581106115f9575f5ffd5b5f5f5f5f5f5f5f6080888a03121561170f575f5ffd5b873567ffffffffffffffff811115611725575f5ffd5b6117318a828b01611642565b909850965050602088013567ffffffffffffffff811115611750575f5ffd5b8801601f81018a13611760575f5ffd5b803561177361176e826116c8565b611697565b8082825260208201915060208360051b85010192508c831115611794575f5ffd5b6020840193505b828410156117bd576117ac846116eb565b82526020938401939091019061179b565b9750505050604088013567ffffffffffffffff8111156117db575f5ffd5b6117e78a828b01611642565b909550935050606088013567ffffffffffffffff811115611806575f5ffd5b6118128a828b01611642565b989b979a50959850939692959293505050565b5f60208284031215611835575f5ffd5b5035919050565b634e487b7160e01b5f52602160045260245ffd5b600581106118605761186061183c565b9052565b63ffffffff871681526001600160a01b038616602082015260c0810161188d6040830187611850565b606082018590526001600160a01b0384166080830152600283106118b3576118b361183c565b8260a0830152979650505050505050565b5f82601f8301126118d3575f5ffd5b81356118e161176e826116c8565b8082825260208201915060208360051b860101925085831115611902575f5ffd5b602085015b8381101561192657611918816115fe565b835260209283019201611907565b5095945050505050565b5f5f60408385031215611941575f5ffd5b823567ffffffffffffffff811115611957575f5ffd5b8301601f81018513611967575f5ffd5b803561197561176e826116c8565b8082825260208201915060208360051b850101925087831115611996575f5ffd5b6020840193505b828410156119bf576119ae846115e3565b82526020938401939091019061199d565b9450505050602083013567ffffffffffffffff8111156119dd575f5ffd5b6119e9858286016118c4565b9150509250929050565b5f5f5f5f60808587031215611a06575f5ffd5b84359350611a16602086016116eb565b925060408501359150611a2b606086016115e3565b905092959194509250565b5f5f5f60608486031215611a48575f5ffd5b611a51846115e3565b9250611a5f602085016115fe565b9150611a6d604085016116eb565b90509250925092565b5f5f5f5f60808587031215611a89575f5ffd5b611a92856115e3565b9350611aa0602086016116eb565b9250611aae604086016115fe565b9396929550929360600135925050565b634e487b7160e01b5f52603260045260245ffd5b5f60208284031215611ae2575f5ffd5b6107f1826115e3565b634e487b7160e01b5f52601260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b5f82611b2157611b21611aeb565b500490565b808201808211156113d3576113d3611aff565b63ffffffff8516815260808101611b536020830186611850565b60408201939093526001600160a01b039190911660609091015292915050565b63ffffffff81811683821601908111156113d3576113d3611aff565b5f60208284031215611b9f575f5ffd5b815180151581146107f1575f5ffd5b818103818111156113d3576113d3611aff565b80820281158282048414176113d3576113d3611aff565b5f63ffffffff831680611bed57611bed611aeb565b8063ffffffff84160691505092915050565b63ffffffff82811682821603908111156113d3576113d3611aff565b5f63ffffffff831680611c3057611c30611aeb565b8063ffffffff84160491505092915050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b604081525f611c826040830185611c42565b905082151560208301529392505050565b604081525f611ca56040830185611c42565b90508260208301529392505050565b60ff82811682821603908111156113d3576113d3611aff565b6001815b6001841115611d0857808504811115611cec57611cec611aff565b6001841615611cfa57908102905b60019390931c928002611cd1565b935093915050565b5f82611d1e575060016113d3565b81611d2a57505f6113d3565b8160018114611d405760028114611d4a57611d66565b60019150506113d3565b60ff841115611d5b57611d5b611aff565b50506001821b6113d3565b5060208310610133831016604e8410600b8410161715611d89575081810a6113d3565b611d955f198484611ccd565b805f1904821115611da857611da8611aff565b029392505050565b5f6107f160ff841683611d10565b63ffffffff8181168382160290811690818114611ddd57611ddd611aff565b5092915050565b60ff81811683821601908111156113d3576113d3611aff56fea26469706673582212203329368c1199ece26bb92fa732fc3cc0785840ecdf66ef7d7115d94209943bf264736f6c634300081c0033";

type ExchangeRewardPoolConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ExchangeRewardPoolConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ExchangeRewardPool__factory extends ContractFactory {
  constructor(...args: ExchangeRewardPoolConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _exchangeRewardERC1155: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ExchangeRewardPool> {
    return super.deploy(
      _exchangeRewardERC1155,
      overrides || {}
    ) as Promise<ExchangeRewardPool>;
  }
  override getDeployTransaction(
    _exchangeRewardERC1155: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_exchangeRewardERC1155, overrides || {});
  }
  override attach(address: string): ExchangeRewardPool {
    return super.attach(address) as ExchangeRewardPool;
  }
  override connect(signer: Signer): ExchangeRewardPool__factory {
    return super.connect(signer) as ExchangeRewardPool__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExchangeRewardPoolInterface {
    return new utils.Interface(_abi) as ExchangeRewardPoolInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ExchangeRewardPool {
    return new Contract(address, _abi, signerOrProvider) as ExchangeRewardPool;
  }
}
