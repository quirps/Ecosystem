/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  DiamondDeploy,
  DiamondDeployInterface,
} from "../../../deploy/diamondDeploy.sol/DiamondDeploy";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_bytecode",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes",
        name: "bytecode",
        type: "bytes",
      },
    ],
    name: "NewDiamond",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_salt",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_bytecode",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_arguments",
        type: "bytes",
      },
    ],
    name: "deploy",
    outputs: [
      {
        internalType: "address",
        name: "diamond_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "diamondCutFacet",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000a1038038062000a10833981810160405281019062000037919062000222565b80805190602001206001819055507f22cc9b9213b81ffc180084abc45bbcfb02a026420bb52d3f98da156f63ba9e9c81604051620000769190620002d0565b60405180910390a150620002f4565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620000ee82620000a3565b810181811067ffffffffffffffff8211171562000110576200010f620000b4565b5b80604052505050565b60006200012562000085565b9050620001338282620000e3565b919050565b600067ffffffffffffffff821115620001565762000155620000b4565b5b6200016182620000a3565b9050602081019050919050565b60005b838110156200018e57808201518184015260208101905062000171565b838111156200019e576000848401525b50505050565b6000620001bb620001b58462000138565b62000119565b905082815260208101848484011115620001da57620001d96200009e565b5b620001e78482856200016e565b509392505050565b600082601f83011262000207576200020662000099565b5b815162000219848260208601620001a4565b91505092915050565b6000602082840312156200023b576200023a6200008f565b5b600082015167ffffffffffffffff8111156200025c576200025b62000094565b5b6200026a84828501620001ef565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60006200029c8262000273565b620002a881856200027e565b9350620002ba8185602086016200016e565b620002c581620000a3565b840191505092915050565b60006020820190508181036000830152620002ec81846200028f565b905092915050565b61070c80620003046000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063a051e9b31461003b578063c16ce93b14610059575b600080fd5b610043610089565b60405161005091906101dd565b60405180910390f35b610073600480360381019061006e91906103b4565b6100ad565b60405161008091906101dd565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806001548480519060200120146100fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f2906104fc565b60405180910390fd5b600086846040516020016101109291906105a4565b604051602081830303815290604052905060008582604051602001610136929190610610565b6040516020818303038152906040529050600033888760405160200161015e9392919061069d565b604051602081830303815290604052805190602001209050808251602084016000f59350833b61018d57600080fd5b83945050505050949350505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101c78261019c565b9050919050565b6101d7816101bc565b82525050565b60006020820190506101f260008301846101ce565b92915050565b6000604051905090565b600080fd5b600080fd5b610215816101bc565b811461022057600080fd5b50565b6000813590506102328161020c565b92915050565b6000819050919050565b61024b81610238565b811461025657600080fd5b50565b60008135905061026881610242565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6102c182610278565b810181811067ffffffffffffffff821117156102e0576102df610289565b5b80604052505050565b60006102f36101f8565b90506102ff82826102b8565b919050565b600067ffffffffffffffff82111561031f5761031e610289565b5b61032882610278565b9050602081019050919050565b82818337600083830152505050565b600061035761035284610304565b6102e9565b90508281526020810184848401111561037357610372610273565b5b61037e848285610335565b509392505050565b600082601f83011261039b5761039a61026e565b5b81356103ab848260208601610344565b91505092915050565b600080600080608085870312156103ce576103cd610202565b5b60006103dc87828801610223565b94505060206103ed87828801610259565b935050604085013567ffffffffffffffff81111561040e5761040d610207565b5b61041a87828801610386565b925050606085013567ffffffffffffffff81111561043b5761043a610207565b5b61044787828801610386565b91505092959194509250565b600082825260208201905092915050565b7f42797465636f6465206d757374206d617463682074686174206f66207468652060008201527f4469616d6f6e64206173736f6369617465642077697468207468697320636f6e60208201527f74726163742e0000000000000000000000000000000000000000000000000000604082015250565b60006104e6604683610453565b91506104f182610464565b606082019050919050565b60006020820190508181036000830152610515816104d9565b9050919050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561055657808201518184015260208101905061053b565b83811115610565576000848401525b50505050565b60006105768261051c565b6105808185610527565b9350610590818560208601610538565b61059981610278565b840191505092915050565b60006040820190506105b960008301856101ce565b81810360208301526105cb818461056b565b90509392505050565b600081905092915050565b60006105ea8261051c565b6105f481856105d4565b9350610604818560208601610538565b80840191505092915050565b600061061c82856105df565b915061062882846105df565b91508190509392505050565b60008160601b9050919050565b600061064c82610634565b9050919050565b600061065e82610641565b9050919050565b610676610671826101bc565b610653565b82525050565b6000819050919050565b61069761069282610238565b61067c565b82525050565b60006106a98286610665565b6014820191506106b98285610686565b6020820191506106c982846105df565b915081905094935050505056fea26469706673582212202935b2edebeaef6a088fd124bdb533bd7052268ed939b9482db5f45b946bbcb164736f6c63430008090033";

type DiamondDeployConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DiamondDeployConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DiamondDeploy__factory extends ContractFactory {
  constructor(...args: DiamondDeployConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _bytecode: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DiamondDeploy> {
    return super.deploy(_bytecode, overrides || {}) as Promise<DiamondDeploy>;
  }
  override getDeployTransaction(
    _bytecode: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_bytecode, overrides || {});
  }
  override attach(address: string): DiamondDeploy {
    return super.attach(address) as DiamondDeploy;
  }
  override connect(signer: Signer): DiamondDeploy__factory {
    return super.connect(signer) as DiamondDeploy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DiamondDeployInterface {
    return new utils.Interface(_abi) as DiamondDeployInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DiamondDeploy {
    return new Contract(address, _abi, signerOrProvider) as DiamondDeploy;
  }
}
