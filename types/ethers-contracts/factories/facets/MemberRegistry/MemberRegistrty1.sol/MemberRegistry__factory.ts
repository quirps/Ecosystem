/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  MemberRegistry,
  MemberRegistryInterface,
} from "../../../../facets/MemberRegistry/MemberRegistrty1.sol/MemberRegistry";

const _abi = [
  {
    inputs: [],
    name: "MigrationAlreadyCompleted",
    type: "error",
  },
  {
    inputs: [],
    name: "MigrationAlreadyInitiated",
    type: "error",
  },
  {
    inputs: [],
    name: "MigrationNotInitiated",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "cancellor",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "timeCancelled",
        type: "uint32",
      },
    ],
    name: "MigrationCancelled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "initiatior",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "timeInitiatied",
        type: "uint32",
      },
    ],
    name: "MigrationInitiated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "username",
        type: "string",
      },
      {
        indexed: false,
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "enum LibMemberRegistry.RecoveryStatus",
        name: "recoveryStatus",
        type: "uint8",
      },
    ],
    name: "RecoveryAction",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "username",
        type: "string",
      },
      {
        indexed: false,
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
    ],
    name: "UserRegistered",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "username",
        type: "string",
      },
    ],
    name: "cancelVerify",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "username",
        type: "string",
      },
    ],
    name: "finalizeRecovery",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "verificationTime",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "username",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "merkleRoot",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "verifyUsername",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50611840806100206000396000f3fe608060405234801561001057600080fd5b506004361061004b5760003560e01c806261441814610050578063366db2171461006e578063a05bc6381461008a578063ef6bba46146100a6575b600080fd5b6100586100c2565b6040516100659190610d97565b60405180910390f35b61008860048036038101906100839190610f0c565b6100c9565b005b6100a4600480360381019061009f9190610f0c565b6100d5565b005b6100c060048036038101906100bb9190611058565b6100e1565b005b6212750081565b6100d2816100fb565b50565b6100de816102ac565b50565b6100f18888888888888888610437565b5050505050505050565b60006101056104e9565b90506000816001018360405161011b91906111a4565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1661016b610516565b73ffffffffffffffffffffffffffffffffffffffff1614156102a7576040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160006bffffffffffffffffffffffff1681525082600201846040516101d491906111a4565b908152602001604051809103902060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055509050507f847ddfc3a23a2f365a8e99531ca33ca5d6803bbeff70e752813b93c21d2f35098361028d610516565b600260405161029e9392919061128b565b60405180910390a15b505050565b60006102b66104e9565b9050600081600201836040516102cc91906111a4565b90815260200160405180910390206040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff16815250509050426bffffffffffffffffffffffff1681602001516bffffffffffffffffffffffff161080156103e05750806000015173ffffffffffffffffffffffffffffffffffffffff166103c8610516565b73ffffffffffffffffffffffffffffffffffffffff16145b15610432576103ee83610525565b7f847ddfc3a23a2f365a8e99531ca33ca5d6803bbeff70e752813b93c21d2f350983610418610516565b60016040516104299392919061128b565b60405180910390a15b505050565b61044687878787878787610638565b60006104506104e9565b9050600073ffffffffffffffffffffffffffffffffffffffff16816001018a60405161047c91906111a4565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146104d4576104cf896109b2565b6104de565b6104dd89610bfd565b5b505050505050505050565b6000807fca9e0b20c84408e13887c5306435f83bd031b093871b390a26e9548e3336e2b090508091505090565b6000610520610c09565b905090565b600061052f6104e9565b9050610539610516565b816001018360405161054b91906111a4565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818160000160006105a6610516565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090805190602001906105f3929190610cd5565b507f7f605d0ff47d2a070e456b69ce2a36041788910b64443c7f4c6d307993cade2c8261061e610516565b60405161062c9291906112c9565b60405180910390a15050565b60006106426104e9565b90508060030160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483116106c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106be90611391565b60405180910390fd5b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f7fc70ef06638535b4881fafcac8287e210e3769ff1a8e91f1b95d6246e61e4d3c67fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc646306040516020016107429594939291906113cf565b60405160208183030381529060405280519060200120905060007fe19138ba454e5b4558ef558e91b9b46a3ad2d91cde333ab0f1f55ea06b5c343a87878787604051602001610795959493929190611422565b604051602081830303815290604052805190602001209050600082826040516020016107c29291906114e2565b60405160208183030381529060405280519060200120905060006001828d8d8d604051600081526020016040526040516107ff9493929190611528565b6020604051602081039080840390855afa158015610821573d6000803e3d6000fd5b5050506020604051035190508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461089b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610892906115b9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561090b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090290611625565b60405180910390fd5b85421061094d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610944906116b7565b60405180910390fd5b8460030160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919061099f90611706565b9190505550505050505050505050505050565b60006109bc6104e9565b9050600081600201836040516109d291906111a4565b90815260200160405180910390206040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff16815250509050806000015173ffffffffffffffffffffffffffffffffffffffff16610aa4610516565b73ffffffffffffffffffffffffffffffffffffffff1614610bf8576040518060400160405280610ad2610516565b73ffffffffffffffffffffffffffffffffffffffff1681526020016212750063ffffffff1642610b029190611767565b6bffffffffffffffffffffffff168152508260020184604051610b2591906111a4565b908152602001604051809103902060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055509050507f847ddfc3a23a2f365a8e99531ca33ca5d6803bbeff70e752813b93c21d2f350983610bde610516565b6000604051610bef9392919061128b565b60405180910390a15b505050565b610c0681610525565b50565b60006014600036905010158015610c255750610c2433610c40565b5b15610c3957601436033560601c9050610c3d565b3390505b90565b600080610c4b610ca8565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614915050919050565b6000807f413a4c31c13c7c3de0c7da37be5d779b152baf3f21a1cb760fda41eb8ca9777690508091505090565b828054610ce1906117d8565b90600052602060002090601f016020900481019282610d035760008555610d4a565b82601f10610d1c57805160ff1916838001178555610d4a565b82800160010185558215610d4a579182015b82811115610d49578251825591602001919060010190610d2e565b5b509050610d579190610d5b565b5090565b5b80821115610d74576000816000905550600101610d5c565b5090565b600063ffffffff82169050919050565b610d9181610d78565b82525050565b6000602082019050610dac6000830184610d88565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610e1982610dd0565b810181811067ffffffffffffffff82111715610e3857610e37610de1565b5b80604052505050565b6000610e4b610db2565b9050610e578282610e10565b919050565b600067ffffffffffffffff821115610e7757610e76610de1565b5b610e8082610dd0565b9050602081019050919050565b82818337600083830152505050565b6000610eaf610eaa84610e5c565b610e41565b905082815260208101848484011115610ecb57610eca610dcb565b5b610ed6848285610e8d565b509392505050565b600082601f830112610ef357610ef2610dc6565b5b8135610f03848260208601610e9c565b91505092915050565b600060208284031215610f2257610f21610dbc565b5b600082013567ffffffffffffffff811115610f4057610f3f610dc1565b5b610f4c84828501610ede565b91505092915050565b600060ff82169050919050565b610f6b81610f55565b8114610f7657600080fd5b50565b600081359050610f8881610f62565b92915050565b6000819050919050565b610fa181610f8e565b8114610fac57600080fd5b50565b600081359050610fbe81610f98565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610fef82610fc4565b9050919050565b610fff81610fe4565b811461100a57600080fd5b50565b60008135905061101c81610ff6565b92915050565b6000819050919050565b61103581611022565b811461104057600080fd5b50565b6000813590506110528161102c565b92915050565b600080600080600080600080610100898b03121561107957611078610dbc565b5b600089013567ffffffffffffffff81111561109757611096610dc1565b5b6110a38b828c01610ede565b98505060206110b48b828c01610f79565b97505060406110c58b828c01610faf565b96505060606110d68b828c01610faf565b95505060806110e78b828c0161100d565b94505060a06110f88b828c01610faf565b93505060c06111098b828c01611043565b92505060e061111a8b828c01611043565b9150509295985092959890939650565b600081519050919050565b600081905092915050565b60005b8381101561115e578082015181840152602081019050611143565b8381111561116d576000848401525b50505050565b600061117e8261112a565b6111888185611135565b9350611198818560208601611140565b80840191505092915050565b60006111b08284611173565b915081905092915050565b600082825260208201905092915050565b60006111d78261112a565b6111e181856111bb565b93506111f1818560208601611140565b6111fa81610dd0565b840191505092915050565b61120e81610fe4565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061125457611253611214565b5b50565b600081905061126582611243565b919050565b600061127582611257565b9050919050565b6112858161126a565b82525050565b600060608201905081810360008301526112a581866111cc565b90506112b46020830185611205565b6112c1604083018461127c565b949350505050565b600060408201905081810360008301526112e381856111cc565b90506112f26020830184611205565b9392505050565b7f4e6f6e6365206973206c657373207468616e206f7220657175616c20746f206360008201527f757272656e74206e6f6e63652076616c7565206173736f63696174656420776960208201527f7468207468697320616464726573732e00000000000000000000000000000000604082015250565b600061137b6050836111bb565b9150611386826112f9565b606082019050919050565b600060208201905081810360008301526113aa8161136e565b9050919050565b6113ba81610f8e565b82525050565b6113c981611022565b82525050565b600060a0820190506113e460008301886113b1565b6113f160208301876113b1565b6113fe60408301866113b1565b61140b60608301856113c0565b6114186080830184611205565b9695505050505050565b600060a08201905061143760008301886113b1565b6114446020830187611205565b61145160408301866113b1565b61145e60608301856113c0565b61146b60808301846113c0565b9695505050505050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b60006114ab600283611135565b91506114b682611475565b600282019050919050565b6000819050919050565b6114dc6114d782610f8e565b6114c1565b82525050565b60006114ed8261149e565b91506114f982856114cb565b60208201915061150982846114cb565b6020820191508190509392505050565b61152281610f55565b82525050565b600060808201905061153d60008301876113b1565b61154a6020830186611519565b61155760408301856113b1565b61156460608301846113b1565b95945050505050565b7f4d7946756e6374696f6e3a20696e76616c6964207369676e6174757265000000600082015250565b60006115a3601d836111bb565b91506115ae8261156d565b602082019050919050565b600060208201905081810360008301526115d281611596565b9050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b600061160f6018836111bb565b915061161a826115d9565b602082019050919050565b6000602082019050818103600083015261163e81611602565b9050919050565b7f4d7946756e6374696f6e3a207369676e6564207472616e73616374696f6e206560008201527f7870697265640000000000000000000000000000000000000000000000000000602082015250565b60006116a16026836111bb565b91506116ac82611645565b604082019050919050565b600060208201905081810360008301526116d081611694565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061171182611022565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611744576117436116d7565b5b600182019050919050565b60006bffffffffffffffffffffffff82169050919050565b60006117728261174f565b915061177d8361174f565b9250826bffffffffffffffffffffffff0382111561179e5761179d6116d7565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806117f057607f821691505b60208210811415611804576118036117a9565b5b5091905056fea2646970667358221220d48adf04cdfd31b10a748f087d3fc437c7f795f3486bc9a34e1c914fbb16d09264736f6c63430008090033";

type MemberRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MemberRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MemberRegistry__factory extends ContractFactory {
  constructor(...args: MemberRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MemberRegistry> {
    return super.deploy(overrides || {}) as Promise<MemberRegistry>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MemberRegistry {
    return super.attach(address) as MemberRegistry;
  }
  override connect(signer: Signer): MemberRegistry__factory {
    return super.connect(signer) as MemberRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MemberRegistryInterface {
    return new utils.Interface(_abi) as MemberRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MemberRegistry {
    return new Contract(address, _abi, signerOrProvider) as MemberRegistry;
  }
}
