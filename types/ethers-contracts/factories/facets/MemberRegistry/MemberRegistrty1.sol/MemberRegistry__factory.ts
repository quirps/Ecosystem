/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  MemberRegistry,
  MemberRegistryInterface,
} from "../../../../facets/MemberRegistry/MemberRegistrty1.sol/MemberRegistry";

const _abi = [
  {
    inputs: [],
    name: "MigrationAlreadyCompleted",
    type: "error",
  },
  {
    inputs: [],
    name: "MigrationAlreadyInitiated",
    type: "error",
  },
  {
    inputs: [],
    name: "MigrationNotInitiated",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "cancellor",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "timeCancelled",
        type: "uint32",
      },
    ],
    name: "MigrationCancelled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "initiatior",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "timeInitiatied",
        type: "uint32",
      },
    ],
    name: "MigrationInitiated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "username",
        type: "string",
      },
      {
        indexed: false,
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "enum LibMemberRegistry.RecoveryStatus",
        name: "recoveryStatus",
        type: "uint8",
      },
    ],
    name: "RecoveryAction",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "username",
        type: "string",
      },
      {
        indexed: false,
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
    ],
    name: "UserRegistered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string[]",
        name: "username",
        type: "string[]",
      },
      {
        indexed: false,
        internalType: "address[]",
        name: "userAddress",
        type: "address[]",
      },
    ],
    name: "UsersRegistered",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "username",
        type: "string",
      },
    ],
    name: "cancelVerify",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "username",
        type: "string",
      },
    ],
    name: "finalizeRecovery",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "username",
        type: "string",
      },
    ],
    name: "setUsernameOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "verificationTime",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "username",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "merkleRoot",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "verifyUsername",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061186a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100565760003560e01c80626144181461005b578063366db21714610079578063a05bc63814610095578063aba4b8cd146100b1578063ef6bba46146100cd575b600080fd5b6100636100e9565b6040516100709190610dc1565b60405180910390f35b610093600480360381019061008e9190610f36565b6100f0565b005b6100af60048036038101906100aa9190610f36565b6100fc565b005b6100cb60048036038101906100c69190610f36565b610108565b005b6100e760048036038101906100e29190611082565b61010b565b005b6212750081565b6100f981610125565b50565b610105816102d6565b50565b50565b61011b8888888888888888610461565b5050505050505050565b600061012f610513565b90506000816001018360405161014591906111ce565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16610195610540565b73ffffffffffffffffffffffffffffffffffffffff1614156102d1576040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160006bffffffffffffffffffffffff1681525082600201846040516101fe91906111ce565b908152602001604051809103902060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055509050507f847ddfc3a23a2f365a8e99531ca33ca5d6803bbeff70e752813b93c21d2f3509836102b7610540565b60026040516102c8939291906112b5565b60405180910390a15b505050565b60006102e0610513565b9050600081600201836040516102f691906111ce565b90815260200160405180910390206040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff16815250509050426bffffffffffffffffffffffff1681602001516bffffffffffffffffffffffff1610801561040a5750806000015173ffffffffffffffffffffffffffffffffffffffff166103f2610540565b73ffffffffffffffffffffffffffffffffffffffff16145b1561045c576104188361054f565b7f847ddfc3a23a2f365a8e99531ca33ca5d6803bbeff70e752813b93c21d2f350983610442610540565b6001604051610453939291906112b5565b60405180910390a15b505050565b61047087878787878787610662565b600061047a610513565b9050600073ffffffffffffffffffffffffffffffffffffffff16816001018a6040516104a691906111ce565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146104fe576104f9896109dc565b610508565b61050789610c27565b5b505050505050505050565b6000807fca9e0b20c84408e13887c5306435f83bd031b093871b390a26e9548e3336e2b090508091505090565b600061054a610c33565b905090565b6000610559610513565b9050610563610540565b816001018360405161057591906111ce565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818160000160006105d0610540565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020908051906020019061061d929190610cff565b507f7f605d0ff47d2a070e456b69ce2a36041788910b64443c7f4c6d307993cade2c82610648610540565b6040516106569291906112f3565b60405180910390a15050565b600061066c610513565b90508060030160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483116106f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e8906113bb565b60405180910390fd5b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f7fc70ef06638535b4881fafcac8287e210e3769ff1a8e91f1b95d6246e61e4d3c67fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6463060405160200161076c9594939291906113f9565b60405160208183030381529060405280519060200120905060007fe19138ba454e5b4558ef558e91b9b46a3ad2d91cde333ab0f1f55ea06b5c343a878787876040516020016107bf95949392919061144c565b604051602081830303815290604052805190602001209050600082826040516020016107ec92919061150c565b60405160208183030381529060405280519060200120905060006001828d8d8d604051600081526020016040526040516108299493929190611552565b6020604051602081039080840390855afa15801561084b573d6000803e3d6000fd5b5050506020604051035190508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146108c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108bc906115e3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610935576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092c9061164f565b60405180910390fd5b854210610977576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096e906116e1565b60405180910390fd5b8460030160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906109c990611730565b9190505550505050505050505050505050565b60006109e6610513565b9050600081600201836040516109fc91906111ce565b90815260200160405180910390206040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff16815250509050806000015173ffffffffffffffffffffffffffffffffffffffff16610ace610540565b73ffffffffffffffffffffffffffffffffffffffff1614610c22576040518060400160405280610afc610540565b73ffffffffffffffffffffffffffffffffffffffff1681526020016212750063ffffffff1642610b2c9190611791565b6bffffffffffffffffffffffff168152508260020184604051610b4f91906111ce565b908152602001604051809103902060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055509050507f847ddfc3a23a2f365a8e99531ca33ca5d6803bbeff70e752813b93c21d2f350983610c08610540565b6000604051610c19939291906112b5565b60405180910390a15b505050565b610c308161054f565b50565b60006014600036905010158015610c4f5750610c4e33610c6a565b5b15610c6357601436033560601c9050610c67565b3390505b90565b600080610c75610cd2565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614915050919050565b6000807f413a4c31c13c7c3de0c7da37be5d779b152baf3f21a1cb760fda41eb8ca9777690508091505090565b828054610d0b90611802565b90600052602060002090601f016020900481019282610d2d5760008555610d74565b82601f10610d4657805160ff1916838001178555610d74565b82800160010185558215610d74579182015b82811115610d73578251825591602001919060010190610d58565b5b509050610d819190610d85565b5090565b5b80821115610d9e576000816000905550600101610d86565b5090565b600063ffffffff82169050919050565b610dbb81610da2565b82525050565b6000602082019050610dd66000830184610db2565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610e4382610dfa565b810181811067ffffffffffffffff82111715610e6257610e61610e0b565b5b80604052505050565b6000610e75610ddc565b9050610e818282610e3a565b919050565b600067ffffffffffffffff821115610ea157610ea0610e0b565b5b610eaa82610dfa565b9050602081019050919050565b82818337600083830152505050565b6000610ed9610ed484610e86565b610e6b565b905082815260208101848484011115610ef557610ef4610df5565b5b610f00848285610eb7565b509392505050565b600082601f830112610f1d57610f1c610df0565b5b8135610f2d848260208601610ec6565b91505092915050565b600060208284031215610f4c57610f4b610de6565b5b600082013567ffffffffffffffff811115610f6a57610f69610deb565b5b610f7684828501610f08565b91505092915050565b600060ff82169050919050565b610f9581610f7f565b8114610fa057600080fd5b50565b600081359050610fb281610f8c565b92915050565b6000819050919050565b610fcb81610fb8565b8114610fd657600080fd5b50565b600081359050610fe881610fc2565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061101982610fee565b9050919050565b6110298161100e565b811461103457600080fd5b50565b60008135905061104681611020565b92915050565b6000819050919050565b61105f8161104c565b811461106a57600080fd5b50565b60008135905061107c81611056565b92915050565b600080600080600080600080610100898b0312156110a3576110a2610de6565b5b600089013567ffffffffffffffff8111156110c1576110c0610deb565b5b6110cd8b828c01610f08565b98505060206110de8b828c01610fa3565b97505060406110ef8b828c01610fd9565b96505060606111008b828c01610fd9565b95505060806111118b828c01611037565b94505060a06111228b828c01610fd9565b93505060c06111338b828c0161106d565b92505060e06111448b828c0161106d565b9150509295985092959890939650565b600081519050919050565b600081905092915050565b60005b8381101561118857808201518184015260208101905061116d565b83811115611197576000848401525b50505050565b60006111a882611154565b6111b2818561115f565b93506111c281856020860161116a565b80840191505092915050565b60006111da828461119d565b915081905092915050565b600082825260208201905092915050565b600061120182611154565b61120b81856111e5565b935061121b81856020860161116a565b61122481610dfa565b840191505092915050565b6112388161100e565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061127e5761127d61123e565b5b50565b600081905061128f8261126d565b919050565b600061129f82611281565b9050919050565b6112af81611294565b82525050565b600060608201905081810360008301526112cf81866111f6565b90506112de602083018561122f565b6112eb60408301846112a6565b949350505050565b6000604082019050818103600083015261130d81856111f6565b905061131c602083018461122f565b9392505050565b7f4e6f6e6365206973206c657373207468616e206f7220657175616c20746f206360008201527f757272656e74206e6f6e63652076616c7565206173736f63696174656420776960208201527f7468207468697320616464726573732e00000000000000000000000000000000604082015250565b60006113a56050836111e5565b91506113b082611323565b606082019050919050565b600060208201905081810360008301526113d481611398565b9050919050565b6113e481610fb8565b82525050565b6113f38161104c565b82525050565b600060a08201905061140e60008301886113db565b61141b60208301876113db565b61142860408301866113db565b61143560608301856113ea565b611442608083018461122f565b9695505050505050565b600060a08201905061146160008301886113db565b61146e602083018761122f565b61147b60408301866113db565b61148860608301856113ea565b61149560808301846113ea565b9695505050505050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b60006114d560028361115f565b91506114e08261149f565b600282019050919050565b6000819050919050565b61150661150182610fb8565b6114eb565b82525050565b6000611517826114c8565b915061152382856114f5565b60208201915061153382846114f5565b6020820191508190509392505050565b61154c81610f7f565b82525050565b600060808201905061156760008301876113db565b6115746020830186611543565b61158160408301856113db565b61158e60608301846113db565b95945050505050565b7f4d7946756e6374696f6e3a20696e76616c6964207369676e6174757265000000600082015250565b60006115cd601d836111e5565b91506115d882611597565b602082019050919050565b600060208201905081810360008301526115fc816115c0565b9050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b60006116396018836111e5565b915061164482611603565b602082019050919050565b600060208201905081810360008301526116688161162c565b9050919050565b7f4d7946756e6374696f6e3a207369676e6564207472616e73616374696f6e206560008201527f7870697265640000000000000000000000000000000000000000000000000000602082015250565b60006116cb6026836111e5565b91506116d68261166f565b604082019050919050565b600060208201905081810360008301526116fa816116be565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061173b8261104c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561176e5761176d611701565b5b600182019050919050565b60006bffffffffffffffffffffffff82169050919050565b600061179c82611779565b91506117a783611779565b9250826bffffffffffffffffffffffff038211156117c8576117c7611701565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061181a57607f821691505b6020821081141561182e5761182d6117d3565b5b5091905056fea2646970667358221220d5d41a1896a04b610c2aaa9170f3e7bcc1fd9ac641f7df1c24410cf96074c02064736f6c63430008090033";

type MemberRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MemberRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MemberRegistry__factory extends ContractFactory {
  constructor(...args: MemberRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MemberRegistry> {
    return super.deploy(overrides || {}) as Promise<MemberRegistry>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MemberRegistry {
    return super.attach(address) as MemberRegistry;
  }
  override connect(signer: Signer): MemberRegistry__factory {
    return super.connect(signer) as MemberRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MemberRegistryInterface {
    return new utils.Interface(_abi) as MemberRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MemberRegistry {
    return new Contract(address, _abi, signerOrProvider) as MemberRegistry;
  }
}
