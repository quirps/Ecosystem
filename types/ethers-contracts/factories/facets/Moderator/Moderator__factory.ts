/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Moderator,
  ModeratorInterface,
} from "../../../facets/Moderator/Moderator";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_moderator",
        type: "address",
      },
    ],
    name: "getModeratorRank",
    outputs: [
      {
        internalType: "uint8",
        name: "moderatorRank_",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_moderator",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "_rank",
        type: "uint8",
      },
    ],
    name: "setModeratorRank",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610301806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806314d704e41461003b578063dec18b1414610057575b600080fd5b61005560048036038101906100509190610234565b610087565b005b610071600480360381019061006c9190610274565b610095565b60405161007e91906102b0565b60405180910390f35b61009182826100a7565b5050565b60006100a08261010c565b9050919050565b806100b061016b565b60000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055505050565b600061011661016b565b60000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000807f8c2c577630c40136bcc18deb16687d093146d4bb8d4918e4af706e0bd8cb086590508091505090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101c88261019d565b9050919050565b6101d8816101bd565b81146101e357600080fd5b50565b6000813590506101f5816101cf565b92915050565b600060ff82169050919050565b610211816101fb565b811461021c57600080fd5b50565b60008135905061022e81610208565b92915050565b6000806040838503121561024b5761024a610198565b5b6000610259858286016101e6565b925050602061026a8582860161021f565b9150509250929050565b60006020828403121561028a57610289610198565b5b6000610298848285016101e6565b91505092915050565b6102aa816101fb565b82525050565b60006020820190506102c560008301846102a1565b9291505056fea264697066735822122088a3060c630584d542543bebd7f789544267558dd11f729a654a8c9a7f8e66da64736f6c63430008090033";

type ModeratorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ModeratorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Moderator__factory extends ContractFactory {
  constructor(...args: ModeratorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Moderator> {
    return super.deploy(overrides || {}) as Promise<Moderator>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Moderator {
    return super.attach(address) as Moderator;
  }
  override connect(signer: Signer): Moderator__factory {
    return super.connect(signer) as Moderator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ModeratorInterface {
    return new utils.Interface(_abi) as ModeratorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Moderator {
    return new Contract(address, _abi, signerOrProvider) as Moderator;
  }
}
