/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  VersionFacet,
  VersionFacetInterface,
} from "../../../facets/Version/VersionFacet";

const _abi = [
  {
    inputs: [],
    name: "getVersion",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "isEcosystem",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600e575f5ffd5b50608080601a5f395ff3fe6080604052348015600e575f5ffd5b50600436106030575f3560e01c80630d8e6e2c146034578063f8a3b7f7146036575b5f5ffd5b005b604080516001815290519081900360200190f3fea2646970667358221220dba0686c79c272ba4a1b09929021fc8c844175d516d038fa86dfbcbff62a082064736f6c634300081c0033";

type VersionFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VersionFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VersionFacet__factory extends ContractFactory {
  constructor(...args: VersionFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<VersionFacet> {
    return super.deploy(overrides || {}) as Promise<VersionFacet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): VersionFacet {
    return super.attach(address) as VersionFacet;
  }
  override connect(signer: Signer): VersionFacet__factory {
    return super.connect(signer) as VersionFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VersionFacetInterface {
    return new utils.Interface(_abi) as VersionFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VersionFacet {
    return new Contract(address, _abi, signerOrProvider) as VersionFacet;
  }
}
