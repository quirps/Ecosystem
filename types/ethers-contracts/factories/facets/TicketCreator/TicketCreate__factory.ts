/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TicketCreate,
  TicketCreateInterface,
} from "../../../facets/TicketCreator/TicketCreate";

const _abi = [
  {
    inputs: [],
    name: "MigrationAlreadyCompleted",
    type: "error",
  },
  {
    inputs: [],
    name: "MigrationAlreadyInitiated",
    type: "error",
  },
  {
    inputs: [],
    name: "MigrationNotInitiated",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "ticketId",
        type: "uint256",
      },
    ],
    name: "NonTransferableError",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "timestamp",
        type: "uint32",
      },
    ],
    name: "MemberBanned",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "memberAddress",
            type: "address",
          },
          {
            internalType: "uint32",
            name: "level",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "timestamp",
            type: "uint32",
          },
        ],
        indexed: false,
        internalType: "struct LibMemberLevel.Leaf",
        name: "leaf",
        type: "tuple",
      },
    ],
    name: "MemberLevelUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "newRoot",
        type: "bytes32",
      },
    ],
    name: "MerkleRootUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "cancellor",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "timeCancelled",
        type: "uint32",
      },
    ],
    name: "MigrationCancelled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "initiatior",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "timeInitiatied",
        type: "uint32",
      },
    ],
    name: "MigrationInitiated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldOwner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "string",
            name: "title",
            type: "string",
          },
          {
            internalType: "string",
            name: "description",
            type: "string",
          },
          {
            internalType: "string",
            name: "imageHash",
            type: "string",
          },
        ],
        indexed: false,
        internalType: "struct TicketCreate.TicketMeta",
        name: "",
        type: "tuple",
      },
    ],
    name: "TicketsCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
    ],
    name: "TransferBatch",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "TransferSingle",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "ticketId",
        type: "uint256",
      },
    ],
    name: "expireable",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "string",
            name: "title",
            type: "string",
          },
          {
            internalType: "string",
            name: "description",
            type: "string",
          },
          {
            internalType: "string",
            name: "imageHash",
            type: "string",
          },
        ],
        internalType: "struct TicketCreate.TicketMeta",
        name: "_ticketMeta",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "maxTransfers",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "isActive",
                type: "bool",
              },
            ],
            internalType: "struct LibERC1155TransferConstraints.TransferLimit",
            name: "transferLimit",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint32",
                name: "minimumLevel",
                type: "uint32",
              },
              {
                internalType: "bool",
                name: "isActive",
                type: "bool",
              },
            ],
            internalType:
              "struct LibERC1155TransferConstraints.MemberLevelDependency",
            name: "minimumMembershipLevel",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint32",
                name: "expireTime",
                type: "uint32",
              },
              {
                internalType: "bool",
                name: "isActive",
                type: "bool",
              },
            ],
            internalType: "struct LibERC1155TransferConstraints.Expireable",
            name: "expireable",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint24",
                name: "fee",
                type: "uint24",
              },
              {
                internalType: "bool",
                name: "isActive",
                type: "bool",
              },
            ],
            internalType: "struct LibERC1155TransferConstraints.RoyaltyFee",
            name: "royaltyFee",
            type: "tuple",
          },
        ],
        internalType: "struct LibERC1155TransferConstraints.Constraints",
        name: "_constraints",
        type: "tuple",
      },
    ],
    name: "ticketCreate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "_amount",
        type: "uint256[]",
      },
      {
        components: [
          {
            internalType: "string",
            name: "title",
            type: "string",
          },
          {
            internalType: "string",
            name: "description",
            type: "string",
          },
          {
            internalType: "string",
            name: "imageHash",
            type: "string",
          },
        ],
        internalType: "struct TicketCreate.TicketMeta[]",
        name: "_ticketMeta",
        type: "tuple[]",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "maxTransfers",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "isActive",
                type: "bool",
              },
            ],
            internalType: "struct LibERC1155TransferConstraints.TransferLimit",
            name: "transferLimit",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint32",
                name: "minimumLevel",
                type: "uint32",
              },
              {
                internalType: "bool",
                name: "isActive",
                type: "bool",
              },
            ],
            internalType:
              "struct LibERC1155TransferConstraints.MemberLevelDependency",
            name: "minimumMembershipLevel",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint32",
                name: "expireTime",
                type: "uint32",
              },
              {
                internalType: "bool",
                name: "isActive",
                type: "bool",
              },
            ],
            internalType: "struct LibERC1155TransferConstraints.Expireable",
            name: "expireable",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint24",
                name: "fee",
                type: "uint24",
              },
              {
                internalType: "bool",
                name: "isActive",
                type: "bool",
              },
            ],
            internalType: "struct LibERC1155TransferConstraints.RoyaltyFee",
            name: "royaltyFee",
            type: "tuple",
          },
        ],
        internalType: "struct LibERC1155TransferConstraints.Constraints[]",
        name: "_constraints",
        type: "tuple[]",
      },
    ],
    name: "ticketCreateBatch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "";

type TicketCreateConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TicketCreateConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TicketCreate__factory extends ContractFactory {
  constructor(...args: TicketCreateConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TicketCreate> {
    return super.deploy(overrides || {}) as Promise<TicketCreate>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TicketCreate {
    return super.attach(address) as TicketCreate;
  }
  override connect(signer: Signer): TicketCreate__factory {
    return super.connect(signer) as TicketCreate__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TicketCreateInterface {
    return new utils.Interface(_abi) as TicketCreateInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TicketCreate {
    return new Contract(address, _abi, signerOrProvider) as TicketCreate;
  }
}
