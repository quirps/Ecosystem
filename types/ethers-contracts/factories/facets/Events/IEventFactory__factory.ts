/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IEventFactory,
  IEventFactoryInterface,
} from "../../../facets/Events/IEventFactory";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_startTime",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "_endTime",
        type: "uint32",
      },
      {
        internalType: "uint256",
        name: "_minEntries",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_maxEntries",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_imageUri",
        type: "string",
      },
      {
        internalType: "uint256[]",
        name: "_ticketIds",
        type: "uint256[]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "minAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxAmount",
            type: "uint256",
          },
        ],
        internalType: "struct LibEventFactory.TicketDetail[]",
        name: "_ticketDetails",
        type: "tuple[]",
      },
    ],
    name: "createEvent",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "eventId",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "root",
        type: "bytes32",
      },
    ],
    name: "deactivateEvent",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "eventId",
        type: "uint256",
      },
      {
        internalType: "uint32",
        name: "addedTime",
        type: "uint32",
      },
    ],
    name: "extendEvent",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "eventId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "ticketIds",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    name: "redeemTickets",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "eventId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "ticketIds",
        type: "uint256[]",
      },
      {
        internalType: "address",
        name: "lowerBound",
        type: "address",
      },
      {
        internalType: "address",
        name: "upperBound",
        type: "address",
      },
      {
        internalType: "bytes32[]",
        name: "merkleProof",
        type: "bytes32[]",
      },
    ],
    name: "refundTicketsWithProof",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "eventId",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "imageUri",
        type: "string",
      },
    ],
    name: "setImageUri",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "eventId",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "merkleRoot",
        type: "bytes32",
      },
    ],
    name: "setMerkleRoot",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IEventFactory__factory {
  static readonly abi = _abi;
  static createInterface(): IEventFactoryInterface {
    return new utils.Interface(_abi) as IEventFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IEventFactory {
    return new Contract(address, _abi, signerOrProvider) as IEventFactory;
  }
}
