/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { Stake, StakeInterface } from "../../../facets/Stake/Stake";

const _abi = [
  {
    inputs: [],
    name: "MigrationAlreadyCompleted",
    type: "error",
  },
  {
    inputs: [],
    name: "MigrationAlreadyInitiated",
    type: "error",
  },
  {
    inputs: [],
    name: "MigrationNotInitiated",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "timestamp",
        type: "uint32",
      },
    ],
    name: "MemberBanned",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "memberAddress",
            type: "address",
          },
          {
            internalType: "uint32",
            name: "level",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "timestamp",
            type: "uint32",
          },
        ],
        indexed: false,
        internalType: "struct LibMemberLevel.Leaf",
        name: "leaf",
        type: "tuple",
      },
    ],
    name: "MemberLevelUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "newRoot",
        type: "bytes32",
      },
    ],
    name: "MerkleRootUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "cancellor",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "timeCancelled",
        type: "uint32",
      },
    ],
    name: "MigrationCancelled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "initiatior",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "timeInitiatied",
        type: "uint32",
      },
    ],
    name: "MigrationInitiated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldOwner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "uint16",
            name: "initialRate",
            type: "uint16",
          },
          {
            internalType: "uint16",
            name: "rateIncrease",
            type: "uint16",
          },
          {
            internalType: "uint16",
            name: "rateIncreaseStopDuration",
            type: "uint16",
          },
        ],
        indexed: false,
        internalType: "struct Stake.RewardRate[]",
        name: "_rewardRates",
        type: "tuple[]",
      },
    ],
    name: "RewardRatesChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "reward",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "stakeId",
        type: "uint256",
      },
    ],
    name: "RewardsRetrieved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "funder",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "StakeRewardAccountFunded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
    ],
    name: "TransferBatch",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "TransferSingle",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "user",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "amount",
        type: "uint256[]",
      },
      {
        internalType: "enum Stake.StakeTier[]",
        name: "tier",
        type: "uint8[]",
      },
      {
        internalType: "uint256[]",
        name: "stakeIds",
        type: "uint256[]",
      },
    ],
    name: "batchStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "fundStakeAccount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getGasStakeFee",
    outputs: [
      {
        internalType: "uint24",
        name: "feeScale_",
        type: "uint24",
      },
      {
        internalType: "uint24",
        name: "fee_",
        type: "uint24",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum Stake.StakeTier[]",
        name: "_stakeTier",
        type: "uint8[]",
      },
      {
        components: [
          {
            internalType: "uint16",
            name: "initialRate",
            type: "uint16",
          },
          {
            internalType: "uint16",
            name: "rateIncrease",
            type: "uint16",
          },
          {
            internalType: "uint16",
            name: "rateIncreaseStopDuration",
            type: "uint16",
          },
        ],
        internalType: "struct Stake.RewardRate[]",
        name: "_rewardRate",
        type: "tuple[]",
      },
    ],
    name: "setRewardRates",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "enum Stake.StakeTier",
        name: "tier",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "stakeId",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "staker",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "enum Stake.StakeTier",
        name: "tier",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "stakeId",
        type: "uint256",
      },
    ],
    name: "stakeContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "staker",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "enum Stake.StakeTier",
        name: "tier",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "stakeId",
        type: "uint256",
      },
    ],
    name: "stakeVirtual",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "stakeId",
        type: "uint256",
      },
    ],
    name: "unstake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "staker",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "stakeId",
        type: "uint256",
      },
    ],
    name: "unstakeContract",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "staker",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "stakeId",
        type: "uint256",
      },
    ],
    name: "unstakeVirtual",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "stakeId",
        type: "uint256",
      },
    ],
    name: "viewMinimumStakeDurationLeft",
    outputs: [
      {
        internalType: "uint32",
        name: "timeLeft_",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "stakeId",
        type: "uint256",
      },
    ],
    name: "viewReward",
    outputs: [
      {
        internalType: "uint256",
        name: "reward_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600e575f5ffd5b50611cbf8061001c5f395ff3fe608060405234801561000f575f5ffd5b50600436106100b1575f3560e01c80639e2c8a5b1161006e5780639e2c8a5b14610157578063b81e3c891461016a578063becf89a11461017d578063c255260414610190578063f02883c9146101a3578063f99b7d75146101b6575f5ffd5b80630bd65c0b146100b55780632090b0d3146100db5780632510427c146100f0578063677902f4146101035780636972f8db146101165780639a7614f11461012f575b5f5ffd5b6100c86100c3366004611324565b6101c9565b6040519081526020015b60405180910390f35b6100ee6100e9366004611362565b610364565b005b6100ee6100fe366004611324565b6104cf565b6100ee610111366004611362565b610618565b60408051620f4240815262f424006020820152016100d2565b61014261013d3660046113a3565b610758565b60405163ffffffff90911681526020016100d2565b6100ee6101653660046113ba565b6107e6565b6100ee610178366004611543565b6107fd565b6100ee61018b366004611677565b610879565b6100c861019e3660046113a3565b610a90565b6100ee6101b13660046113a3565b610af9565b6100ee6101c4366004611786565b610b7c565b6001600160a01b038381165f90815260208181526040808320858452909152812080549192909190811690839061020d90600160a81b900463ffffffff16426117cd565b835490915061022590600160a01b900460ff16610b8f565b63ffffffff168163ffffffff1610156102595760405162461bcd60e51b8152600401610250906117ef565b60405180910390fd5b85836001015f82825461026c919061184c565b909155505082545f90610298908890600160a01b810460ff1690600160a81b900463ffffffff16610c19565b90505f6102a5888361185f565b90506102d6732d08bdf3c61834f76decaf6e85ffaecfef02e6058a5f8560405180602001604052805f815250610d2a565b610305732d08bdf3c61834f76decaf6e85ffaecfef02e605855f8b60405180602001604052805f815250610d2a565b604080516001600160a01b038b168152602081018a9052908101839052606081018890527f1b4835b6652e6ff440df539e52011c511ae737f525419fe13dbfb69557e0449f9060800160405180910390a19450505050505b9392505050565b5f5f5f61036f610efe565b6001600160a01b0316815260208082019290925260409081015f90812085825290925290208054909150600160a81b900463ffffffff16156103c35760405162461bcd60e51b815260040161025090611872565b6040518060a001604052806103d6610efe565b6001600160a01b031681526020018460038111156103f6576103f66118c8565b815263ffffffff4216602080830191909152600160408084019190915260609092018790526001600160a01b038089165f9081528083528381208782528352929092208351815493166001600160a01b0319841681178255918401519092909183916001600160a81b03191617600160a01b83600381111561047a5761047a6118c8565b02179055506040820151815460608401511515600160c81b0260ff60c81b1963ffffffff909316600160a81b029290921664ffffffffff60a81b19909116171781556080909101516001909101555050505050565b6001600160a01b0383165f9081526020818152604080832084845290915281206001810180549192859261050490849061184c565b909155505080545f9061052490600160a81b900463ffffffff16426117cd565b825490915061053c90600160a01b900460ff16610b8f565b63ffffffff168163ffffffff1610156105675760405162461bcd60e51b8152600401610250906117ef565b81545f9061058e908690600160a01b810460ff1690600160a81b900463ffffffff16610c19565b90506105bf732d08bdf3c61834f76decaf6e85ffaecfef02e605875f8460405180602001604052805f815250610d2a565b604080516001600160a01b038816815260208101879052908101829052606081018590527f1b4835b6652e6ff440df539e52011c511ae737f525419fe13dbfb69557e0449f9060800160405180910390a1505050505050565b61064784732d08bdf3c61834f76decaf6e85ffaecfef02e6055f8660405180602001604052805f815250610d2a565b5f5f5f610652610efe565b6001600160a01b0316815260208082019290925260409081015f90812085825290925290208054909150600160a81b900463ffffffff16156106a65760405162461bcd60e51b815260040161025090611872565b6040518060a001604052806106b9610efe565b6001600160a01b031681526020018460038111156106d9576106d96118c8565b815263ffffffff42166020808301919091525f604080840182905260609093018890526001600160a01b03808a16825281835283822087835283529290208351815493166001600160a01b0319841681178255918401519092909183916001600160a81b03191617600160a01b83600381111561047a5761047a6118c8565b5f5f5f5f610764610efe565b6001600160a01b0316815260208082019290925260409081015f90812086825290925281208054909250600160a81b810463ffffffff1691906107b090600160a01b900460ff16610b8f565b90506107bc81836118dc565b63ffffffff164211156107da576107d382426117cd565b93506107de565b5f93505b505050919050565b6107f86107f1610efe565b83836101c9565b505050565b5f5b6001855161080d919061184c565b8110156108725761086a848281518110610829576108296118f8565b6020026020010151848381518110610843576108436118f8565b602002602001015184848151811061085d5761085d6118f8565b6020026020010151610b7c565b6001016107ff565b5050505050565b610881610f0c565b80518251146108e15760405162461bcd60e51b815260206004820152602660248201527f496e70757420706172616d6574657273206d75737420686176652073616d65206044820152650d8cadccee8d60d31b6064820152608401610250565b5f5b600182516108f1919061184c565b8160ff161015610a5457818160ff1681518110610910576109106118f8565b60200260200101516040015161ffff1661ffff8016101561098b5760405162461bcd60e51b815260206004820152602f60248201527f52617465496e63726561736553746f704475726174696f6e206d75737420626560448201526e1030903ab4b73a189b103a3cb8329760891b6064820152608401610250565b818160ff16815181106109a0576109a06118f8565b602002602001015160015f858460ff16815181106109c0576109c06118f8565b602002602001015160038111156109d9576109d96118c8565b60038111156109ea576109ea6118c8565b815260208082019290925260409081015f208351815493850151949092015161ffff9081166401000000000265ffff0000000019958216620100000263ffffffff199095169190931617929092179290921691909117905580610a4c8161190c565b9150506108e3565b507f502e2557babc41671f9b2f46ef02dbc49733f00beb6e6ccc5d52ca5bf89737cc81604051610a84919061192a565b60405180910390a15050565b5f5f5f5f610a9c610efe565b6001600160a01b0316815260208082019290925260409081015f90812086825290925290206001810154815491925090600160a01b810460ff1690600160a81b900463ffffffff16610aef838383610c19565b9695505050505050565b610b2f610b04610efe565b732d08bdf3c61834f76decaf6e85ffaecfef02e6055f8460405180602001604052805f815250610d2a565b7f63942f00aa3067c74d1ae2965839be9e4a7d64c045dea45ca8e7f2a59c4e4b86610b58610efe565b604080516001600160a01b039092168252602082018490520160405180910390a150565b6107f8610b87610efe565b848484610618565b5f6001826003811115610ba457610ba46118c8565b03610bb3575062093a80919050565b6002826003811115610bc757610bc76118c8565b03610bd6575062127500919050565b6003826003811115610bea57610bea6118c8565b03610bf957506224ea00919050565b5f826003811115610c0c57610c0c6118c8565b03610c1457505f5b919050565b5f80610c2583426117cd565b90505f846003811115610c3a57610c3a6118c8565b03610ca857610ca1858260015f805b6003811115610c5a57610c5a6118c8565b815260208082019290925260409081015f208151606081018352905461ffff8082168352620100008204811694830194909452640100000000900490921690820152610f7d565b9150610d22565b6001846003811115610cbc57610cbc6118c8565b03610ccf57610ca1858260015f81610c49565b6002846003811115610ce357610ce36118c8565b03610cf757610ca1858260015f6002610c49565b6003846003811115610d0b57610d0b6118c8565b03610d2257610d1f858260015f6003610c49565b91505b509392505050565b6001600160a01b038416610d8e5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610250565b7f6469616d6f6e642e73746f726167652e657263313135350000000000000000005f610db8610efe565b90505f610dc486611022565b90505f610dd086611022565b5f888152602086815260408083206001600160a01b038e16845290915290205490915086811015610e565760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b6064820152608401610250565b5f888152602086815260408083206001600160a01b038e8116855292528083208a85039055908b16825281208054899290610e9290849061185f565b909155505060408051898152602081018990526001600160a01b03808c16928d821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610ef2848b8b8b8b8b61106b565b50505050505050505050565b5f610f07611220565b905090565b610f14611273565b6001600160a01b0316610f25610efe565b6001600160a01b031614610f7b5760405162461bcd60e51b815260206004820152601b60248201527f4d757374206265207468652045636f73797374656d206f776e657200000000006044820152606401610250565b565b5f816040015161ffff168363ffffffff161061100557610fa68483846040015161ffff166112a5565b610fb0908261185f565b90505f826040015161ffff1684610fc791906117cd565b9050610fdf835f0151846020015185604001516112f9565b610fed9061ffff1682611994565b610ffd9063ffffffff168361185f565b91505061035d565b6110108483856112a5565b61101a908261185f565b949350505050565b6040805160018082528183019092526060915f91906020808301908036833701905050905082815f8151811061105a5761105a6118f8565b602090810291909101015292915050565b6001600160a01b0384163b15611218576001600160a01b03841630146112185760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906110bf90899089908890889088906004016119e8565b6020604051808303815f875af19250505080156110f9575060408051601f3d908101601f191682019092526110f691810190611a2c565b60015b6111a557611105611a53565b806308c379a00361113e5750611119611a6b565b806111245750611140565b8060405162461bcd60e51b81526004016102509190611ae7565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610250565b6001600160e01b0319811663f23a6e6160e01b146112165760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610250565b505b505050505050565b5f6014361080159061125b57507f413a4c31c13c7c3de0c7da37be5d779b152baf3f21a1cb760fda41eb8ca97776546001600160a01b031633145b1561126d575060131936013560601c90565b50335b90565b5f610f077fd00049dc7109015045860694acecd3dc33338404aaf6e55a1c98a2bf41477b85546001600160a01b031690565b81515f906112b890839061ffff16611994565b60026112c48185611c0b565b856020015161ffff166112d79190611994565b6112e19190611c1f565b6112eb91906118dc565b63ffffffff16949350505050565b5f6113048284611c52565b61101a9085611c6f565b80356001600160a01b0381168114610c14575f5ffd5b5f5f5f60608486031215611336575f5ffd5b61133f8461130e565b95602085013595506040909401359392505050565b803560048110610c14575f5ffd5b5f5f5f5f60808587031215611375575f5ffd5b61137e8561130e565b93506020850135925061139360408601611354565b9396929550929360600135925050565b5f602082840312156113b3575f5ffd5b5035919050565b5f5f604083850312156113cb575f5ffd5b50508035926020909101359150565b634e487b7160e01b5f52604160045260245ffd5b6060810181811067ffffffffffffffff8211171561140e5761140e6113da565b60405250565b601f8201601f1916810167ffffffffffffffff8111828210171561143a5761143a6113da565b6040525050565b5f67ffffffffffffffff82111561145a5761145a6113da565b5060051b60200190565b5f82601f830112611473575f5ffd5b813561147e81611441565b60405161148b8282611414565b80915082815260208101915060208360051b8601019250858311156114ae575f5ffd5b602085015b838110156114cb5780358352602092830192016114b3565b5095945050505050565b5f82601f8301126114e4575f5ffd5b81356114ef81611441565b6040516114fc8282611414565b80915082815260208101915060208360051b86010192508583111561151f575f5ffd5b602085015b838110156114cb5761153581611354565b835260209283019201611524565b5f5f5f5f60808587031215611556575f5ffd5b843567ffffffffffffffff81111561156c575f5ffd5b8501601f8101871361157c575f5ffd5b803561158781611441565b6040516115948282611414565b80915082815260208101915060208360051b8501019250898311156115b7575f5ffd5b6020840193505b828410156115e0576115cf8461130e565b8252602093840193909101906115be565b9650505050602085013567ffffffffffffffff8111156115fe575f5ffd5b61160a87828801611464565b935050604085013567ffffffffffffffff811115611626575f5ffd5b611632878288016114d5565b925050606085013567ffffffffffffffff81111561164e575f5ffd5b61165a87828801611464565b91505092959194509250565b803561ffff81168114610c14575f5ffd5b5f5f60408385031215611688575f5ffd5b823567ffffffffffffffff81111561169e575f5ffd5b6116aa858286016114d5565b925050602083013567ffffffffffffffff8111156116c6575f5ffd5b8301601f810185136116d6575f5ffd5b80356116e181611441565b6040516116ee8282611414565b828152602060609093028401830192810191508783111561170d575f5ffd5b6020840193505b82841015611778576060848903121561172b575f5ffd5b604051611737816113ee565b61174085611666565b815261174e60208601611666565b602082015261175f60408601611666565b6040820152825260609390930192602090910190611714565b809450505050509250929050565b5f5f5f60608486031215611798575f5ffd5b833592506117a860208501611354565b929592945050506040919091013590565b634e487b7160e01b5f52601160045260245ffd5b63ffffffff82811682821603908111156117e9576117e96117b9565b92915050565b6020808252603d908201527f43616e277420756e7374616b65207265776172647320756e74696c207468652060408201527f6d696e696e6d756d206475726174696f6e20686173207061737365642e000000606082015260800190565b818103818111156117e9576117e96117b9565b808201808211156117e9576117e96117b9565b60208082526036908201527f5374616b65496420616c7265616479206578697374732c20706c6561736520636040820152751c99585d194818481d5b9a5c5d59481cdd185ad9525960521b606082015260800190565b634e487b7160e01b5f52602160045260245ffd5b63ffffffff81811683821601908111156117e9576117e96117b9565b634e487b7160e01b5f52603260045260245ffd5b5f60ff821660ff8103611921576119216117b9565b60010192915050565b602080825282518282018190525f918401906040840190835b8181101561198957835161ffff815116845261ffff602082015116602085015261ffff604082015116604085015250606083019250602084019350600181019050611943565b509095945050505050565b63ffffffff81811683821602908116908181146119b3576119b36117b9565b5092915050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190525f90611a21908301846119ba565b979650505050505050565b5f60208284031215611a3c575f5ffd5b81516001600160e01b03198116811461035d575f5ffd5b5f60033d11156112705760045f5f3e505f5160e01c90565b5f60443d1015611a785790565b6040513d600319016004823e80513d602482011167ffffffffffffffff82111715611aa257505090565b808201805167ffffffffffffffff811115611abe575050505090565b3d8401600319018282016020011115611ad8575050505090565b610d2260208285010185611414565b602081525f61035d60208301846119ba565b6001815b6001841115611b3457808504811115611b1857611b186117b9565b6001841615611b2657908102905b60019390931c928002611afd565b935093915050565b5f82611b4a575060016117e9565b81611b5657505f6117e9565b8160018114611b6c5760028114611b7657611ba7565b60019150506117e9565b60ff841115611b8757611b876117b9565b6001841b915063ffffffff821115611ba157611ba16117b9565b506117e9565b5060208310610133831016604e8410600b8410161715611bde575081810a63ffffffff811115611bd957611bd96117b9565b6117e9565b611bed63ffffffff8484611af9565b8063ffffffff04821115611c0357611c036117b9565b029392505050565b5f61035d60ff841663ffffffff8416611b3c565b5f63ffffffff831680611c4057634e487b7160e01b5f52601260045260245ffd5b8063ffffffff84160491505092915050565b61ffff81811683821602908116908181146119b3576119b36117b9565b61ffff81811683821601908111156117e9576117e96117b956fea26469706673582212208b3ca8d2a55ffc51f25492b73e1160550072cdf0879fb29b77e522600d9fcce664736f6c634300081c0033";

type StakeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Stake__factory extends ContractFactory {
  constructor(...args: StakeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Stake> {
    return super.deploy(overrides || {}) as Promise<Stake>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Stake {
    return super.attach(address) as Stake;
  }
  override connect(signer: Signer): Stake__factory {
    return super.connect(signer) as Stake__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakeInterface {
    return new utils.Interface(_abi) as StakeInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Stake {
    return new Contract(address, _abi, signerOrProvider) as Stake;
  }
}
