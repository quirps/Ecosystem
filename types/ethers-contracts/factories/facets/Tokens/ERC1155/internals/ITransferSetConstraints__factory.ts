/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  ITransferSetConstraints,
  ITransferSetConstraintsInterface,
} from "../../../../../facets/Tokens/ERC1155/internals/ITransferSetConstraints";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "setExpireable",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060dc8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80636dca9aab14602d575b600080fd5b60436004803603810190603f9190607e565b6045565b005b50565b600080fd5b6000819050919050565b605e81604d565b8114606857600080fd5b50565b6000813590506078816057565b92915050565b60006020828403121560915760906048565b5b6000609d84828501606b565b9150509291505056fea26469706673582212205a7ef756fac04975e682a986f71505da02f0f81ed1f888a9d8437027ee6968eb64736f6c63430008090033";

type ITransferSetConstraintsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ITransferSetConstraintsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ITransferSetConstraints__factory extends ContractFactory {
  constructor(...args: ITransferSetConstraintsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ITransferSetConstraints> {
    return super.deploy(overrides || {}) as Promise<ITransferSetConstraints>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ITransferSetConstraints {
    return super.attach(address) as ITransferSetConstraints;
  }
  override connect(signer: Signer): ITransferSetConstraints__factory {
    return super.connect(signer) as ITransferSetConstraints__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ITransferSetConstraintsInterface {
    return new utils.Interface(_abi) as ITransferSetConstraintsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ITransferSetConstraints {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ITransferSetConstraints;
  }
}
