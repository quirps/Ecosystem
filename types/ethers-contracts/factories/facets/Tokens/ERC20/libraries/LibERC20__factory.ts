/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  LibERC20,
  LibERC20Interface,
} from "../../../../../facets/Tokens/ERC20/libraries/LibERC20";

const _abi = [
  {
    inputs: [],
    name: "PRIMARY_CURRENCY_ID",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60846032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106032575f3560e01c8063b7dfc1ca146036575b5f5ffd5b603c5f81565b60405190815260200160405180910390f3fea2646970667358221220da375321accac7c623ff664461c9f0ca5802ecc7a5ec0bb6b45ac312295033f964736f6c634300081c0033";

type LibERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LibERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LibERC20__factory extends ContractFactory {
  constructor(...args: LibERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<LibERC20> {
    return super.deploy(overrides || {}) as Promise<LibERC20>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): LibERC20 {
    return super.attach(address) as LibERC20;
  }
  override connect(signer: Signer): LibERC20__factory {
    return super.connect(signer) as LibERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LibERC20Interface {
    return new utils.Interface(_abi) as LibERC20Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LibERC20 {
    return new Contract(address, _abi, signerOrProvider) as LibERC20;
  }
}
