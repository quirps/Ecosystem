/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IMembers,
  IMembersInterface,
} from "../../../facets/MemberRankings/IMembers";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "addBountyBalance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getRank",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "uint64",
        name: "depth",
        type: "uint64",
      },
    ],
    name: "getUserRankHistory",
    outputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "timestamp",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "rank",
            type: "uint32",
          },
        ],
        internalType: "struct LibMembers.MemberRank[]",
        name: "rank_",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "removeBountyBalance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "memberAddress",
            type: "address",
          },
          {
            components: [
              {
                internalType: "uint32",
                name: "timestamp",
                type: "uint32",
              },
              {
                internalType: "uint32",
                name: "rank",
                type: "uint32",
              },
            ],
            internalType: "struct LibMembers.MemberRank",
            name: "memberRank",
            type: "tuple",
          },
        ],
        internalType: "struct LibMembers.Leaf[]",
        name: "leaves",
        type: "tuple[]",
      },
    ],
    name: "setMembersRankPermissioned",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "address",
            name: "memberAddress",
            type: "address",
          },
          {
            components: [
              {
                internalType: "uint32",
                name: "timestamp",
                type: "uint32",
              },
              {
                internalType: "uint32",
                name: "rank",
                type: "uint32",
              },
            ],
            internalType: "struct LibMembers.MemberRank",
            name: "memberRank",
            type: "tuple",
          },
        ],
        internalType: "struct LibMembers.Leaf",
        name: "leaves",
        type: "tuple",
      },
    ],
    name: "setMembersRanks",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IMembers__factory {
  static readonly abi = _abi;
  static createInterface(): IMembersInterface {
    return new utils.Interface(_abi) as IMembersInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IMembers {
    return new Contract(address, _abi, signerOrProvider) as IMembers;
  }
}
