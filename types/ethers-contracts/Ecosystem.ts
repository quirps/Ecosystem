/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IDiamondCut {
  export type FacetCutStruct = {
    facetAddress: PromiseOrValue<string>;
    action: PromiseOrValue<BigNumberish>;
    functionSelectors: PromiseOrValue<BytesLike>[];
  };

  export type FacetCutStructOutput = [string, number, string[]] & {
    facetAddress: string;
    action: number;
    functionSelectors: string[];
  };
}

export declare namespace IDiamondLoupe {
  export type FacetStruct = {
    facetAddress: PromiseOrValue<string>;
    functionSelectors: PromiseOrValue<BytesLike>[];
  };

  export type FacetStructOutput = [string, string[]] & {
    facetAddress: string;
    functionSelectors: string[];
  };
}

export declare namespace LibMemberLevel {
  export type LeafStruct = {
    memberAddress: PromiseOrValue<string>;
    level: PromiseOrValue<BigNumberish>;
    timestamp: PromiseOrValue<BigNumberish>;
  };

  export type LeafStructOutput = [string, number, number] & {
    memberAddress: string;
    level: number;
    timestamp: number;
  };
}

export declare namespace LibMemberRegistry {
  export type LeafStruct = {
    username: PromiseOrValue<string>;
    userAddress: PromiseOrValue<string>;
  };

  export type LeafStructOutput = [string, string] & {
    username: string;
    userAddress: string;
  };
}

export declare namespace Stake {
  export type RewardRateStruct = {
    initialRate: PromiseOrValue<BigNumberish>;
    rateIncrease: PromiseOrValue<BigNumberish>;
    rateIncreaseStopDuration: PromiseOrValue<BigNumberish>;
  };

  export type RewardRateStructOutput = [number, number, number] & {
    initialRate: number;
    rateIncrease: number;
    rateIncreaseStopDuration: number;
  };
}

export declare namespace TicketCreate {
  export type TicketMetaStruct = {
    title: PromiseOrValue<string>;
    description: PromiseOrValue<string>;
  };

  export type TicketMetaStructOutput = [string, string] & {
    title: string;
    description: string;
  };
}

export declare namespace LibERC1155TransferConstraints {
  export type TransferLimitStruct = {
    maxTransfers: PromiseOrValue<BigNumberish>;
    isActive: PromiseOrValue<boolean>;
  };

  export type TransferLimitStructOutput = [BigNumber, boolean] & {
    maxTransfers: BigNumber;
    isActive: boolean;
  };

  export type MemberLevelDependencyStruct = {
    minimumLevel: PromiseOrValue<BigNumberish>;
    isActive: PromiseOrValue<boolean>;
  };

  export type MemberLevelDependencyStructOutput = [number, boolean] & {
    minimumLevel: number;
    isActive: boolean;
  };

  export type ExpireableStruct = {
    expireTime: PromiseOrValue<BigNumberish>;
    isActive: PromiseOrValue<boolean>;
  };

  export type ExpireableStructOutput = [number, boolean] & {
    expireTime: number;
    isActive: boolean;
  };

  export type ConstraintsStruct = {
    transferLimit: LibERC1155TransferConstraints.TransferLimitStruct;
    minimumMembershipLevel: LibERC1155TransferConstraints.MemberLevelDependencyStruct;
    expireable: LibERC1155TransferConstraints.ExpireableStruct;
  };

  export type ConstraintsStructOutput = [
    LibERC1155TransferConstraints.TransferLimitStructOutput,
    LibERC1155TransferConstraints.MemberLevelDependencyStructOutput,
    LibERC1155TransferConstraints.ExpireableStructOutput
  ] & {
    transferLimit: LibERC1155TransferConstraints.TransferLimitStructOutput;
    minimumMembershipLevel: LibERC1155TransferConstraints.MemberLevelDependencyStructOutput;
    expireable: LibERC1155TransferConstraints.ExpireableStructOutput;
  };
}

export interface EcosystemInterface extends utils.Interface {
  functions: {
    "cancelMigration()": FunctionFragment;
    "diamondCut((address,uint8,bytes4[])[],address,bytes)": FunctionFragment;
    "initiateMigration()": FunctionFragment;
    "facetAddress(bytes4)": FunctionFragment;
    "facetAddresses()": FunctionFragment;
    "facetFunctionSelectors(address)": FunctionFragment;
    "facets()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "royaltyInfo(uint256,uint256)": FunctionFragment;
    "createEvent(uint32,uint32,uint256,uint256,string,uint256[],uint256)": FunctionFragment;
    "deactivateEvent(uint256,bytes32)": FunctionFragment;
    "extendEvent(uint256,uint32)": FunctionFragment;
    "redeemTickets(uint256,uint256[],uint256[])": FunctionFragment;
    "refundTicketsWithProof(uint256,uint256[],address,address,bytes32[])": FunctionFragment;
    "setImageUri(uint256,string)": FunctionFragment;
    "setMerkleRoot(uint256,bytes32)": FunctionFragment;
    "banMember(address)": FunctionFragment;
    "batchSetLevels((address,uint32,uint32)[])": FunctionFragment;
    "getMemberLevel(address)": FunctionFragment;
    "getMemberLevelStruct(address)": FunctionFragment;
    "verifyAndSetLevel((address,uint32,uint32),bytes32[])": FunctionFragment;
    "cancelVerify(string)": FunctionFragment;
    "finalizeRecovery(string)": FunctionFragment;
    "setUsernameAddressPair(string)": FunctionFragment;
    "setUsernameOwner(string[],address[])": FunctionFragment;
    "setUsernamePair(string)": FunctionFragment;
    "usernameRecovery(string)": FunctionFragment;
    "verificationTime()": FunctionFragment;
    "verifyAndUsername((string,address),bytes32[])": FunctionFragment;
    "getModeratorRank(address)": FunctionFragment;
    "setModeratorRank(address,uint8)": FunctionFragment;
    "setModeratorRanks(address[],uint8[])": FunctionFragment;
    "ecosystemOwner()": FunctionFragment;
    "isEcosystemOwnerVerify(address)": FunctionFragment;
    "setEcosystemOwner(address)": FunctionFragment;
    "batchStake(address[],uint256[],uint8[],uint256[])": FunctionFragment;
    "fundStakeAccount(uint256)": FunctionFragment;
    "getGasStakeFee()": FunctionFragment;
    "setRewardRates(uint8[],(uint16,uint16,uint16)[])": FunctionFragment;
    "stake(uint256,uint8,uint256)": FunctionFragment;
    "stakeContract(address,uint256,uint8,uint256)": FunctionFragment;
    "stakeVirtual(address,uint256,uint8,uint256)": FunctionFragment;
    "unstake(uint256,uint256)": FunctionFragment;
    "unstakeContract(address,uint256,uint256)": FunctionFragment;
    "unstakeVirtual(address,uint256,uint256)": FunctionFragment;
    "viewMinimumStakeDurationLeft(uint256)": FunctionFragment;
    "viewReward(uint256)": FunctionFragment;
    "expireable(uint256)": FunctionFragment;
    "ticketCreate(uint256,(string,string),((uint256,bool),(uint32,bool),(uint32,bool)))": FunctionFragment;
    "ticketCreateBatch(uint256[],(string,string)[],((uint256,bool),(uint32,bool),(uint32,bool))[])": FunctionFragment;
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "burn(address,uint256,uint256)": FunctionFragment;
    "burnBatch(address,uint256[],uint256[])": FunctionFragment;
    "mint(address,uint256,uint256,bytes)": FunctionFragment;
    "mintBatch(address,uint256[],uint256[],bytes)": FunctionFragment;
    "setUri(string)": FunctionFragment;
    "uri(uint256)": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "name()": FunctionFragment;
    "setCurrencyNames(string,string)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cancelMigration"
      | "diamondCut"
      | "initiateMigration"
      | "facetAddress"
      | "facetAddresses"
      | "facetFunctionSelectors"
      | "facets"
      | "supportsInterface"
      | "royaltyInfo"
      | "createEvent"
      | "deactivateEvent"
      | "extendEvent"
      | "redeemTickets"
      | "refundTicketsWithProof"
      | "setImageUri"
      | "setMerkleRoot"
      | "banMember"
      | "batchSetLevels"
      | "getMemberLevel"
      | "getMemberLevelStruct"
      | "verifyAndSetLevel"
      | "cancelVerify"
      | "finalizeRecovery"
      | "setUsernameAddressPair"
      | "setUsernameOwner"
      | "setUsernamePair"
      | "usernameRecovery"
      | "verificationTime"
      | "verifyAndUsername"
      | "getModeratorRank"
      | "setModeratorRank"
      | "setModeratorRanks"
      | "ecosystemOwner"
      | "isEcosystemOwnerVerify"
      | "setEcosystemOwner"
      | "batchStake"
      | "fundStakeAccount"
      | "getGasStakeFee"
      | "setRewardRates"
      | "stake"
      | "stakeContract"
      | "stakeVirtual"
      | "unstake"
      | "unstakeContract"
      | "unstakeVirtual"
      | "viewMinimumStakeDurationLeft"
      | "viewReward"
      | "expireable"
      | "ticketCreate"
      | "ticketCreateBatch"
      | "balanceOf(address,uint256)"
      | "balanceOf(address)"
      | "balanceOfBatch"
      | "burn"
      | "burnBatch"
      | "mint"
      | "mintBatch"
      | "setUri"
      | "uri"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "isApprovedForAll"
      | "safeBatchTransferFrom"
      | "safeTransferFrom"
      | "setApprovalForAll"
      | "allowance"
      | "approve"
      | "decimals"
      | "name"
      | "setCurrencyNames"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancelMigration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "diamondCut",
    values: [
      IDiamondCut.FacetCutStruct[],
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateMigration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddress",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetFunctionSelectors",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "facets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyInfo",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createEvent",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateEvent",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "extendEvent",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemTickets",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "refundTicketsWithProof",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setImageUri",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMerkleRoot",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "banMember",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "batchSetLevels",
    values: [LibMemberLevel.LeafStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getMemberLevel",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMemberLevelStruct",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyAndSetLevel",
    values: [LibMemberLevel.LeafStruct, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelVerify",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeRecovery",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUsernameAddressPair",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUsernameOwner",
    values: [PromiseOrValue<string>[], PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setUsernamePair",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "usernameRecovery",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "verificationTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifyAndUsername",
    values: [LibMemberRegistry.LeafStruct, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getModeratorRank",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setModeratorRank",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setModeratorRanks",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "ecosystemOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isEcosystemOwnerVerify",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setEcosystemOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "batchStake",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fundStakeAccount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGasStakeFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardRates",
    values: [PromiseOrValue<BigNumberish>[], Stake.RewardRateStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeContract",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeVirtual",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeContract",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeVirtual",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "viewMinimumStakeDurationLeft",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "viewReward",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "expireable",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "ticketCreate",
    values: [
      PromiseOrValue<BigNumberish>,
      TicketCreate.TicketMetaStruct,
      LibERC1155TransferConstraints.ConstraintsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ticketCreateBatch",
    values: [
      PromiseOrValue<BigNumberish>[],
      TicketCreate.TicketMetaStruct[],
      LibERC1155TransferConstraints.ConstraintsStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "burnBatch",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintBatch",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setUri",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "uri",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setCurrencyNames",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelMigration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "diamondCut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initiateMigration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetFunctionSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "facets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extendEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refundTicketsWithProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setImageUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "banMember", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchSetLevels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMemberLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMemberLevelStruct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyAndSetLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelVerify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeRecovery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUsernameAddressPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUsernameOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUsernamePair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usernameRecovery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verificationTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyAndUsername",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getModeratorRank",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setModeratorRank",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setModeratorRanks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ecosystemOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isEcosystemOwnerVerify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEcosystemOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batchStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundStakeAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGasStakeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeVirtual",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unstakeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unstakeVirtual",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewMinimumStakeDurationLeft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "viewReward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "expireable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ticketCreate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ticketCreateBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOf(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOf(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnBatch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintBatch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUri", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCurrencyNames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;

  events: {
    "DiamondCut(tuple[],address,bytes)": EventFragment;
    "DiamondCut(tuple[],address,bytes)": EventFragment;
    "MigrationCancelled(address,uint32)": EventFragment;
    "MigrationCancelled(address,uint32)": EventFragment;
    "MigrationCancelled(address,uint32)": EventFragment;
    "MigrationCancelled(address,uint32)": EventFragment;
    "MigrationCancelled(address,uint32)": EventFragment;
    "MigrationCancelled(address,uint32)": EventFragment;
    "MigrationCancelled(address,uint32)": EventFragment;
    "MigrationCancelled(address,uint32)": EventFragment;
    "MigrationCancelled(address,uint32)": EventFragment;
    "MigrationCancelled(address,uint32)": EventFragment;
    "MigrationInitiated(address,uint32)": EventFragment;
    "MigrationInitiated(address,uint32)": EventFragment;
    "MigrationInitiated(address,uint32)": EventFragment;
    "MigrationInitiated(address,uint32)": EventFragment;
    "MigrationInitiated(address,uint32)": EventFragment;
    "MigrationInitiated(address,uint32)": EventFragment;
    "MigrationInitiated(address,uint32)": EventFragment;
    "MigrationInitiated(address,uint32)": EventFragment;
    "MigrationInitiated(address,uint32)": EventFragment;
    "MigrationInitiated(address,uint32)": EventFragment;
    "RoyaltyFeeAccessed(address,uint256,uint256,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "EventActivated(uint256)": EventFragment;
    "EventDeactivated(uint256)": EventFragment;
    "EventDetails(uint256,uint32,uint32,uint256,uint256,string,uint256,uint8)": EventFragment;
    "EventExtended(uint256,uint32)": EventFragment;
    "ImageUriUpdated(uint256,string)": EventFragment;
    "RefundsEnabled(uint256,bytes32)": EventFragment;
    "TicketDetails(uint256,uint256[])": EventFragment;
    "TicketRedeemed(uint256,uint256[],uint256[])": EventFragment;
    "TicketRefunded(uint256,uint256,uint256)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "MemberBanned(address,uint32)": EventFragment;
    "MemberBanned(address,uint32)": EventFragment;
    "MemberBanned(address,uint32)": EventFragment;
    "MemberLevelUpdated(tuple)": EventFragment;
    "MemberLevelUpdated(tuple)": EventFragment;
    "MemberLevelUpdated(tuple)": EventFragment;
    "MerkleRootUpdated(bytes32)": EventFragment;
    "MerkleRootUpdated(bytes32)": EventFragment;
    "MerkleRootUpdated(bytes32)": EventFragment;
    "RecoveryAction(string,address,uint8)": EventFragment;
    "UserRegistered(string,address)": EventFragment;
    "UsersRegistered(string[],address[])": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RewardRatesChanged(tuple[])": EventFragment;
    "RewardsRetrieved(address,uint256,uint256,uint256)": EventFragment;
    "StakeRewardAccountFunded(address,uint256)": EventFragment;
    "TicketsCreated(uint256,uint256,tuple)": EventFragment;
    "URI(string,uint256)": EventFragment;
    "URIChanged(string)": EventFragment;
    "CurrencyNameChanged(string)": EventFragment;
    "CurrencySymbolChanged(string)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "DiamondCut(tuple[],address,bytes)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DiamondCut(tuple[],address,bytes)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MigrationCancelled(address,uint32)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MigrationCancelled(address,uint32)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MigrationCancelled(address,uint32)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MigrationCancelled(address,uint32)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MigrationCancelled(address,uint32)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MigrationCancelled(address,uint32)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MigrationCancelled(address,uint32)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MigrationCancelled(address,uint32)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MigrationCancelled(address,uint32)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MigrationCancelled(address,uint32)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MigrationInitiated(address,uint32)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MigrationInitiated(address,uint32)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MigrationInitiated(address,uint32)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MigrationInitiated(address,uint32)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MigrationInitiated(address,uint32)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MigrationInitiated(address,uint32)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MigrationInitiated(address,uint32)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MigrationInitiated(address,uint32)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MigrationInitiated(address,uint32)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MigrationInitiated(address,uint32)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoyaltyFeeAccessed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ApprovalForAll(address,address,bool)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ApprovalForAll(address,address,bool)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ApprovalForAll(address,address,bool)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ApprovalForAll(address,address,bool)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventDeactivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventDetails"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventExtended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ImageUriUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RefundsEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TicketDetails"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TicketRedeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TicketRefunded"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TransferBatch(address,address,address,uint256[],uint256[])"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TransferBatch(address,address,address,uint256[],uint256[])"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TransferBatch(address,address,address,uint256[],uint256[])"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TransferBatch(address,address,address,uint256[],uint256[])"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TransferBatch(address,address,address,uint256[],uint256[])"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TransferBatch(address,address,address,uint256[],uint256[])"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TransferSingle(address,address,address,uint256,uint256)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TransferSingle(address,address,address,uint256,uint256)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TransferSingle(address,address,address,uint256,uint256)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TransferSingle(address,address,address,uint256,uint256)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TransferSingle(address,address,address,uint256,uint256)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TransferSingle(address,address,address,uint256,uint256)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MemberBanned(address,uint32)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MemberBanned(address,uint32)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MemberBanned(address,uint32)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MemberLevelUpdated(tuple)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MemberLevelUpdated(tuple)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MemberLevelUpdated(tuple)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MerkleRootUpdated(bytes32)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MerkleRootUpdated(bytes32)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MerkleRootUpdated(bytes32)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoveryAction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UsersRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardRatesChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsRetrieved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeRewardAccountFunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TicketsCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URIChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CurrencyNameChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CurrencySymbolChanged"): EventFragment;
}

export interface DiamondCut_tuple_array_address_bytes_EventObject {
  _diamondCut: IDiamondCut.FacetCutStructOutput[];
  _init: string;
  _calldata: string;
}
export type DiamondCut_tuple_array_address_bytes_Event = TypedEvent<
  [IDiamondCut.FacetCutStructOutput[], string, string],
  DiamondCut_tuple_array_address_bytes_EventObject
>;

export type DiamondCut_tuple_array_address_bytes_EventFilter =
  TypedEventFilter<DiamondCut_tuple_array_address_bytes_Event>;

export interface DiamondCut_tuple_array_address_bytes_EventObject {
  _diamondCut: IDiamondCut.FacetCutStructOutput[];
  _init: string;
  _calldata: string;
}
export type DiamondCut_tuple_array_address_bytes_Event = TypedEvent<
  [IDiamondCut.FacetCutStructOutput[], string, string],
  DiamondCut_tuple_array_address_bytes_EventObject
>;

export type DiamondCut_tuple_array_address_bytes_EventFilter =
  TypedEventFilter<DiamondCut_tuple_array_address_bytes_Event>;

export interface MigrationCancelled_address_uint32_EventObject {
  cancellor: string;
  timeCancelled: number;
}
export type MigrationCancelled_address_uint32_Event = TypedEvent<
  [string, number],
  MigrationCancelled_address_uint32_EventObject
>;

export type MigrationCancelled_address_uint32_EventFilter =
  TypedEventFilter<MigrationCancelled_address_uint32_Event>;

export interface MigrationCancelled_address_uint32_EventObject {
  cancellor: string;
  timeCancelled: number;
}
export type MigrationCancelled_address_uint32_Event = TypedEvent<
  [string, number],
  MigrationCancelled_address_uint32_EventObject
>;

export type MigrationCancelled_address_uint32_EventFilter =
  TypedEventFilter<MigrationCancelled_address_uint32_Event>;

export interface MigrationCancelled_address_uint32_EventObject {
  cancellor: string;
  timeCancelled: number;
}
export type MigrationCancelled_address_uint32_Event = TypedEvent<
  [string, number],
  MigrationCancelled_address_uint32_EventObject
>;

export type MigrationCancelled_address_uint32_EventFilter =
  TypedEventFilter<MigrationCancelled_address_uint32_Event>;

export interface MigrationCancelled_address_uint32_EventObject {
  cancellor: string;
  timeCancelled: number;
}
export type MigrationCancelled_address_uint32_Event = TypedEvent<
  [string, number],
  MigrationCancelled_address_uint32_EventObject
>;

export type MigrationCancelled_address_uint32_EventFilter =
  TypedEventFilter<MigrationCancelled_address_uint32_Event>;

export interface MigrationCancelled_address_uint32_EventObject {
  cancellor: string;
  timeCancelled: number;
}
export type MigrationCancelled_address_uint32_Event = TypedEvent<
  [string, number],
  MigrationCancelled_address_uint32_EventObject
>;

export type MigrationCancelled_address_uint32_EventFilter =
  TypedEventFilter<MigrationCancelled_address_uint32_Event>;

export interface MigrationCancelled_address_uint32_EventObject {
  cancellor: string;
  timeCancelled: number;
}
export type MigrationCancelled_address_uint32_Event = TypedEvent<
  [string, number],
  MigrationCancelled_address_uint32_EventObject
>;

export type MigrationCancelled_address_uint32_EventFilter =
  TypedEventFilter<MigrationCancelled_address_uint32_Event>;

export interface MigrationCancelled_address_uint32_EventObject {
  cancellor: string;
  timeCancelled: number;
}
export type MigrationCancelled_address_uint32_Event = TypedEvent<
  [string, number],
  MigrationCancelled_address_uint32_EventObject
>;

export type MigrationCancelled_address_uint32_EventFilter =
  TypedEventFilter<MigrationCancelled_address_uint32_Event>;

export interface MigrationCancelled_address_uint32_EventObject {
  cancellor: string;
  timeCancelled: number;
}
export type MigrationCancelled_address_uint32_Event = TypedEvent<
  [string, number],
  MigrationCancelled_address_uint32_EventObject
>;

export type MigrationCancelled_address_uint32_EventFilter =
  TypedEventFilter<MigrationCancelled_address_uint32_Event>;

export interface MigrationCancelled_address_uint32_EventObject {
  cancellor: string;
  timeCancelled: number;
}
export type MigrationCancelled_address_uint32_Event = TypedEvent<
  [string, number],
  MigrationCancelled_address_uint32_EventObject
>;

export type MigrationCancelled_address_uint32_EventFilter =
  TypedEventFilter<MigrationCancelled_address_uint32_Event>;

export interface MigrationCancelled_address_uint32_EventObject {
  cancellor: string;
  timeCancelled: number;
}
export type MigrationCancelled_address_uint32_Event = TypedEvent<
  [string, number],
  MigrationCancelled_address_uint32_EventObject
>;

export type MigrationCancelled_address_uint32_EventFilter =
  TypedEventFilter<MigrationCancelled_address_uint32_Event>;

export interface MigrationInitiated_address_uint32_EventObject {
  initiatior: string;
  timeInitiatied: number;
}
export type MigrationInitiated_address_uint32_Event = TypedEvent<
  [string, number],
  MigrationInitiated_address_uint32_EventObject
>;

export type MigrationInitiated_address_uint32_EventFilter =
  TypedEventFilter<MigrationInitiated_address_uint32_Event>;

export interface MigrationInitiated_address_uint32_EventObject {
  initiatior: string;
  timeInitiatied: number;
}
export type MigrationInitiated_address_uint32_Event = TypedEvent<
  [string, number],
  MigrationInitiated_address_uint32_EventObject
>;

export type MigrationInitiated_address_uint32_EventFilter =
  TypedEventFilter<MigrationInitiated_address_uint32_Event>;

export interface MigrationInitiated_address_uint32_EventObject {
  initiatior: string;
  timeInitiatied: number;
}
export type MigrationInitiated_address_uint32_Event = TypedEvent<
  [string, number],
  MigrationInitiated_address_uint32_EventObject
>;

export type MigrationInitiated_address_uint32_EventFilter =
  TypedEventFilter<MigrationInitiated_address_uint32_Event>;

export interface MigrationInitiated_address_uint32_EventObject {
  initiatior: string;
  timeInitiatied: number;
}
export type MigrationInitiated_address_uint32_Event = TypedEvent<
  [string, number],
  MigrationInitiated_address_uint32_EventObject
>;

export type MigrationInitiated_address_uint32_EventFilter =
  TypedEventFilter<MigrationInitiated_address_uint32_Event>;

export interface MigrationInitiated_address_uint32_EventObject {
  initiatior: string;
  timeInitiatied: number;
}
export type MigrationInitiated_address_uint32_Event = TypedEvent<
  [string, number],
  MigrationInitiated_address_uint32_EventObject
>;

export type MigrationInitiated_address_uint32_EventFilter =
  TypedEventFilter<MigrationInitiated_address_uint32_Event>;

export interface MigrationInitiated_address_uint32_EventObject {
  initiatior: string;
  timeInitiatied: number;
}
export type MigrationInitiated_address_uint32_Event = TypedEvent<
  [string, number],
  MigrationInitiated_address_uint32_EventObject
>;

export type MigrationInitiated_address_uint32_EventFilter =
  TypedEventFilter<MigrationInitiated_address_uint32_Event>;

export interface MigrationInitiated_address_uint32_EventObject {
  initiatior: string;
  timeInitiatied: number;
}
export type MigrationInitiated_address_uint32_Event = TypedEvent<
  [string, number],
  MigrationInitiated_address_uint32_EventObject
>;

export type MigrationInitiated_address_uint32_EventFilter =
  TypedEventFilter<MigrationInitiated_address_uint32_Event>;

export interface MigrationInitiated_address_uint32_EventObject {
  initiatior: string;
  timeInitiatied: number;
}
export type MigrationInitiated_address_uint32_Event = TypedEvent<
  [string, number],
  MigrationInitiated_address_uint32_EventObject
>;

export type MigrationInitiated_address_uint32_EventFilter =
  TypedEventFilter<MigrationInitiated_address_uint32_Event>;

export interface MigrationInitiated_address_uint32_EventObject {
  initiatior: string;
  timeInitiatied: number;
}
export type MigrationInitiated_address_uint32_Event = TypedEvent<
  [string, number],
  MigrationInitiated_address_uint32_EventObject
>;

export type MigrationInitiated_address_uint32_EventFilter =
  TypedEventFilter<MigrationInitiated_address_uint32_Event>;

export interface MigrationInitiated_address_uint32_EventObject {
  initiatior: string;
  timeInitiatied: number;
}
export type MigrationInitiated_address_uint32_Event = TypedEvent<
  [string, number],
  MigrationInitiated_address_uint32_EventObject
>;

export type MigrationInitiated_address_uint32_EventFilter =
  TypedEventFilter<MigrationInitiated_address_uint32_Event>;

export interface RoyaltyFeeAccessedEventObject {
  sender: string;
  tokenId: BigNumber;
  salePrice: BigNumber;
  royaltyAmount: BigNumber;
}
export type RoyaltyFeeAccessedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  RoyaltyFeeAccessedEventObject
>;

export type RoyaltyFeeAccessedEventFilter =
  TypedEventFilter<RoyaltyFeeAccessedEvent>;

export interface ApprovalForAll_address_address_bool_EventObject {
  account: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAll_address_address_bool_Event = TypedEvent<
  [string, string, boolean],
  ApprovalForAll_address_address_bool_EventObject
>;

export type ApprovalForAll_address_address_bool_EventFilter =
  TypedEventFilter<ApprovalForAll_address_address_bool_Event>;

export interface ApprovalForAll_address_address_bool_EventObject {
  account: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAll_address_address_bool_Event = TypedEvent<
  [string, string, boolean],
  ApprovalForAll_address_address_bool_EventObject
>;

export type ApprovalForAll_address_address_bool_EventFilter =
  TypedEventFilter<ApprovalForAll_address_address_bool_Event>;

export interface ApprovalForAll_address_address_bool_EventObject {
  account: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAll_address_address_bool_Event = TypedEvent<
  [string, string, boolean],
  ApprovalForAll_address_address_bool_EventObject
>;

export type ApprovalForAll_address_address_bool_EventFilter =
  TypedEventFilter<ApprovalForAll_address_address_bool_Event>;

export interface ApprovalForAll_address_address_bool_EventObject {
  account: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAll_address_address_bool_Event = TypedEvent<
  [string, string, boolean],
  ApprovalForAll_address_address_bool_EventObject
>;

export type ApprovalForAll_address_address_bool_EventFilter =
  TypedEventFilter<ApprovalForAll_address_address_bool_Event>;

export interface EventActivatedEventObject {
  eventId: BigNumber;
}
export type EventActivatedEvent = TypedEvent<
  [BigNumber],
  EventActivatedEventObject
>;

export type EventActivatedEventFilter = TypedEventFilter<EventActivatedEvent>;

export interface EventDeactivatedEventObject {
  eventId: BigNumber;
}
export type EventDeactivatedEvent = TypedEvent<
  [BigNumber],
  EventDeactivatedEventObject
>;

export type EventDeactivatedEventFilter =
  TypedEventFilter<EventDeactivatedEvent>;

export interface EventDetailsEventObject {
  eventId: BigNumber;
  startTime: number;
  endTime: number;
  minEntries: BigNumber;
  maxEntries: BigNumber;
  imageUri: string;
  maxEntriesPerUser: BigNumber;
  status: number;
}
export type EventDetailsEvent = TypedEvent<
  [BigNumber, number, number, BigNumber, BigNumber, string, BigNumber, number],
  EventDetailsEventObject
>;

export type EventDetailsEventFilter = TypedEventFilter<EventDetailsEvent>;

export interface EventExtendedEventObject {
  eventId: BigNumber;
  addedTime: number;
}
export type EventExtendedEvent = TypedEvent<
  [BigNumber, number],
  EventExtendedEventObject
>;

export type EventExtendedEventFilter = TypedEventFilter<EventExtendedEvent>;

export interface ImageUriUpdatedEventObject {
  eventId: BigNumber;
  imageUri: string;
}
export type ImageUriUpdatedEvent = TypedEvent<
  [BigNumber, string],
  ImageUriUpdatedEventObject
>;

export type ImageUriUpdatedEventFilter = TypedEventFilter<ImageUriUpdatedEvent>;

export interface RefundsEnabledEventObject {
  eventId: BigNumber;
  merkleRoot: string;
}
export type RefundsEnabledEvent = TypedEvent<
  [BigNumber, string],
  RefundsEnabledEventObject
>;

export type RefundsEnabledEventFilter = TypedEventFilter<RefundsEnabledEvent>;

export interface TicketDetailsEventObject {
  eventId: BigNumber;
  ticketIds: BigNumber[];
}
export type TicketDetailsEvent = TypedEvent<
  [BigNumber, BigNumber[]],
  TicketDetailsEventObject
>;

export type TicketDetailsEventFilter = TypedEventFilter<TicketDetailsEvent>;

export interface TicketRedeemedEventObject {
  eventId: BigNumber;
  ticketIds: BigNumber[];
  amounts: BigNumber[];
}
export type TicketRedeemedEvent = TypedEvent<
  [BigNumber, BigNumber[], BigNumber[]],
  TicketRedeemedEventObject
>;

export type TicketRedeemedEventFilter = TypedEventFilter<TicketRedeemedEvent>;

export interface TicketRefundedEventObject {
  eventId: BigNumber;
  ticketId: BigNumber;
  amount: BigNumber;
}
export type TicketRefundedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  TicketRefundedEventObject
>;

export type TicketRefundedEventFilter = TypedEventFilter<TicketRefundedEvent>;

export interface TransferBatch_address_address_address_uint256_array_uint256_array_EventObject {
  operator: string;
  from: string;
  to: string;
  ids: BigNumber[];
  values: BigNumber[];
}
export type TransferBatch_address_address_address_uint256_array_uint256_array_Event =
  TypedEvent<
    [string, string, string, BigNumber[], BigNumber[]],
    TransferBatch_address_address_address_uint256_array_uint256_array_EventObject
  >;

export type TransferBatch_address_address_address_uint256_array_uint256_array_EventFilter =
  TypedEventFilter<TransferBatch_address_address_address_uint256_array_uint256_array_Event>;

export interface TransferBatch_address_address_address_uint256_array_uint256_array_EventObject {
  operator: string;
  from: string;
  to: string;
  ids: BigNumber[];
  values: BigNumber[];
}
export type TransferBatch_address_address_address_uint256_array_uint256_array_Event =
  TypedEvent<
    [string, string, string, BigNumber[], BigNumber[]],
    TransferBatch_address_address_address_uint256_array_uint256_array_EventObject
  >;

export type TransferBatch_address_address_address_uint256_array_uint256_array_EventFilter =
  TypedEventFilter<TransferBatch_address_address_address_uint256_array_uint256_array_Event>;

export interface TransferBatch_address_address_address_uint256_array_uint256_array_EventObject {
  operator: string;
  from: string;
  to: string;
  ids: BigNumber[];
  values: BigNumber[];
}
export type TransferBatch_address_address_address_uint256_array_uint256_array_Event =
  TypedEvent<
    [string, string, string, BigNumber[], BigNumber[]],
    TransferBatch_address_address_address_uint256_array_uint256_array_EventObject
  >;

export type TransferBatch_address_address_address_uint256_array_uint256_array_EventFilter =
  TypedEventFilter<TransferBatch_address_address_address_uint256_array_uint256_array_Event>;

export interface TransferBatch_address_address_address_uint256_array_uint256_array_EventObject {
  operator: string;
  from: string;
  to: string;
  ids: BigNumber[];
  values: BigNumber[];
}
export type TransferBatch_address_address_address_uint256_array_uint256_array_Event =
  TypedEvent<
    [string, string, string, BigNumber[], BigNumber[]],
    TransferBatch_address_address_address_uint256_array_uint256_array_EventObject
  >;

export type TransferBatch_address_address_address_uint256_array_uint256_array_EventFilter =
  TypedEventFilter<TransferBatch_address_address_address_uint256_array_uint256_array_Event>;

export interface TransferBatch_address_address_address_uint256_array_uint256_array_EventObject {
  operator: string;
  from: string;
  to: string;
  ids: BigNumber[];
  values: BigNumber[];
}
export type TransferBatch_address_address_address_uint256_array_uint256_array_Event =
  TypedEvent<
    [string, string, string, BigNumber[], BigNumber[]],
    TransferBatch_address_address_address_uint256_array_uint256_array_EventObject
  >;

export type TransferBatch_address_address_address_uint256_array_uint256_array_EventFilter =
  TypedEventFilter<TransferBatch_address_address_address_uint256_array_uint256_array_Event>;

export interface TransferBatch_address_address_address_uint256_array_uint256_array_EventObject {
  operator: string;
  from: string;
  to: string;
  ids: BigNumber[];
  values: BigNumber[];
}
export type TransferBatch_address_address_address_uint256_array_uint256_array_Event =
  TypedEvent<
    [string, string, string, BigNumber[], BigNumber[]],
    TransferBatch_address_address_address_uint256_array_uint256_array_EventObject
  >;

export type TransferBatch_address_address_address_uint256_array_uint256_array_EventFilter =
  TypedEventFilter<TransferBatch_address_address_address_uint256_array_uint256_array_Event>;

export interface TransferSingle_address_address_address_uint256_uint256_EventObject {
  operator: string;
  from: string;
  to: string;
  id: BigNumber;
  value: BigNumber;
}
export type TransferSingle_address_address_address_uint256_uint256_Event =
  TypedEvent<
    [string, string, string, BigNumber, BigNumber],
    TransferSingle_address_address_address_uint256_uint256_EventObject
  >;

export type TransferSingle_address_address_address_uint256_uint256_EventFilter =
  TypedEventFilter<TransferSingle_address_address_address_uint256_uint256_Event>;

export interface TransferSingle_address_address_address_uint256_uint256_EventObject {
  operator: string;
  from: string;
  to: string;
  id: BigNumber;
  value: BigNumber;
}
export type TransferSingle_address_address_address_uint256_uint256_Event =
  TypedEvent<
    [string, string, string, BigNumber, BigNumber],
    TransferSingle_address_address_address_uint256_uint256_EventObject
  >;

export type TransferSingle_address_address_address_uint256_uint256_EventFilter =
  TypedEventFilter<TransferSingle_address_address_address_uint256_uint256_Event>;

export interface TransferSingle_address_address_address_uint256_uint256_EventObject {
  operator: string;
  from: string;
  to: string;
  id: BigNumber;
  value: BigNumber;
}
export type TransferSingle_address_address_address_uint256_uint256_Event =
  TypedEvent<
    [string, string, string, BigNumber, BigNumber],
    TransferSingle_address_address_address_uint256_uint256_EventObject
  >;

export type TransferSingle_address_address_address_uint256_uint256_EventFilter =
  TypedEventFilter<TransferSingle_address_address_address_uint256_uint256_Event>;

export interface TransferSingle_address_address_address_uint256_uint256_EventObject {
  operator: string;
  from: string;
  to: string;
  id: BigNumber;
  value: BigNumber;
}
export type TransferSingle_address_address_address_uint256_uint256_Event =
  TypedEvent<
    [string, string, string, BigNumber, BigNumber],
    TransferSingle_address_address_address_uint256_uint256_EventObject
  >;

export type TransferSingle_address_address_address_uint256_uint256_EventFilter =
  TypedEventFilter<TransferSingle_address_address_address_uint256_uint256_Event>;

export interface TransferSingle_address_address_address_uint256_uint256_EventObject {
  operator: string;
  from: string;
  to: string;
  id: BigNumber;
  value: BigNumber;
}
export type TransferSingle_address_address_address_uint256_uint256_Event =
  TypedEvent<
    [string, string, string, BigNumber, BigNumber],
    TransferSingle_address_address_address_uint256_uint256_EventObject
  >;

export type TransferSingle_address_address_address_uint256_uint256_EventFilter =
  TypedEventFilter<TransferSingle_address_address_address_uint256_uint256_Event>;

export interface TransferSingle_address_address_address_uint256_uint256_EventObject {
  operator: string;
  from: string;
  to: string;
  id: BigNumber;
  value: BigNumber;
}
export type TransferSingle_address_address_address_uint256_uint256_Event =
  TypedEvent<
    [string, string, string, BigNumber, BigNumber],
    TransferSingle_address_address_address_uint256_uint256_EventObject
  >;

export type TransferSingle_address_address_address_uint256_uint256_EventFilter =
  TypedEventFilter<TransferSingle_address_address_address_uint256_uint256_Event>;

export interface MemberBanned_address_uint32_EventObject {
  user: string;
  timestamp: number;
}
export type MemberBanned_address_uint32_Event = TypedEvent<
  [string, number],
  MemberBanned_address_uint32_EventObject
>;

export type MemberBanned_address_uint32_EventFilter =
  TypedEventFilter<MemberBanned_address_uint32_Event>;

export interface MemberBanned_address_uint32_EventObject {
  user: string;
  timestamp: number;
}
export type MemberBanned_address_uint32_Event = TypedEvent<
  [string, number],
  MemberBanned_address_uint32_EventObject
>;

export type MemberBanned_address_uint32_EventFilter =
  TypedEventFilter<MemberBanned_address_uint32_Event>;

export interface MemberBanned_address_uint32_EventObject {
  user: string;
  timestamp: number;
}
export type MemberBanned_address_uint32_Event = TypedEvent<
  [string, number],
  MemberBanned_address_uint32_EventObject
>;

export type MemberBanned_address_uint32_EventFilter =
  TypedEventFilter<MemberBanned_address_uint32_Event>;

export interface MemberLevelUpdated_tuple_EventObject {
  leaf: LibMemberLevel.LeafStructOutput;
}
export type MemberLevelUpdated_tuple_Event = TypedEvent<
  [LibMemberLevel.LeafStructOutput],
  MemberLevelUpdated_tuple_EventObject
>;

export type MemberLevelUpdated_tuple_EventFilter =
  TypedEventFilter<MemberLevelUpdated_tuple_Event>;

export interface MemberLevelUpdated_tuple_EventObject {
  leaf: LibMemberLevel.LeafStructOutput;
}
export type MemberLevelUpdated_tuple_Event = TypedEvent<
  [LibMemberLevel.LeafStructOutput],
  MemberLevelUpdated_tuple_EventObject
>;

export type MemberLevelUpdated_tuple_EventFilter =
  TypedEventFilter<MemberLevelUpdated_tuple_Event>;

export interface MemberLevelUpdated_tuple_EventObject {
  leaf: LibMemberLevel.LeafStructOutput;
}
export type MemberLevelUpdated_tuple_Event = TypedEvent<
  [LibMemberLevel.LeafStructOutput],
  MemberLevelUpdated_tuple_EventObject
>;

export type MemberLevelUpdated_tuple_EventFilter =
  TypedEventFilter<MemberLevelUpdated_tuple_Event>;

export interface MerkleRootUpdated_bytes32_EventObject {
  newRoot: string;
}
export type MerkleRootUpdated_bytes32_Event = TypedEvent<
  [string],
  MerkleRootUpdated_bytes32_EventObject
>;

export type MerkleRootUpdated_bytes32_EventFilter =
  TypedEventFilter<MerkleRootUpdated_bytes32_Event>;

export interface MerkleRootUpdated_bytes32_EventObject {
  newRoot: string;
}
export type MerkleRootUpdated_bytes32_Event = TypedEvent<
  [string],
  MerkleRootUpdated_bytes32_EventObject
>;

export type MerkleRootUpdated_bytes32_EventFilter =
  TypedEventFilter<MerkleRootUpdated_bytes32_Event>;

export interface MerkleRootUpdated_bytes32_EventObject {
  newRoot: string;
}
export type MerkleRootUpdated_bytes32_Event = TypedEvent<
  [string],
  MerkleRootUpdated_bytes32_EventObject
>;

export type MerkleRootUpdated_bytes32_EventFilter =
  TypedEventFilter<MerkleRootUpdated_bytes32_Event>;

export interface RecoveryActionEventObject {
  username: string;
  userAddress: string;
  recoveryStatus: number;
}
export type RecoveryActionEvent = TypedEvent<
  [string, string, number],
  RecoveryActionEventObject
>;

export type RecoveryActionEventFilter = TypedEventFilter<RecoveryActionEvent>;

export interface UserRegisteredEventObject {
  username: string;
  userAddress: string;
}
export type UserRegisteredEvent = TypedEvent<
  [string, string],
  UserRegisteredEventObject
>;

export type UserRegisteredEventFilter = TypedEventFilter<UserRegisteredEvent>;

export interface UsersRegisteredEventObject {
  username: string[];
  userAddress: string[];
}
export type UsersRegisteredEvent = TypedEvent<
  [string[], string[]],
  UsersRegisteredEventObject
>;

export type UsersRegisteredEventFilter = TypedEventFilter<UsersRegisteredEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RewardRatesChangedEventObject {
  _rewardRates: Stake.RewardRateStructOutput[];
}
export type RewardRatesChangedEvent = TypedEvent<
  [Stake.RewardRateStructOutput[]],
  RewardRatesChangedEventObject
>;

export type RewardRatesChangedEventFilter =
  TypedEventFilter<RewardRatesChangedEvent>;

export interface RewardsRetrievedEventObject {
  user: string;
  amount: BigNumber;
  reward: BigNumber;
  stakeId: BigNumber;
}
export type RewardsRetrievedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  RewardsRetrievedEventObject
>;

export type RewardsRetrievedEventFilter =
  TypedEventFilter<RewardsRetrievedEvent>;

export interface StakeRewardAccountFundedEventObject {
  funder: string;
  amount: BigNumber;
}
export type StakeRewardAccountFundedEvent = TypedEvent<
  [string, BigNumber],
  StakeRewardAccountFundedEventObject
>;

export type StakeRewardAccountFundedEventFilter =
  TypedEventFilter<StakeRewardAccountFundedEvent>;

export interface TicketsCreatedEventObject {
  arg0: BigNumber;
  arg1: BigNumber;
  arg2: TicketCreate.TicketMetaStructOutput;
}
export type TicketsCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, TicketCreate.TicketMetaStructOutput],
  TicketsCreatedEventObject
>;

export type TicketsCreatedEventFilter = TypedEventFilter<TicketsCreatedEvent>;

export interface URIEventObject {
  value: string;
  id: BigNumber;
}
export type URIEvent = TypedEvent<[string, BigNumber], URIEventObject>;

export type URIEventFilter = TypedEventFilter<URIEvent>;

export interface URIChangedEventObject {
  uri: string;
}
export type URIChangedEvent = TypedEvent<[string], URIChangedEventObject>;

export type URIChangedEventFilter = TypedEventFilter<URIChangedEvent>;

export interface CurrencyNameChangedEventObject {
  name: string;
}
export type CurrencyNameChangedEvent = TypedEvent<
  [string],
  CurrencyNameChangedEventObject
>;

export type CurrencyNameChangedEventFilter =
  TypedEventFilter<CurrencyNameChangedEvent>;

export interface CurrencySymbolChangedEventObject {
  name: string;
}
export type CurrencySymbolChangedEvent = TypedEvent<
  [string],
  CurrencySymbolChangedEventObject
>;

export type CurrencySymbolChangedEventFilter =
  TypedEventFilter<CurrencySymbolChangedEvent>;

export interface Ecosystem extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EcosystemInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancelMigration(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    diamondCut(
      _diamondCut: IDiamondCut.FacetCutStruct[],
      _init: PromiseOrValue<string>,
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initiateMigration(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    facetAddress(
      _functionSelector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { facetAddress_: string }>;

    facetAddresses(
      overrides?: CallOverrides
    ): Promise<[string[]] & { facetAddresses_: string[] }>;

    facetFunctionSelectors(
      _facet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { facetFunctionSelectors_: string[] }>;

    facets(
      overrides?: CallOverrides
    ): Promise<
      [IDiamondLoupe.FacetStructOutput[]] & {
        facets_: IDiamondLoupe.FacetStructOutput[];
      }
    >;

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    royaltyInfo(
      tokenId: PromiseOrValue<BigNumberish>,
      salePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createEvent(
      _startTime: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      _minEntries: PromiseOrValue<BigNumberish>,
      _maxEntries: PromiseOrValue<BigNumberish>,
      _imageUri: PromiseOrValue<string>,
      _ticketIds: PromiseOrValue<BigNumberish>[],
      _maxEntriesPerUser: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deactivateEvent(
      eventId: PromiseOrValue<BigNumberish>,
      root: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    extendEvent(
      eventId: PromiseOrValue<BigNumberish>,
      addedTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemTickets(
      eventId: PromiseOrValue<BigNumberish>,
      ticketIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    refundTicketsWithProof(
      eventId: PromiseOrValue<BigNumberish>,
      ticketIds: PromiseOrValue<BigNumberish>[],
      lowerBound: PromiseOrValue<string>,
      upperBound: PromiseOrValue<string>,
      merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setImageUri(
      eventId: PromiseOrValue<BigNumberish>,
      imageUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMerkleRoot(
      eventId: PromiseOrValue<BigNumberish>,
      root: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    banMember(
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchSetLevels(
      _leaves: LibMemberLevel.LeafStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getMemberLevel(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number] & { memberLevel_: number }>;

    getMemberLevelStruct(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number, number] & { level: number; timestamp: number }>;

    verifyAndSetLevel(
      _leaf: LibMemberLevel.LeafStruct,
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelVerify(
      username: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    finalizeRecovery(
      username: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUsernameAddressPair(
      username: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUsernameOwner(
      username: PromiseOrValue<string>[],
      userAddress: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUsernamePair(
      username: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    usernameRecovery(
      username: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verificationTime(overrides?: CallOverrides): Promise<[number]>;

    verifyAndUsername(
      _leaf: LibMemberRegistry.LeafStruct,
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getModeratorRank(
      _moderator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number] & { moderatorRank_: number }>;

    setModeratorRank(
      _moderator: PromiseOrValue<string>,
      _rank: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setModeratorRanks(
      _moderators: PromiseOrValue<string>[],
      _ranks: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ecosystemOwner(
      overrides?: CallOverrides
    ): Promise<[string] & { owner_: string }>;

    isEcosystemOwnerVerify(
      _tenativeOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    setEcosystemOwner(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchStake(
      user: PromiseOrValue<string>[],
      amount: PromiseOrValue<BigNumberish>[],
      tier: PromiseOrValue<BigNumberish>[],
      stakeIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fundStakeAccount(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getGasStakeFee(
      overrides?: CallOverrides
    ): Promise<[number, number] & { feeScale_: number; fee_: number }>;

    setRewardRates(
      _stakeTier: PromiseOrValue<BigNumberish>[],
      _rewardRate: Stake.RewardRateStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      tier: PromiseOrValue<BigNumberish>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakeContract(
      staker: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      tier: PromiseOrValue<BigNumberish>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakeVirtual(
      staker: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      tier: PromiseOrValue<BigNumberish>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unstake(
      amount: PromiseOrValue<BigNumberish>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unstakeContract(
      staker: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unstakeVirtual(
      staker: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    viewMinimumStakeDurationLeft(
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number] & { timeLeft_: number }>;

    viewReward(
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { reward_: BigNumber }>;

    expireable(
      ticketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    ticketCreate(
      _amount: PromiseOrValue<BigNumberish>,
      _ticketMeta: TicketCreate.TicketMetaStruct,
      _constraints: LibERC1155TransferConstraints.ConstraintsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ticketCreateBatch(
      _amount: PromiseOrValue<BigNumberish>[],
      _ticketMeta: TicketCreate.TicketMetaStruct[],
      _constraints: LibERC1155TransferConstraints.ConstraintsStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "balanceOf(address,uint256)"(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balanceOf(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    burn(
      from: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    burnBatch(
      from: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mint(
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintBatch(
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUri(
      _uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uri(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    onERC1155BatchReceived(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    onERC1155Received(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    safeBatchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    setCurrencyNames(
      _currencyName: PromiseOrValue<string>,
      _currencySymbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  cancelMigration(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  diamondCut(
    _diamondCut: IDiamondCut.FacetCutStruct[],
    _init: PromiseOrValue<string>,
    _calldata: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initiateMigration(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  facetAddress(
    _functionSelector: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  facetAddresses(overrides?: CallOverrides): Promise<string[]>;

  facetFunctionSelectors(
    _facet: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  facets(overrides?: CallOverrides): Promise<IDiamondLoupe.FacetStructOutput[]>;

  supportsInterface(
    _interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  royaltyInfo(
    tokenId: PromiseOrValue<BigNumberish>,
    salePrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createEvent(
    _startTime: PromiseOrValue<BigNumberish>,
    _endTime: PromiseOrValue<BigNumberish>,
    _minEntries: PromiseOrValue<BigNumberish>,
    _maxEntries: PromiseOrValue<BigNumberish>,
    _imageUri: PromiseOrValue<string>,
    _ticketIds: PromiseOrValue<BigNumberish>[],
    _maxEntriesPerUser: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deactivateEvent(
    eventId: PromiseOrValue<BigNumberish>,
    root: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  extendEvent(
    eventId: PromiseOrValue<BigNumberish>,
    addedTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemTickets(
    eventId: PromiseOrValue<BigNumberish>,
    ticketIds: PromiseOrValue<BigNumberish>[],
    amounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  refundTicketsWithProof(
    eventId: PromiseOrValue<BigNumberish>,
    ticketIds: PromiseOrValue<BigNumberish>[],
    lowerBound: PromiseOrValue<string>,
    upperBound: PromiseOrValue<string>,
    merkleProof: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setImageUri(
    eventId: PromiseOrValue<BigNumberish>,
    imageUri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMerkleRoot(
    eventId: PromiseOrValue<BigNumberish>,
    root: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  banMember(
    _user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchSetLevels(
    _leaves: LibMemberLevel.LeafStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getMemberLevel(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  getMemberLevelStruct(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[number, number] & { level: number; timestamp: number }>;

  verifyAndSetLevel(
    _leaf: LibMemberLevel.LeafStruct,
    _merkleProof: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelVerify(
    username: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  finalizeRecovery(
    username: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUsernameAddressPair(
    username: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUsernameOwner(
    username: PromiseOrValue<string>[],
    userAddress: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUsernamePair(
    username: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  usernameRecovery(
    username: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verificationTime(overrides?: CallOverrides): Promise<number>;

  verifyAndUsername(
    _leaf: LibMemberRegistry.LeafStruct,
    _merkleProof: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getModeratorRank(
    _moderator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  setModeratorRank(
    _moderator: PromiseOrValue<string>,
    _rank: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setModeratorRanks(
    _moderators: PromiseOrValue<string>[],
    _ranks: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ecosystemOwner(overrides?: CallOverrides): Promise<string>;

  isEcosystemOwnerVerify(
    _tenativeOwner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<void>;

  setEcosystemOwner(
    _newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchStake(
    user: PromiseOrValue<string>[],
    amount: PromiseOrValue<BigNumberish>[],
    tier: PromiseOrValue<BigNumberish>[],
    stakeIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fundStakeAccount(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getGasStakeFee(
    overrides?: CallOverrides
  ): Promise<[number, number] & { feeScale_: number; fee_: number }>;

  setRewardRates(
    _stakeTier: PromiseOrValue<BigNumberish>[],
    _rewardRate: Stake.RewardRateStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stake(
    amount: PromiseOrValue<BigNumberish>,
    tier: PromiseOrValue<BigNumberish>,
    stakeId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakeContract(
    staker: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    tier: PromiseOrValue<BigNumberish>,
    stakeId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakeVirtual(
    staker: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    tier: PromiseOrValue<BigNumberish>,
    stakeId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unstake(
    amount: PromiseOrValue<BigNumberish>,
    stakeId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unstakeContract(
    staker: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    stakeId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unstakeVirtual(
    staker: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    stakeId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  viewMinimumStakeDurationLeft(
    stakeId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  viewReward(
    stakeId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  expireable(
    ticketId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<void>;

  ticketCreate(
    _amount: PromiseOrValue<BigNumberish>,
    _ticketMeta: TicketCreate.TicketMetaStruct,
    _constraints: LibERC1155TransferConstraints.ConstraintsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ticketCreateBatch(
    _amount: PromiseOrValue<BigNumberish>[],
    _ticketMeta: TicketCreate.TicketMetaStruct[],
    _constraints: LibERC1155TransferConstraints.ConstraintsStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "balanceOf(address,uint256)"(
    account: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOf(address)"(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    accounts: PromiseOrValue<string>[],
    ids: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  burn(
    from: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  burnBatch(
    from: PromiseOrValue<string>,
    ids: PromiseOrValue<BigNumberish>[],
    amounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mint(
    to: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintBatch(
    to: PromiseOrValue<string>,
    ids: PromiseOrValue<BigNumberish>[],
    amounts: PromiseOrValue<BigNumberish>[],
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUri(
    _uri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uri(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  onERC1155BatchReceived(
    operator: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    ids: PromiseOrValue<BigNumberish>[],
    values: PromiseOrValue<BigNumberish>[],
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  onERC1155Received(
    operator: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    value: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  isApprovedForAll(
    account: PromiseOrValue<string>,
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  safeBatchTransferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    ids: PromiseOrValue<BigNumberish>[],
    amounts: PromiseOrValue<BigNumberish>[],
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  name(overrides?: CallOverrides): Promise<string>;

  setCurrencyNames(
    _currencyName: PromiseOrValue<string>,
    _currencySymbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cancelMigration(overrides?: CallOverrides): Promise<void>;

    diamondCut(
      _diamondCut: IDiamondCut.FacetCutStruct[],
      _init: PromiseOrValue<string>,
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    initiateMigration(overrides?: CallOverrides): Promise<void>;

    facetAddress(
      _functionSelector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    facetAddresses(overrides?: CallOverrides): Promise<string[]>;

    facetFunctionSelectors(
      _facet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    facets(
      overrides?: CallOverrides
    ): Promise<IDiamondLoupe.FacetStructOutput[]>;

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    royaltyInfo(
      tokenId: PromiseOrValue<BigNumberish>,
      salePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { receiver: string; royaltyAmount: BigNumber }
    >;

    createEvent(
      _startTime: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      _minEntries: PromiseOrValue<BigNumberish>,
      _maxEntries: PromiseOrValue<BigNumberish>,
      _imageUri: PromiseOrValue<string>,
      _ticketIds: PromiseOrValue<BigNumberish>[],
      _maxEntriesPerUser: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deactivateEvent(
      eventId: PromiseOrValue<BigNumberish>,
      root: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    extendEvent(
      eventId: PromiseOrValue<BigNumberish>,
      addedTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemTickets(
      eventId: PromiseOrValue<BigNumberish>,
      ticketIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    refundTicketsWithProof(
      eventId: PromiseOrValue<BigNumberish>,
      ticketIds: PromiseOrValue<BigNumberish>[],
      lowerBound: PromiseOrValue<string>,
      upperBound: PromiseOrValue<string>,
      merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setImageUri(
      eventId: PromiseOrValue<BigNumberish>,
      imageUri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMerkleRoot(
      eventId: PromiseOrValue<BigNumberish>,
      root: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    banMember(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    batchSetLevels(
      _leaves: LibMemberLevel.LeafStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    getMemberLevel(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    getMemberLevelStruct(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number, number] & { level: number; timestamp: number }>;

    verifyAndSetLevel(
      _leaf: LibMemberLevel.LeafStruct,
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    cancelVerify(
      username: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    finalizeRecovery(
      username: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUsernameAddressPair(
      username: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUsernameOwner(
      username: PromiseOrValue<string>[],
      userAddress: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setUsernamePair(
      username: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    usernameRecovery(
      username: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    verificationTime(overrides?: CallOverrides): Promise<number>;

    verifyAndUsername(
      _leaf: LibMemberRegistry.LeafStruct,
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    getModeratorRank(
      _moderator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    setModeratorRank(
      _moderator: PromiseOrValue<string>,
      _rank: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setModeratorRanks(
      _moderators: PromiseOrValue<string>[],
      _ranks: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    ecosystemOwner(overrides?: CallOverrides): Promise<string>;

    isEcosystemOwnerVerify(
      _tenativeOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setEcosystemOwner(
      _newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    batchStake(
      user: PromiseOrValue<string>[],
      amount: PromiseOrValue<BigNumberish>[],
      tier: PromiseOrValue<BigNumberish>[],
      stakeIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    fundStakeAccount(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getGasStakeFee(
      overrides?: CallOverrides
    ): Promise<[number, number] & { feeScale_: number; fee_: number }>;

    setRewardRates(
      _stakeTier: PromiseOrValue<BigNumberish>[],
      _rewardRate: Stake.RewardRateStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      tier: PromiseOrValue<BigNumberish>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeContract(
      staker: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      tier: PromiseOrValue<BigNumberish>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeVirtual(
      staker: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      tier: PromiseOrValue<BigNumberish>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    unstake(
      amount: PromiseOrValue<BigNumberish>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    unstakeContract(
      staker: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unstakeVirtual(
      staker: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    viewMinimumStakeDurationLeft(
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    viewReward(
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    expireable(
      ticketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    ticketCreate(
      _amount: PromiseOrValue<BigNumberish>,
      _ticketMeta: TicketCreate.TicketMetaStruct,
      _constraints: LibERC1155TransferConstraints.ConstraintsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    ticketCreateBatch(
      _amount: PromiseOrValue<BigNumberish>[],
      _ticketMeta: TicketCreate.TicketMetaStruct[],
      _constraints: LibERC1155TransferConstraints.ConstraintsStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    "balanceOf(address,uint256)"(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    burn(
      from: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    burnBatch(
      from: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    mint(
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    mintBatch(
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUri(
      _uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    uri(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155BatchReceived(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    safeBatchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    decimals(overrides?: CallOverrides): Promise<number>;

    name(overrides?: CallOverrides): Promise<string>;

    setCurrencyNames(
      _currencyName: PromiseOrValue<string>,
      _currencySymbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "DiamondCut(tuple[],address,bytes)"(
      _diamondCut?: null,
      _init?: null,
      _calldata?: null
    ): DiamondCut_tuple_array_address_bytes_EventFilter;
    "DiamondCut(tuple[],address,bytes)"(
      _diamondCut?: null,
      _init?: null,
      _calldata?: null
    ): DiamondCut_tuple_array_address_bytes_EventFilter;
    "MigrationCancelled(address,uint32)"(
      cancellor?: null,
      timeCancelled?: null
    ): MigrationCancelled_address_uint32_EventFilter;
    "MigrationCancelled(address,uint32)"(
      cancellor?: null,
      timeCancelled?: null
    ): MigrationCancelled_address_uint32_EventFilter;
    "MigrationCancelled(address,uint32)"(
      cancellor?: null,
      timeCancelled?: null
    ): MigrationCancelled_address_uint32_EventFilter;
    "MigrationCancelled(address,uint32)"(
      cancellor?: null,
      timeCancelled?: null
    ): MigrationCancelled_address_uint32_EventFilter;
    "MigrationCancelled(address,uint32)"(
      cancellor?: null,
      timeCancelled?: null
    ): MigrationCancelled_address_uint32_EventFilter;
    "MigrationCancelled(address,uint32)"(
      cancellor?: null,
      timeCancelled?: null
    ): MigrationCancelled_address_uint32_EventFilter;
    "MigrationCancelled(address,uint32)"(
      cancellor?: null,
      timeCancelled?: null
    ): MigrationCancelled_address_uint32_EventFilter;
    "MigrationCancelled(address,uint32)"(
      cancellor?: null,
      timeCancelled?: null
    ): MigrationCancelled_address_uint32_EventFilter;
    "MigrationCancelled(address,uint32)"(
      cancellor?: null,
      timeCancelled?: null
    ): MigrationCancelled_address_uint32_EventFilter;
    "MigrationCancelled(address,uint32)"(
      cancellor?: null,
      timeCancelled?: null
    ): MigrationCancelled_address_uint32_EventFilter;
    "MigrationInitiated(address,uint32)"(
      initiatior?: null,
      timeInitiatied?: null
    ): MigrationInitiated_address_uint32_EventFilter;
    "MigrationInitiated(address,uint32)"(
      initiatior?: null,
      timeInitiatied?: null
    ): MigrationInitiated_address_uint32_EventFilter;
    "MigrationInitiated(address,uint32)"(
      initiatior?: null,
      timeInitiatied?: null
    ): MigrationInitiated_address_uint32_EventFilter;
    "MigrationInitiated(address,uint32)"(
      initiatior?: null,
      timeInitiatied?: null
    ): MigrationInitiated_address_uint32_EventFilter;
    "MigrationInitiated(address,uint32)"(
      initiatior?: null,
      timeInitiatied?: null
    ): MigrationInitiated_address_uint32_EventFilter;
    "MigrationInitiated(address,uint32)"(
      initiatior?: null,
      timeInitiatied?: null
    ): MigrationInitiated_address_uint32_EventFilter;
    "MigrationInitiated(address,uint32)"(
      initiatior?: null,
      timeInitiatied?: null
    ): MigrationInitiated_address_uint32_EventFilter;
    "MigrationInitiated(address,uint32)"(
      initiatior?: null,
      timeInitiatied?: null
    ): MigrationInitiated_address_uint32_EventFilter;
    "MigrationInitiated(address,uint32)"(
      initiatior?: null,
      timeInitiatied?: null
    ): MigrationInitiated_address_uint32_EventFilter;
    "MigrationInitiated(address,uint32)"(
      initiatior?: null,
      timeInitiatied?: null
    ): MigrationInitiated_address_uint32_EventFilter;

    "RoyaltyFeeAccessed(address,uint256,uint256,uint256)"(
      sender?: null,
      tokenId?: null,
      salePrice?: null,
      royaltyAmount?: null
    ): RoyaltyFeeAccessedEventFilter;
    RoyaltyFeeAccessed(
      sender?: null,
      tokenId?: null,
      salePrice?: null,
      royaltyAmount?: null
    ): RoyaltyFeeAccessedEventFilter;

    "ApprovalForAll(address,address,bool)"(
      account?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAll_address_address_bool_EventFilter;
    "ApprovalForAll(address,address,bool)"(
      account?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAll_address_address_bool_EventFilter;
    "ApprovalForAll(address,address,bool)"(
      account?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAll_address_address_bool_EventFilter;
    "ApprovalForAll(address,address,bool)"(
      account?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAll_address_address_bool_EventFilter;

    "EventActivated(uint256)"(eventId?: null): EventActivatedEventFilter;
    EventActivated(eventId?: null): EventActivatedEventFilter;

    "EventDeactivated(uint256)"(eventId?: null): EventDeactivatedEventFilter;
    EventDeactivated(eventId?: null): EventDeactivatedEventFilter;

    "EventDetails(uint256,uint32,uint32,uint256,uint256,string,uint256,uint8)"(
      eventId?: null,
      startTime?: null,
      endTime?: null,
      minEntries?: null,
      maxEntries?: null,
      imageUri?: null,
      maxEntriesPerUser?: null,
      status?: null
    ): EventDetailsEventFilter;
    EventDetails(
      eventId?: null,
      startTime?: null,
      endTime?: null,
      minEntries?: null,
      maxEntries?: null,
      imageUri?: null,
      maxEntriesPerUser?: null,
      status?: null
    ): EventDetailsEventFilter;

    "EventExtended(uint256,uint32)"(
      eventId?: null,
      addedTime?: null
    ): EventExtendedEventFilter;
    EventExtended(eventId?: null, addedTime?: null): EventExtendedEventFilter;

    "ImageUriUpdated(uint256,string)"(
      eventId?: null,
      imageUri?: null
    ): ImageUriUpdatedEventFilter;
    ImageUriUpdated(
      eventId?: null,
      imageUri?: null
    ): ImageUriUpdatedEventFilter;

    "RefundsEnabled(uint256,bytes32)"(
      eventId?: null,
      merkleRoot?: null
    ): RefundsEnabledEventFilter;
    RefundsEnabled(
      eventId?: null,
      merkleRoot?: null
    ): RefundsEnabledEventFilter;

    "TicketDetails(uint256,uint256[])"(
      eventId?: null,
      ticketIds?: null
    ): TicketDetailsEventFilter;
    TicketDetails(eventId?: null, ticketIds?: null): TicketDetailsEventFilter;

    "TicketRedeemed(uint256,uint256[],uint256[])"(
      eventId?: null,
      ticketIds?: null,
      amounts?: null
    ): TicketRedeemedEventFilter;
    TicketRedeemed(
      eventId?: null,
      ticketIds?: null,
      amounts?: null
    ): TicketRedeemedEventFilter;

    "TicketRefunded(uint256,uint256,uint256)"(
      eventId?: null,
      ticketId?: null,
      amount?: null
    ): TicketRefundedEventFilter;
    TicketRefunded(
      eventId?: null,
      ticketId?: null,
      amount?: null
    ): TicketRefundedEventFilter;

    "TransferBatch(address,address,address,uint256[],uint256[])"(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      ids?: null,
      values?: null
    ): TransferBatch_address_address_address_uint256_array_uint256_array_EventFilter;
    "TransferBatch(address,address,address,uint256[],uint256[])"(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      ids?: null,
      values?: null
    ): TransferBatch_address_address_address_uint256_array_uint256_array_EventFilter;
    "TransferBatch(address,address,address,uint256[],uint256[])"(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      ids?: null,
      values?: null
    ): TransferBatch_address_address_address_uint256_array_uint256_array_EventFilter;
    "TransferBatch(address,address,address,uint256[],uint256[])"(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      ids?: null,
      values?: null
    ): TransferBatch_address_address_address_uint256_array_uint256_array_EventFilter;
    "TransferBatch(address,address,address,uint256[],uint256[])"(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      ids?: null,
      values?: null
    ): TransferBatch_address_address_address_uint256_array_uint256_array_EventFilter;
    "TransferBatch(address,address,address,uint256[],uint256[])"(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      ids?: null,
      values?: null
    ): TransferBatch_address_address_address_uint256_array_uint256_array_EventFilter;
    "TransferSingle(address,address,address,uint256,uint256)"(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: null,
      value?: null
    ): TransferSingle_address_address_address_uint256_uint256_EventFilter;
    "TransferSingle(address,address,address,uint256,uint256)"(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: null,
      value?: null
    ): TransferSingle_address_address_address_uint256_uint256_EventFilter;
    "TransferSingle(address,address,address,uint256,uint256)"(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: null,
      value?: null
    ): TransferSingle_address_address_address_uint256_uint256_EventFilter;
    "TransferSingle(address,address,address,uint256,uint256)"(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: null,
      value?: null
    ): TransferSingle_address_address_address_uint256_uint256_EventFilter;
    "TransferSingle(address,address,address,uint256,uint256)"(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: null,
      value?: null
    ): TransferSingle_address_address_address_uint256_uint256_EventFilter;
    "TransferSingle(address,address,address,uint256,uint256)"(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: null,
      value?: null
    ): TransferSingle_address_address_address_uint256_uint256_EventFilter;
    "MemberBanned(address,uint32)"(
      user?: PromiseOrValue<string> | null,
      timestamp?: null
    ): MemberBanned_address_uint32_EventFilter;
    "MemberBanned(address,uint32)"(
      user?: PromiseOrValue<string> | null,
      timestamp?: null
    ): MemberBanned_address_uint32_EventFilter;
    "MemberBanned(address,uint32)"(
      user?: PromiseOrValue<string> | null,
      timestamp?: null
    ): MemberBanned_address_uint32_EventFilter;
    "MemberLevelUpdated(tuple)"(
      leaf?: null
    ): MemberLevelUpdated_tuple_EventFilter;
    "MemberLevelUpdated(tuple)"(
      leaf?: null
    ): MemberLevelUpdated_tuple_EventFilter;
    "MemberLevelUpdated(tuple)"(
      leaf?: null
    ): MemberLevelUpdated_tuple_EventFilter;
    "MerkleRootUpdated(bytes32)"(
      newRoot?: null
    ): MerkleRootUpdated_bytes32_EventFilter;
    "MerkleRootUpdated(bytes32)"(
      newRoot?: null
    ): MerkleRootUpdated_bytes32_EventFilter;
    "MerkleRootUpdated(bytes32)"(
      newRoot?: null
    ): MerkleRootUpdated_bytes32_EventFilter;

    "RecoveryAction(string,address,uint8)"(
      username?: null,
      userAddress?: null,
      recoveryStatus?: null
    ): RecoveryActionEventFilter;
    RecoveryAction(
      username?: null,
      userAddress?: null,
      recoveryStatus?: null
    ): RecoveryActionEventFilter;

    "UserRegistered(string,address)"(
      username?: null,
      userAddress?: null
    ): UserRegisteredEventFilter;
    UserRegistered(
      username?: null,
      userAddress?: null
    ): UserRegisteredEventFilter;

    "UsersRegistered(string[],address[])"(
      username?: null,
      userAddress?: null
    ): UsersRegisteredEventFilter;
    UsersRegistered(
      username?: null,
      userAddress?: null
    ): UsersRegisteredEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RewardRatesChanged(tuple[])"(
      _rewardRates?: null
    ): RewardRatesChangedEventFilter;
    RewardRatesChanged(_rewardRates?: null): RewardRatesChangedEventFilter;

    "RewardsRetrieved(address,uint256,uint256,uint256)"(
      user?: null,
      amount?: null,
      reward?: null,
      stakeId?: null
    ): RewardsRetrievedEventFilter;
    RewardsRetrieved(
      user?: null,
      amount?: null,
      reward?: null,
      stakeId?: null
    ): RewardsRetrievedEventFilter;

    "StakeRewardAccountFunded(address,uint256)"(
      funder?: null,
      amount?: null
    ): StakeRewardAccountFundedEventFilter;
    StakeRewardAccountFunded(
      funder?: null,
      amount?: null
    ): StakeRewardAccountFundedEventFilter;

    "TicketsCreated(uint256,uint256,tuple)"(
      arg0?: null,
      arg1?: null,
      arg2?: null
    ): TicketsCreatedEventFilter;
    TicketsCreated(
      arg0?: null,
      arg1?: null,
      arg2?: null
    ): TicketsCreatedEventFilter;

    "URI(string,uint256)"(
      value?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): URIEventFilter;
    URI(value?: null, id?: PromiseOrValue<BigNumberish> | null): URIEventFilter;

    "URIChanged(string)"(uri?: null): URIChangedEventFilter;
    URIChanged(uri?: null): URIChangedEventFilter;

    "CurrencyNameChanged(string)"(name?: null): CurrencyNameChangedEventFilter;
    CurrencyNameChanged(name?: null): CurrencyNameChangedEventFilter;

    "CurrencySymbolChanged(string)"(
      name?: null
    ): CurrencySymbolChangedEventFilter;
    CurrencySymbolChanged(name?: null): CurrencySymbolChangedEventFilter;
  };

  estimateGas: {
    cancelMigration(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    diamondCut(
      _diamondCut: IDiamondCut.FacetCutStruct[],
      _init: PromiseOrValue<string>,
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initiateMigration(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    facetAddress(
      _functionSelector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facetAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    facetFunctionSelectors(
      _facet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facets(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    royaltyInfo(
      tokenId: PromiseOrValue<BigNumberish>,
      salePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createEvent(
      _startTime: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      _minEntries: PromiseOrValue<BigNumberish>,
      _maxEntries: PromiseOrValue<BigNumberish>,
      _imageUri: PromiseOrValue<string>,
      _ticketIds: PromiseOrValue<BigNumberish>[],
      _maxEntriesPerUser: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deactivateEvent(
      eventId: PromiseOrValue<BigNumberish>,
      root: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    extendEvent(
      eventId: PromiseOrValue<BigNumberish>,
      addedTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemTickets(
      eventId: PromiseOrValue<BigNumberish>,
      ticketIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    refundTicketsWithProof(
      eventId: PromiseOrValue<BigNumberish>,
      ticketIds: PromiseOrValue<BigNumberish>[],
      lowerBound: PromiseOrValue<string>,
      upperBound: PromiseOrValue<string>,
      merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setImageUri(
      eventId: PromiseOrValue<BigNumberish>,
      imageUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMerkleRoot(
      eventId: PromiseOrValue<BigNumberish>,
      root: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    banMember(
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchSetLevels(
      _leaves: LibMemberLevel.LeafStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getMemberLevel(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMemberLevelStruct(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyAndSetLevel(
      _leaf: LibMemberLevel.LeafStruct,
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelVerify(
      username: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    finalizeRecovery(
      username: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUsernameAddressPair(
      username: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUsernameOwner(
      username: PromiseOrValue<string>[],
      userAddress: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUsernamePair(
      username: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    usernameRecovery(
      username: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verificationTime(overrides?: CallOverrides): Promise<BigNumber>;

    verifyAndUsername(
      _leaf: LibMemberRegistry.LeafStruct,
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getModeratorRank(
      _moderator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setModeratorRank(
      _moderator: PromiseOrValue<string>,
      _rank: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setModeratorRanks(
      _moderators: PromiseOrValue<string>[],
      _ranks: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ecosystemOwner(overrides?: CallOverrides): Promise<BigNumber>;

    isEcosystemOwnerVerify(
      _tenativeOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setEcosystemOwner(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchStake(
      user: PromiseOrValue<string>[],
      amount: PromiseOrValue<BigNumberish>[],
      tier: PromiseOrValue<BigNumberish>[],
      stakeIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fundStakeAccount(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getGasStakeFee(overrides?: CallOverrides): Promise<BigNumber>;

    setRewardRates(
      _stakeTier: PromiseOrValue<BigNumberish>[],
      _rewardRate: Stake.RewardRateStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      tier: PromiseOrValue<BigNumberish>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakeContract(
      staker: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      tier: PromiseOrValue<BigNumberish>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakeVirtual(
      staker: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      tier: PromiseOrValue<BigNumberish>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unstake(
      amount: PromiseOrValue<BigNumberish>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unstakeContract(
      staker: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unstakeVirtual(
      staker: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    viewMinimumStakeDurationLeft(
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewReward(
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    expireable(
      ticketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ticketCreate(
      _amount: PromiseOrValue<BigNumberish>,
      _ticketMeta: TicketCreate.TicketMetaStruct,
      _constraints: LibERC1155TransferConstraints.ConstraintsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ticketCreateBatch(
      _amount: PromiseOrValue<BigNumberish>[],
      _ticketMeta: TicketCreate.TicketMetaStruct[],
      _constraints: LibERC1155TransferConstraints.ConstraintsStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "balanceOf(address,uint256)"(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      from: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    burnBatch(
      from: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mint(
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintBatch(
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUri(
      _uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uri(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155Received(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    setCurrencyNames(
      _currencyName: PromiseOrValue<string>,
      _currencySymbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelMigration(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    diamondCut(
      _diamondCut: IDiamondCut.FacetCutStruct[],
      _init: PromiseOrValue<string>,
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initiateMigration(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    facetAddress(
      _functionSelector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facetAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    facetFunctionSelectors(
      _facet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    royaltyInfo(
      tokenId: PromiseOrValue<BigNumberish>,
      salePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createEvent(
      _startTime: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      _minEntries: PromiseOrValue<BigNumberish>,
      _maxEntries: PromiseOrValue<BigNumberish>,
      _imageUri: PromiseOrValue<string>,
      _ticketIds: PromiseOrValue<BigNumberish>[],
      _maxEntriesPerUser: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deactivateEvent(
      eventId: PromiseOrValue<BigNumberish>,
      root: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    extendEvent(
      eventId: PromiseOrValue<BigNumberish>,
      addedTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemTickets(
      eventId: PromiseOrValue<BigNumberish>,
      ticketIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    refundTicketsWithProof(
      eventId: PromiseOrValue<BigNumberish>,
      ticketIds: PromiseOrValue<BigNumberish>[],
      lowerBound: PromiseOrValue<string>,
      upperBound: PromiseOrValue<string>,
      merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setImageUri(
      eventId: PromiseOrValue<BigNumberish>,
      imageUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMerkleRoot(
      eventId: PromiseOrValue<BigNumberish>,
      root: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    banMember(
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchSetLevels(
      _leaves: LibMemberLevel.LeafStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getMemberLevel(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMemberLevelStruct(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyAndSetLevel(
      _leaf: LibMemberLevel.LeafStruct,
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelVerify(
      username: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    finalizeRecovery(
      username: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUsernameAddressPair(
      username: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUsernameOwner(
      username: PromiseOrValue<string>[],
      userAddress: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUsernamePair(
      username: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    usernameRecovery(
      username: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verificationTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verifyAndUsername(
      _leaf: LibMemberRegistry.LeafStruct,
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getModeratorRank(
      _moderator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setModeratorRank(
      _moderator: PromiseOrValue<string>,
      _rank: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setModeratorRanks(
      _moderators: PromiseOrValue<string>[],
      _ranks: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ecosystemOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isEcosystemOwnerVerify(
      _tenativeOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setEcosystemOwner(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchStake(
      user: PromiseOrValue<string>[],
      amount: PromiseOrValue<BigNumberish>[],
      tier: PromiseOrValue<BigNumberish>[],
      stakeIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fundStakeAccount(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getGasStakeFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setRewardRates(
      _stakeTier: PromiseOrValue<BigNumberish>[],
      _rewardRate: Stake.RewardRateStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      tier: PromiseOrValue<BigNumberish>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakeContract(
      staker: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      tier: PromiseOrValue<BigNumberish>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakeVirtual(
      staker: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      tier: PromiseOrValue<BigNumberish>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      amount: PromiseOrValue<BigNumberish>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unstakeContract(
      staker: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unstakeVirtual(
      staker: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    viewMinimumStakeDurationLeft(
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewReward(
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    expireable(
      ticketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ticketCreate(
      _amount: PromiseOrValue<BigNumberish>,
      _ticketMeta: TicketCreate.TicketMetaStruct,
      _constraints: LibERC1155TransferConstraints.ConstraintsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ticketCreateBatch(
      _amount: PromiseOrValue<BigNumberish>[],
      _ticketMeta: TicketCreate.TicketMetaStruct[],
      _constraints: LibERC1155TransferConstraints.ConstraintsStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "balanceOf(address,uint256)"(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      from: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    burnBatch(
      from: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mint(
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintBatch(
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUri(
      _uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uri(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCurrencyNames(
      _currencyName: PromiseOrValue<string>,
      _currencySymbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
