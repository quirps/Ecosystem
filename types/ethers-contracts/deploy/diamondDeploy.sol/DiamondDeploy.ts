/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface DiamondDeployInterface extends utils.Interface {
  functions: {
    "deploy(address,uint256,bytes,bytes)": FunctionFragment;
    "diamondCutFacet()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "deploy" | "diamondCutFacet"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deploy",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "diamondCutFacet",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "diamondCutFacet",
    data: BytesLike
  ): Result;

  events: {
    "NewDiamond(bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewDiamond"): EventFragment;
}

export interface NewDiamondEventObject {
  bytecode: string;
}
export type NewDiamondEvent = TypedEvent<[string], NewDiamondEventObject>;

export type NewDiamondEventFilter = TypedEventFilter<NewDiamondEvent>;

export interface DiamondDeploy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DiamondDeployInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deploy(
      owner: PromiseOrValue<string>,
      _salt: PromiseOrValue<BigNumberish>,
      _bytecode: PromiseOrValue<BytesLike>,
      _arguments: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    diamondCutFacet(overrides?: CallOverrides): Promise<[string]>;
  };

  deploy(
    owner: PromiseOrValue<string>,
    _salt: PromiseOrValue<BigNumberish>,
    _bytecode: PromiseOrValue<BytesLike>,
    _arguments: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  diamondCutFacet(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    deploy(
      owner: PromiseOrValue<string>,
      _salt: PromiseOrValue<BigNumberish>,
      _bytecode: PromiseOrValue<BytesLike>,
      _arguments: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    diamondCutFacet(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "NewDiamond(bytes)"(bytecode?: null): NewDiamondEventFilter;
    NewDiamond(bytecode?: null): NewDiamondEventFilter;
  };

  estimateGas: {
    deploy(
      owner: PromiseOrValue<string>,
      _salt: PromiseOrValue<BigNumberish>,
      _bytecode: PromiseOrValue<BytesLike>,
      _arguments: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    diamondCutFacet(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    deploy(
      owner: PromiseOrValue<string>,
      _salt: PromiseOrValue<BigNumberish>,
      _bytecode: PromiseOrValue<BytesLike>,
      _arguments: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    diamondCutFacet(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
