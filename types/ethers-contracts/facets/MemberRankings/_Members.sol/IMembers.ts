/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IMembersInterface extends utils.Interface {
  functions: {
    "bountyAddress()": FunctionFragment;
    "currencyId()": FunctionFragment;
    "downRate()": FunctionFragment;
    "maxBalance()": FunctionFragment;
    "upRate()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bountyAddress"
      | "currencyId"
      | "downRate"
      | "maxBalance"
      | "upRate"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bountyAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currencyId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "downRate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "upRate", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "bountyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "currencyId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "downRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upRate", data: BytesLike): Result;

  events: {
    "ApprovalForAll(address,address,bool)": EventFragment;
    "BountyBalanceChange(uint256,uint8)": EventFragment;
    "BountyEvent(address,uint256,uint256,uint256,uint256)": EventFragment;
    "MigrationCancelled(address,uint32)": EventFragment;
    "MigrationInitiated(address,uint32)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BountyBalanceChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BountyEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MigrationCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MigrationInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
}

export interface ApprovalForAllEventObject {
  account: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface BountyBalanceChangeEventObject {
  amount: BigNumber;
  direction: number;
}
export type BountyBalanceChangeEvent = TypedEvent<
  [BigNumber, number],
  BountyBalanceChangeEventObject
>;

export type BountyBalanceChangeEventFilter =
  TypedEventFilter<BountyBalanceChangeEvent>;

export interface BountyEventEventObject {
  receiver: string;
  bountyUp: BigNumber;
  bountyUpRate: BigNumber;
  bountiesDown: BigNumber;
  bountyDownRate: BigNumber;
}
export type BountyEventEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  BountyEventEventObject
>;

export type BountyEventEventFilter = TypedEventFilter<BountyEventEvent>;

export interface MigrationCancelledEventObject {
  cancellor: string;
  timeCancelled: number;
}
export type MigrationCancelledEvent = TypedEvent<
  [string, number],
  MigrationCancelledEventObject
>;

export type MigrationCancelledEventFilter =
  TypedEventFilter<MigrationCancelledEvent>;

export interface MigrationInitiatedEventObject {
  initiatior: string;
  timeInitiatied: number;
}
export type MigrationInitiatedEvent = TypedEvent<
  [string, number],
  MigrationInitiatedEventObject
>;

export type MigrationInitiatedEventFilter =
  TypedEventFilter<MigrationInitiatedEvent>;

export interface TransferBatchEventObject {
  operator: string;
  from: string;
  to: string;
  ids: BigNumber[];
  values: BigNumber[];
}
export type TransferBatchEvent = TypedEvent<
  [string, string, string, BigNumber[], BigNumber[]],
  TransferBatchEventObject
>;

export type TransferBatchEventFilter = TypedEventFilter<TransferBatchEvent>;

export interface TransferSingleEventObject {
  operator: string;
  from: string;
  to: string;
  id: BigNumber;
  value: BigNumber;
}
export type TransferSingleEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  TransferSingleEventObject
>;

export type TransferSingleEventFilter = TypedEventFilter<TransferSingleEvent>;

export interface IMembers extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMembersInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bountyAddress(overrides?: CallOverrides): Promise<[string]>;

    currencyId(overrides?: CallOverrides): Promise<[BigNumber]>;

    downRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    upRate(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  bountyAddress(overrides?: CallOverrides): Promise<string>;

  currencyId(overrides?: CallOverrides): Promise<BigNumber>;

  downRate(overrides?: CallOverrides): Promise<BigNumber>;

  maxBalance(overrides?: CallOverrides): Promise<BigNumber>;

  upRate(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    bountyAddress(overrides?: CallOverrides): Promise<string>;

    currencyId(overrides?: CallOverrides): Promise<BigNumber>;

    downRate(overrides?: CallOverrides): Promise<BigNumber>;

    maxBalance(overrides?: CallOverrides): Promise<BigNumber>;

    upRate(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "ApprovalForAll(address,address,bool)"(
      account?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      account?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "BountyBalanceChange(uint256,uint8)"(
      amount?: null,
      direction?: null
    ): BountyBalanceChangeEventFilter;
    BountyBalanceChange(
      amount?: null,
      direction?: null
    ): BountyBalanceChangeEventFilter;

    "BountyEvent(address,uint256,uint256,uint256,uint256)"(
      receiver?: null,
      bountyUp?: null,
      bountyUpRate?: null,
      bountiesDown?: null,
      bountyDownRate?: null
    ): BountyEventEventFilter;
    BountyEvent(
      receiver?: null,
      bountyUp?: null,
      bountyUpRate?: null,
      bountiesDown?: null,
      bountyDownRate?: null
    ): BountyEventEventFilter;

    "MigrationCancelled(address,uint32)"(
      cancellor?: null,
      timeCancelled?: null
    ): MigrationCancelledEventFilter;
    MigrationCancelled(
      cancellor?: null,
      timeCancelled?: null
    ): MigrationCancelledEventFilter;

    "MigrationInitiated(address,uint32)"(
      initiatior?: null,
      timeInitiatied?: null
    ): MigrationInitiatedEventFilter;
    MigrationInitiated(
      initiatior?: null,
      timeInitiatied?: null
    ): MigrationInitiatedEventFilter;

    "TransferBatch(address,address,address,uint256[],uint256[])"(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;
    TransferBatch(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;

    "TransferSingle(address,address,address,uint256,uint256)"(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;
    TransferSingle(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;
  };

  estimateGas: {
    bountyAddress(overrides?: CallOverrides): Promise<BigNumber>;

    currencyId(overrides?: CallOverrides): Promise<BigNumber>;

    downRate(overrides?: CallOverrides): Promise<BigNumber>;

    maxBalance(overrides?: CallOverrides): Promise<BigNumber>;

    upRate(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    bountyAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currencyId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    downRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
