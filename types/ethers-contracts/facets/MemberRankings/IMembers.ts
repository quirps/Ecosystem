/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace LibMembers {
  export type MemberRankStruct = {
    timestamp: PromiseOrValue<BigNumberish>;
    rank: PromiseOrValue<BigNumberish>;
  };

  export type MemberRankStructOutput = [number, number] & {
    timestamp: number;
    rank: number;
  };

  export type LeafStruct = {
    memberAddress: PromiseOrValue<string>;
    memberRank: LibMembers.MemberRankStruct;
  };

  export type LeafStructOutput = [string, LibMembers.MemberRankStructOutput] & {
    memberAddress: string;
    memberRank: LibMembers.MemberRankStructOutput;
  };
}

export interface IMembersInterface extends utils.Interface {
  functions: {
    "addBountyBalance(uint256)": FunctionFragment;
    "getRank(address)": FunctionFragment;
    "getUserRankHistory(address,uint64)": FunctionFragment;
    "removeBountyBalance(uint256)": FunctionFragment;
    "setMembersRankPermissioned((address,(uint32,uint32))[])": FunctionFragment;
    "setMembersRanks(uint8,bytes32,bytes32,address,uint256,(address,(uint32,uint32)))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addBountyBalance"
      | "getRank"
      | "getUserRankHistory"
      | "removeBountyBalance"
      | "setMembersRankPermissioned"
      | "setMembersRanks"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addBountyBalance",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRank",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRankHistory",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeBountyBalance",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMembersRankPermissioned",
    values: [LibMembers.LeafStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setMembersRanks",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      LibMembers.LeafStruct
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "addBountyBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRank", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserRankHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeBountyBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMembersRankPermissioned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMembersRanks",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IMembers extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMembersInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addBountyBalance(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getRank(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getUserRankHistory(
      user: PromiseOrValue<string>,
      depth: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeBountyBalance(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMembersRankPermissioned(
      leaves: LibMembers.LeafStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMembersRanks(
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      owner: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      leaves: LibMembers.LeafStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addBountyBalance(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getRank(
    user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getUserRankHistory(
    user: PromiseOrValue<string>,
    depth: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeBountyBalance(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMembersRankPermissioned(
    leaves: LibMembers.LeafStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMembersRanks(
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    owner: PromiseOrValue<string>,
    nonce: PromiseOrValue<BigNumberish>,
    leaves: LibMembers.LeafStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addBountyBalance(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getRank(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    getUserRankHistory(
      user: PromiseOrValue<string>,
      depth: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<LibMembers.MemberRankStructOutput[]>;

    removeBountyBalance(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMembersRankPermissioned(
      leaves: LibMembers.LeafStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setMembersRanks(
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      owner: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      leaves: LibMembers.LeafStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addBountyBalance(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getRank(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getUserRankHistory(
      user: PromiseOrValue<string>,
      depth: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeBountyBalance(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMembersRankPermissioned(
      leaves: LibMembers.LeafStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMembersRanks(
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      owner: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      leaves: LibMembers.LeafStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addBountyBalance(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getRank(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getUserRankHistory(
      user: PromiseOrValue<string>,
      depth: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeBountyBalance(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMembersRankPermissioned(
      leaves: LibMembers.LeafStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMembersRanks(
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      owner: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      leaves: LibMembers.LeafStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
