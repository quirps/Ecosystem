/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IEventFactoryInterface extends utils.Interface {
  functions: {};

  events: {
    "ApprovalForAll(address,address,bool)": EventFragment;
    "EventActivated(uint256)": EventFragment;
    "EventDeactivated(uint256)": EventFragment;
    "EventDetails(uint256,uint32,uint32,uint256,uint256,string,uint256,uint8)": EventFragment;
    "EventExtended(uint256,uint32)": EventFragment;
    "ImageUriUpdated(uint256,string)": EventFragment;
    "MigrationCancelled(address,uint32)": EventFragment;
    "MigrationInitiated(address,uint32)": EventFragment;
    "OwnershipChanged(address,address)": EventFragment;
    "RefundsEnabled(uint256,bytes32)": EventFragment;
    "TicketDetails(uint256,uint256[])": EventFragment;
    "TicketRedeemed(uint256,uint256[],uint256[])": EventFragment;
    "TicketRefunded(uint256,uint256,uint256)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventDeactivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventDetails"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventExtended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ImageUriUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MigrationCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MigrationInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RefundsEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TicketDetails"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TicketRedeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TicketRefunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
}

export interface ApprovalForAllEventObject {
  account: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface EventActivatedEventObject {
  eventId: BigNumber;
}
export type EventActivatedEvent = TypedEvent<
  [BigNumber],
  EventActivatedEventObject
>;

export type EventActivatedEventFilter = TypedEventFilter<EventActivatedEvent>;

export interface EventDeactivatedEventObject {
  eventId: BigNumber;
}
export type EventDeactivatedEvent = TypedEvent<
  [BigNumber],
  EventDeactivatedEventObject
>;

export type EventDeactivatedEventFilter =
  TypedEventFilter<EventDeactivatedEvent>;

export interface EventDetailsEventObject {
  eventId: BigNumber;
  startTime: number;
  endTime: number;
  minEntries: BigNumber;
  maxEntries: BigNumber;
  imageUri: string;
  maxEntriesPerUser: BigNumber;
  status: number;
}
export type EventDetailsEvent = TypedEvent<
  [BigNumber, number, number, BigNumber, BigNumber, string, BigNumber, number],
  EventDetailsEventObject
>;

export type EventDetailsEventFilter = TypedEventFilter<EventDetailsEvent>;

export interface EventExtendedEventObject {
  eventId: BigNumber;
  addedTime: number;
}
export type EventExtendedEvent = TypedEvent<
  [BigNumber, number],
  EventExtendedEventObject
>;

export type EventExtendedEventFilter = TypedEventFilter<EventExtendedEvent>;

export interface ImageUriUpdatedEventObject {
  eventId: BigNumber;
  imageUri: string;
}
export type ImageUriUpdatedEvent = TypedEvent<
  [BigNumber, string],
  ImageUriUpdatedEventObject
>;

export type ImageUriUpdatedEventFilter = TypedEventFilter<ImageUriUpdatedEvent>;

export interface MigrationCancelledEventObject {
  cancellor: string;
  timeCancelled: number;
}
export type MigrationCancelledEvent = TypedEvent<
  [string, number],
  MigrationCancelledEventObject
>;

export type MigrationCancelledEventFilter =
  TypedEventFilter<MigrationCancelledEvent>;

export interface MigrationInitiatedEventObject {
  initiatior: string;
  timeInitiatied: number;
}
export type MigrationInitiatedEvent = TypedEvent<
  [string, number],
  MigrationInitiatedEventObject
>;

export type MigrationInitiatedEventFilter =
  TypedEventFilter<MigrationInitiatedEvent>;

export interface OwnershipChangedEventObject {
  oldOwner: string;
  newOwner: string;
}
export type OwnershipChangedEvent = TypedEvent<
  [string, string],
  OwnershipChangedEventObject
>;

export type OwnershipChangedEventFilter =
  TypedEventFilter<OwnershipChangedEvent>;

export interface RefundsEnabledEventObject {
  eventId: BigNumber;
  merkleRoot: string;
}
export type RefundsEnabledEvent = TypedEvent<
  [BigNumber, string],
  RefundsEnabledEventObject
>;

export type RefundsEnabledEventFilter = TypedEventFilter<RefundsEnabledEvent>;

export interface TicketDetailsEventObject {
  eventId: BigNumber;
  ticketIds: BigNumber[];
}
export type TicketDetailsEvent = TypedEvent<
  [BigNumber, BigNumber[]],
  TicketDetailsEventObject
>;

export type TicketDetailsEventFilter = TypedEventFilter<TicketDetailsEvent>;

export interface TicketRedeemedEventObject {
  eventId: BigNumber;
  ticketIds: BigNumber[];
  amounts: BigNumber[];
}
export type TicketRedeemedEvent = TypedEvent<
  [BigNumber, BigNumber[], BigNumber[]],
  TicketRedeemedEventObject
>;

export type TicketRedeemedEventFilter = TypedEventFilter<TicketRedeemedEvent>;

export interface TicketRefundedEventObject {
  eventId: BigNumber;
  ticketId: BigNumber;
  amount: BigNumber;
}
export type TicketRefundedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  TicketRefundedEventObject
>;

export type TicketRefundedEventFilter = TypedEventFilter<TicketRefundedEvent>;

export interface TransferBatchEventObject {
  operator: string;
  from: string;
  to: string;
  ids: BigNumber[];
  values: BigNumber[];
}
export type TransferBatchEvent = TypedEvent<
  [string, string, string, BigNumber[], BigNumber[]],
  TransferBatchEventObject
>;

export type TransferBatchEventFilter = TypedEventFilter<TransferBatchEvent>;

export interface TransferSingleEventObject {
  operator: string;
  from: string;
  to: string;
  id: BigNumber;
  value: BigNumber;
}
export type TransferSingleEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  TransferSingleEventObject
>;

export type TransferSingleEventFilter = TypedEventFilter<TransferSingleEvent>;

export interface IEventFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IEventFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "ApprovalForAll(address,address,bool)"(
      account?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      account?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "EventActivated(uint256)"(eventId?: null): EventActivatedEventFilter;
    EventActivated(eventId?: null): EventActivatedEventFilter;

    "EventDeactivated(uint256)"(eventId?: null): EventDeactivatedEventFilter;
    EventDeactivated(eventId?: null): EventDeactivatedEventFilter;

    "EventDetails(uint256,uint32,uint32,uint256,uint256,string,uint256,uint8)"(
      eventId?: null,
      startTime?: null,
      endTime?: null,
      minEntries?: null,
      maxEntries?: null,
      imageUri?: null,
      maxEntriesPerUser?: null,
      status?: null
    ): EventDetailsEventFilter;
    EventDetails(
      eventId?: null,
      startTime?: null,
      endTime?: null,
      minEntries?: null,
      maxEntries?: null,
      imageUri?: null,
      maxEntriesPerUser?: null,
      status?: null
    ): EventDetailsEventFilter;

    "EventExtended(uint256,uint32)"(
      eventId?: null,
      addedTime?: null
    ): EventExtendedEventFilter;
    EventExtended(eventId?: null, addedTime?: null): EventExtendedEventFilter;

    "ImageUriUpdated(uint256,string)"(
      eventId?: null,
      imageUri?: null
    ): ImageUriUpdatedEventFilter;
    ImageUriUpdated(
      eventId?: null,
      imageUri?: null
    ): ImageUriUpdatedEventFilter;

    "MigrationCancelled(address,uint32)"(
      cancellor?: null,
      timeCancelled?: null
    ): MigrationCancelledEventFilter;
    MigrationCancelled(
      cancellor?: null,
      timeCancelled?: null
    ): MigrationCancelledEventFilter;

    "MigrationInitiated(address,uint32)"(
      initiatior?: null,
      timeInitiatied?: null
    ): MigrationInitiatedEventFilter;
    MigrationInitiated(
      initiatior?: null,
      timeInitiatied?: null
    ): MigrationInitiatedEventFilter;

    "OwnershipChanged(address,address)"(
      oldOwner?: null,
      newOwner?: null
    ): OwnershipChangedEventFilter;
    OwnershipChanged(
      oldOwner?: null,
      newOwner?: null
    ): OwnershipChangedEventFilter;

    "RefundsEnabled(uint256,bytes32)"(
      eventId?: null,
      merkleRoot?: null
    ): RefundsEnabledEventFilter;
    RefundsEnabled(
      eventId?: null,
      merkleRoot?: null
    ): RefundsEnabledEventFilter;

    "TicketDetails(uint256,uint256[])"(
      eventId?: null,
      ticketIds?: null
    ): TicketDetailsEventFilter;
    TicketDetails(eventId?: null, ticketIds?: null): TicketDetailsEventFilter;

    "TicketRedeemed(uint256,uint256[],uint256[])"(
      eventId?: null,
      ticketIds?: null,
      amounts?: null
    ): TicketRedeemedEventFilter;
    TicketRedeemed(
      eventId?: null,
      ticketIds?: null,
      amounts?: null
    ): TicketRedeemedEventFilter;

    "TicketRefunded(uint256,uint256,uint256)"(
      eventId?: null,
      ticketId?: null,
      amount?: null
    ): TicketRefundedEventFilter;
    TicketRefunded(
      eventId?: null,
      ticketId?: null,
      amount?: null
    ): TicketRefundedEventFilter;

    "TransferBatch(address,address,address,uint256[],uint256[])"(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;
    TransferBatch(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;

    "TransferSingle(address,address,address,uint256,uint256)"(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;
    TransferSingle(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
