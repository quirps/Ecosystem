/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace TicketCreate {
  export type TicketMetaStruct = {
    title: PromiseOrValue<string>;
    description: PromiseOrValue<string>;
  };

  export type TicketMetaStructOutput = [string, string] & {
    title: string;
    description: string;
  };
}

export declare namespace LibERC1155TransferConstraints {
  export type TransferLimitStruct = {
    maxTransfers: PromiseOrValue<BigNumberish>;
    isActive: PromiseOrValue<boolean>;
  };

  export type TransferLimitStructOutput = [BigNumber, boolean] & {
    maxTransfers: BigNumber;
    isActive: boolean;
  };

  export type MemberRankDependencyStruct = {
    minimumRank: PromiseOrValue<BigNumberish>;
    isActive: PromiseOrValue<boolean>;
  };

  export type MemberRankDependencyStructOutput = [number, boolean] & {
    minimumRank: number;
    isActive: boolean;
  };

  export type ExpireableStruct = {
    expireTime: PromiseOrValue<BigNumberish>;
    isActive: PromiseOrValue<boolean>;
  };

  export type ExpireableStructOutput = [number, boolean] & {
    expireTime: number;
    isActive: boolean;
  };

  export type ConstraintsStruct = {
    transferLimit: LibERC1155TransferConstraints.TransferLimitStruct;
    memberRankDependency: LibERC1155TransferConstraints.MemberRankDependencyStruct;
    expireable: LibERC1155TransferConstraints.ExpireableStruct;
  };

  export type ConstraintsStructOutput = [
    LibERC1155TransferConstraints.TransferLimitStructOutput,
    LibERC1155TransferConstraints.MemberRankDependencyStructOutput,
    LibERC1155TransferConstraints.ExpireableStructOutput
  ] & {
    transferLimit: LibERC1155TransferConstraints.TransferLimitStructOutput;
    memberRankDependency: LibERC1155TransferConstraints.MemberRankDependencyStructOutput;
    expireable: LibERC1155TransferConstraints.ExpireableStructOutput;
  };
}

export interface TicketCreateInterface extends utils.Interface {
  functions: {
    "setExpireable(uint256)": FunctionFragment;
    "ticketCreate(uint192,(string,string),((uint256,bool),(uint32,bool),(uint32,bool)))": FunctionFragment;
    "ticketCreateBatch(uint192[],(string,string)[],((uint256,bool),(uint32,bool),(uint32,bool))[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "setExpireable"
      | "ticketCreate"
      | "ticketCreateBatch"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "setExpireable",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "ticketCreate",
    values: [
      PromiseOrValue<BigNumberish>,
      TicketCreate.TicketMetaStruct,
      LibERC1155TransferConstraints.ConstraintsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ticketCreateBatch",
    values: [
      PromiseOrValue<BigNumberish>[],
      TicketCreate.TicketMetaStruct[],
      LibERC1155TransferConstraints.ConstraintsStruct[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "setExpireable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ticketCreate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ticketCreateBatch",
    data: BytesLike
  ): Result;

  events: {
    "MigrationCancelled(address,uint32)": EventFragment;
    "MigrationInitiated(address,uint32)": EventFragment;
    "TicketsCreated(uint256,uint192,tuple)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MigrationCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MigrationInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TicketsCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
}

export interface MigrationCancelledEventObject {
  cancellor: string;
  timeCancelled: number;
}
export type MigrationCancelledEvent = TypedEvent<
  [string, number],
  MigrationCancelledEventObject
>;

export type MigrationCancelledEventFilter =
  TypedEventFilter<MigrationCancelledEvent>;

export interface MigrationInitiatedEventObject {
  initiatior: string;
  timeInitiatied: number;
}
export type MigrationInitiatedEvent = TypedEvent<
  [string, number],
  MigrationInitiatedEventObject
>;

export type MigrationInitiatedEventFilter =
  TypedEventFilter<MigrationInitiatedEvent>;

export interface TicketsCreatedEventObject {
  arg0: BigNumber;
  arg1: BigNumber;
  arg2: TicketCreate.TicketMetaStructOutput;
}
export type TicketsCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, TicketCreate.TicketMetaStructOutput],
  TicketsCreatedEventObject
>;

export type TicketsCreatedEventFilter = TypedEventFilter<TicketsCreatedEvent>;

export interface TransferBatchEventObject {
  operator: string;
  from: string;
  to: string;
  ids: BigNumber[];
  values: BigNumber[];
}
export type TransferBatchEvent = TypedEvent<
  [string, string, string, BigNumber[], BigNumber[]],
  TransferBatchEventObject
>;

export type TransferBatchEventFilter = TypedEventFilter<TransferBatchEvent>;

export interface TransferSingleEventObject {
  operator: string;
  from: string;
  to: string;
  id: BigNumber;
  value: BigNumber;
}
export type TransferSingleEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  TransferSingleEventObject
>;

export type TransferSingleEventFilter = TypedEventFilter<TransferSingleEvent>;

export interface TicketCreate extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TicketCreateInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    setExpireable(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ticketCreate(
      _amount: PromiseOrValue<BigNumberish>,
      _ticketMeta: TicketCreate.TicketMetaStruct,
      _constraints: LibERC1155TransferConstraints.ConstraintsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ticketCreateBatch(
      _amount: PromiseOrValue<BigNumberish>[],
      _ticketMeta: TicketCreate.TicketMetaStruct[],
      _constraints: LibERC1155TransferConstraints.ConstraintsStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  setExpireable(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ticketCreate(
    _amount: PromiseOrValue<BigNumberish>,
    _ticketMeta: TicketCreate.TicketMetaStruct,
    _constraints: LibERC1155TransferConstraints.ConstraintsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ticketCreateBatch(
    _amount: PromiseOrValue<BigNumberish>[],
    _ticketMeta: TicketCreate.TicketMetaStruct[],
    _constraints: LibERC1155TransferConstraints.ConstraintsStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    setExpireable(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    ticketCreate(
      _amount: PromiseOrValue<BigNumberish>,
      _ticketMeta: TicketCreate.TicketMetaStruct,
      _constraints: LibERC1155TransferConstraints.ConstraintsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    ticketCreateBatch(
      _amount: PromiseOrValue<BigNumberish>[],
      _ticketMeta: TicketCreate.TicketMetaStruct[],
      _constraints: LibERC1155TransferConstraints.ConstraintsStruct[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "MigrationCancelled(address,uint32)"(
      cancellor?: null,
      timeCancelled?: null
    ): MigrationCancelledEventFilter;
    MigrationCancelled(
      cancellor?: null,
      timeCancelled?: null
    ): MigrationCancelledEventFilter;

    "MigrationInitiated(address,uint32)"(
      initiatior?: null,
      timeInitiatied?: null
    ): MigrationInitiatedEventFilter;
    MigrationInitiated(
      initiatior?: null,
      timeInitiatied?: null
    ): MigrationInitiatedEventFilter;

    "TicketsCreated(uint256,uint192,tuple)"(
      arg0?: null,
      arg1?: null,
      arg2?: null
    ): TicketsCreatedEventFilter;
    TicketsCreated(
      arg0?: null,
      arg1?: null,
      arg2?: null
    ): TicketsCreatedEventFilter;

    "TransferBatch(address,address,address,uint256[],uint256[])"(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;
    TransferBatch(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;

    "TransferSingle(address,address,address,uint256,uint256)"(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;
    TransferSingle(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;
  };

  estimateGas: {
    setExpireable(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ticketCreate(
      _amount: PromiseOrValue<BigNumberish>,
      _ticketMeta: TicketCreate.TicketMetaStruct,
      _constraints: LibERC1155TransferConstraints.ConstraintsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ticketCreateBatch(
      _amount: PromiseOrValue<BigNumberish>[],
      _ticketMeta: TicketCreate.TicketMetaStruct[],
      _constraints: LibERC1155TransferConstraints.ConstraintsStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    setExpireable(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ticketCreate(
      _amount: PromiseOrValue<BigNumberish>,
      _ticketMeta: TicketCreate.TicketMetaStruct,
      _constraints: LibERC1155TransferConstraints.ConstraintsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ticketCreateBatch(
      _amount: PromiseOrValue<BigNumberish>[],
      _ticketMeta: TicketCreate.TicketMetaStruct[],
      _constraints: LibERC1155TransferConstraints.ConstraintsStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
