/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace LibMemberLevel {
  export type LeafStruct = {
    memberAddress: PromiseOrValue<string>;
    level: PromiseOrValue<BigNumberish>;
    timestamp: PromiseOrValue<BigNumberish>;
  };

  export type LeafStructOutput = [string, number, number] & {
    memberAddress: string;
    level: number;
    timestamp: number;
  };
}

export interface ITransferSetConstraintsInterface extends utils.Interface {
  functions: {
    "expireable(uint256)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "expireable"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "expireable",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "expireable", data: BytesLike): Result;

  events: {
    "MemberBanned(address,uint32)": EventFragment;
    "MemberLevelUpdated(tuple)": EventFragment;
    "MerkleRootUpdated(bytes32)": EventFragment;
    "MigrationCancelled(address,uint32)": EventFragment;
    "MigrationInitiated(address,uint32)": EventFragment;
    "OwnershipChanged(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MemberBanned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MemberLevelUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MerkleRootUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MigrationCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MigrationInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipChanged"): EventFragment;
}

export interface MemberBannedEventObject {
  user: string;
  timestamp: number;
}
export type MemberBannedEvent = TypedEvent<
  [string, number],
  MemberBannedEventObject
>;

export type MemberBannedEventFilter = TypedEventFilter<MemberBannedEvent>;

export interface MemberLevelUpdatedEventObject {
  leaf: LibMemberLevel.LeafStructOutput;
}
export type MemberLevelUpdatedEvent = TypedEvent<
  [LibMemberLevel.LeafStructOutput],
  MemberLevelUpdatedEventObject
>;

export type MemberLevelUpdatedEventFilter =
  TypedEventFilter<MemberLevelUpdatedEvent>;

export interface MerkleRootUpdatedEventObject {
  newRoot: string;
}
export type MerkleRootUpdatedEvent = TypedEvent<
  [string],
  MerkleRootUpdatedEventObject
>;

export type MerkleRootUpdatedEventFilter =
  TypedEventFilter<MerkleRootUpdatedEvent>;

export interface MigrationCancelledEventObject {
  cancellor: string;
  timeCancelled: number;
}
export type MigrationCancelledEvent = TypedEvent<
  [string, number],
  MigrationCancelledEventObject
>;

export type MigrationCancelledEventFilter =
  TypedEventFilter<MigrationCancelledEvent>;

export interface MigrationInitiatedEventObject {
  initiatior: string;
  timeInitiatied: number;
}
export type MigrationInitiatedEvent = TypedEvent<
  [string, number],
  MigrationInitiatedEventObject
>;

export type MigrationInitiatedEventFilter =
  TypedEventFilter<MigrationInitiatedEvent>;

export interface OwnershipChangedEventObject {
  oldOwner: string;
  newOwner: string;
}
export type OwnershipChangedEvent = TypedEvent<
  [string, string],
  OwnershipChangedEventObject
>;

export type OwnershipChangedEventFilter =
  TypedEventFilter<OwnershipChangedEvent>;

export interface ITransferSetConstraints extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITransferSetConstraintsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    expireable(
      ticketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  expireable(
    ticketId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    expireable(
      ticketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "MemberBanned(address,uint32)"(
      user?: PromiseOrValue<string> | null,
      timestamp?: null
    ): MemberBannedEventFilter;
    MemberBanned(
      user?: PromiseOrValue<string> | null,
      timestamp?: null
    ): MemberBannedEventFilter;

    "MemberLevelUpdated(tuple)"(leaf?: null): MemberLevelUpdatedEventFilter;
    MemberLevelUpdated(leaf?: null): MemberLevelUpdatedEventFilter;

    "MerkleRootUpdated(bytes32)"(newRoot?: null): MerkleRootUpdatedEventFilter;
    MerkleRootUpdated(newRoot?: null): MerkleRootUpdatedEventFilter;

    "MigrationCancelled(address,uint32)"(
      cancellor?: null,
      timeCancelled?: null
    ): MigrationCancelledEventFilter;
    MigrationCancelled(
      cancellor?: null,
      timeCancelled?: null
    ): MigrationCancelledEventFilter;

    "MigrationInitiated(address,uint32)"(
      initiatior?: null,
      timeInitiatied?: null
    ): MigrationInitiatedEventFilter;
    MigrationInitiated(
      initiatior?: null,
      timeInitiatied?: null
    ): MigrationInitiatedEventFilter;

    "OwnershipChanged(address,address)"(
      oldOwner?: null,
      newOwner?: null
    ): OwnershipChangedEventFilter;
    OwnershipChanged(
      oldOwner?: null,
      newOwner?: null
    ): OwnershipChangedEventFilter;
  };

  estimateGas: {
    expireable(
      ticketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    expireable(
      ticketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
