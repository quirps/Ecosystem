{
  "address": "0xE56065C8D3D1eDC4d00bF2c48d8417c6E7c67CA8",
  "abi": [
    {
      "inputs": [],
      "name": "MigrationAlreadyCompleted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MigrationAlreadyInitiated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MigrationNotInitiated",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "cancellor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "timeCancelled",
          "type": "uint32"
        }
      ],
      "name": "MigrationCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "initiatior",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "timeInitiatied",
          "type": "uint32"
        }
      ],
      "name": "MigrationInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "username",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum LibMemberRegistry.RecoveryStatus",
          "name": "recoveryStatus",
          "type": "uint8"
        }
      ],
      "name": "RecoveryAction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "username",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "UserRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "username",
          "type": "string[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "userAddress",
          "type": "address[]"
        }
      ],
      "name": "UsersRegistered",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "username",
          "type": "string"
        }
      ],
      "name": "cancelVerify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "username",
          "type": "string"
        }
      ],
      "name": "finalizeRecovery",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "username",
          "type": "string"
        }
      ],
      "name": "setUsernameAddressPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "username",
          "type": "string[]"
        },
        {
          "internalType": "address[]",
          "name": "userAddress",
          "type": "address[]"
        }
      ],
      "name": "setUsernameOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "username",
          "type": "string"
        }
      ],
      "name": "setUsernamePair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "username",
          "type": "string"
        }
      ],
      "name": "usernameRecovery",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verificationTime",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "username",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "userAddress",
              "type": "address"
            }
          ],
          "internalType": "struct LibMemberRegistry.Leaf",
          "name": "_leaf",
          "type": "tuple"
        },
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "verifyAndUsername",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf6f0f7ea43318d5fed0cad052b64ecc5c7479975b3cc9cd454705c39f389bee0",
  "receipt": {
    "to": null,
    "from": "0x1a47C1D6d5B47048536f1111C854e48fA9D76fdF",
    "contractAddress": "0xE56065C8D3D1eDC4d00bF2c48d8417c6E7c67CA8",
    "transactionIndex": 0,
    "gasUsed": "950840",
    "logsBloom": "0x
    "blockHash": "0x79e7670baf8883a254bbf8ee2d9871e31697927c7d08f946b33f467cae266192",
    "transactionHash": "0xf6f0f7ea43318d5fed0cad052b64ecc5c7479975b3cc9cd454705c39f389bee0",
    "logs": [],
    "blockNumber": 19,
    "cumulativeGasUsed": "950840",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "54a7063fbd1377e55e2032f74c4aa199",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MigrationAlreadyCompleted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MigrationAlreadyInitiated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MigrationNotInitiated\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cancellor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"timeCancelled\",\"type\":\"uint32\"}],\"name\":\"MigrationCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initiatior\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"timeInitiatied\",\"type\":\"uint32\"}],\"name\":\"MigrationInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum LibMemberRegistry.RecoveryStatus\",\"name\":\"recoveryStatus\",\"type\":\"uint8\"}],\"name\":\"RecoveryAction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"UserRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"username\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"userAddress\",\"type\":\"address[]\"}],\"name\":\"UsersRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"}],\"name\":\"cancelVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"}],\"name\":\"finalizeRecovery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"}],\"name\":\"setUsernameAddressPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"username\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"userAddress\",\"type\":\"address[]\"}],\"name\":\"setUsernameOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"}],\"name\":\"setUsernamePair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"}],\"name\":\"usernameRecovery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verificationTime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"internalType\":\"struct LibMemberRegistry.Leaf\",\"name\":\"_leaf\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"verifyAndUsername\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RecoveryAction(string,address,uint8)\":{\"details\":\"Emitted when a recovery action is initiated or finalized\",\"params\":{\"recoveryStatus\":\"The status of the recovery action\",\"userAddress\":\"The user's address\",\"username\":\"The username associated with the action\"}},\"UserRegistered(string,address)\":{\"details\":\"Emitted when a user is successfully registered\",\"params\":{\"userAddress\":\"The user's address\",\"username\":\"The registered username\"}}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/MemberRegistry/MemberRegistry.sol\":\"MemberRegistry\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/facets/ERC2771Recipient/LibERC2771Recipient.sol\":{\"content\":\"// LibEventStorage.sol\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n\\r\\nlibrary LibERC2771Recipient {\\r\\n    bytes32 constant STORAGE_POSITION = keccak256(\\\"diamond.storage.ERC2771Recipient\\\");\\r\\n\\r\\n   \\r\\n    struct ERC2771RecipientStorage {\\r\\n        address trustedForwarder;\\r\\n    }\\r\\n\\r\\n    function erc2771RecipientStorage() internal pure returns ( ERC2771RecipientStorage storage es) {\\r\\n        bytes32 position = STORAGE_POSITION;\\r\\n        assembly {\\r\\n            es.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n   function __getTrustedForwarder() internal  view returns (address trustedForwarder_){\\r\\n       ERC2771RecipientStorage storage es =  erc2771RecipientStorage();\\r\\n        trustedForwarder_ =  es.trustedForwarder;\\r\\n    }\\r\\n\\r\\n    function __setTrustedForwarder(address _forwarder) internal {\\r\\n        ERC2771RecipientStorage storage es =  erc2771RecipientStorage();\\r\\n        es.trustedForwarder = _forwarder; \\r\\n    }\\r\\n \\r\\n  \\r\\n    function _isTrustedForwarder(address forwarder) public  view returns(bool) {\\r\\n        ERC2771RecipientStorage storage es =  erc2771RecipientStorage();\\r\\n        return forwarder == es.trustedForwarder;\\r\\n    }\\r\\n \\r\\n    \\r\\n    function _msgSender() internal  view returns (address ret) {\\r\\n        if (msg.data.length >= 20 && _isTrustedForwarder(msg.sender)) {\\r\\n            // At this point we know that the sender is a trusted forwarder,\\r\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\r\\n            // extract sender address from the end of msg.data\\r\\n            assembly {\\r\\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\\r\\n            }\\r\\n        } else {\\r\\n            ret = msg.sender;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    \\r\\n    function _msgData() internal  view returns (bytes calldata ret) {\\r\\n        if (msg.data.length >= 20 && _isTrustedForwarder(msg.sender)) {\\r\\n            return msg.data[0:msg.data.length-20];\\r\\n        } else {\\r\\n            return msg.data;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6ff10e2f12c8a61f2ae6ff642711976888a210d309d0e03885193162664330cb\"},\"contracts/facets/ERC2771Recipient/_ERC2771Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// solhint-disable no-inline-assembly\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\n\\r\\n\\r\\nimport { LibERC2771Recipient } from \\\"./LibERC2771Recipient.sol\\\";  \\r\\n/**\\r\\n * @title The ERC-2771 Recipient Base Abstract Class - Implementation\\r\\n *\\r\\n * @notice Note that this contract was called `BaseRelayRecipient` in the previous revision of the GSN.\\r\\n *\\r\\n * @notice A base contract to be inherited by any contract that want to receive relayed transactions.\\r\\n *\\r\\n * @notice A subclass must use `_msgSender()` instead of `msg.sender`.\\r\\n */\\r\\ncontract iERC2771Recipient {\\r\\n \\r\\n    /*\\r\\n     * Forwarder singleton we accept calls from\\r\\n     */\\r\\n     \\r\\n    \\r\\n\\r\\n    function _getTrustedForwarder() internal  view returns (address forwarder){\\r\\n        return LibERC2771Recipient.__getTrustedForwarder();\\r\\n    }\\r\\n\\r\\n    function _setTrustedForwarder(address _forwarder) internal {\\r\\n        LibERC2771Recipient.__setTrustedForwarder(_forwarder); \\r\\n    }\\r\\n  \\r\\n  \\r\\n    function _isTrustedForwarder(address forwarder) internal  view returns(bool) {\\r\\n        return LibERC2771Recipient._isTrustedForwarder(forwarder);\\r\\n    } \\r\\n\\r\\n    \\r\\n    function msgSender() internal  view returns (address ret_) {\\r\\n        ret_ = LibERC2771Recipient._msgSender();\\r\\n    }\\r\\n    \\r\\n    function msgData() internal  view returns (bytes calldata ret_) {\\r\\n        ret_ = LibERC2771Recipient._msgData();\\r\\n    }\\r\\n}\",\"keccak256\":\"0x0a097bedc1831e582bf1b64b8406b71a3441ed6f9d09b12874821b94d3ce9a88\",\"license\":\"MIT\"},\"contracts/facets/MemberRegistry/LibMemberRegistry.sol\":{\"content\":\"pragma solidity ^0.8.6;\\r\\n\\r\\nlibrary LibMemberRegistry {\\r\\n    bytes32 constant MEMBER_REGISTRY_STORAGE_POSITION = keccak256(\\\"diamond.standard.MemberRegistry.storage\\\");\\r\\n\\r\\n    struct Recovery {\\r\\n        address userNewAddress;\\r\\n        uint96 recoveryTimestamp; //times after this timestamp allow for the user to\\r\\n        //permenantely change.\\r\\n    }\\r\\n    struct SignatureVerfication {\\r\\n        uint256 domain;\\r\\n        uint256 nonce;\\r\\n    }\\r\\n    enum RecoveryStatus {\\r\\n        Initiated,\\r\\n        Finalized,\\r\\n        Cancelled\\r\\n    }\\r\\n    struct Leaf {\\r\\n        string username;\\r\\n        address userAddress;\\r\\n    }\\r\\n\\r\\n    struct MemberRegistryStorage {\\r\\n        mapping(address => string) addressToUsername;\\r\\n        mapping(string => address) usernameToAddress;\\r\\n        mapping(string => Recovery) usernameToRecoveryAddress;\\r\\n        mapping(address => uint256) nonces;  \\r\\n        bytes32 registryMerkleRoot;\\r\\n    }    \\r\\n   \\r\\n    function memberRegistryStorage() internal pure returns (MemberRegistryStorage storage es) {\\r\\n        bytes32 storagePosition = MEMBER_REGISTRY_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            es.slot := storagePosition \\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x330d56d87fcdb9b1b3c0e20d1dcf01e8fb2e6d414baaafb101d8828c82a2023f\"},\"contracts/facets/MemberRegistry/MemberRegistry.sol\":{\"content\":\"pragma solidity ^0.8.28;\\r\\n\\r\\nimport { iMemberRegistry } from \\\"./_MemberRegistry.sol\\\";\\r\\nimport { LibMemberRegistry } from \\\"./LibMemberRegistry.sol\\\";  \\r\\n\\r\\ncontract MemberRegistry is iMemberRegistry{\\r\\n    \\r\\n    function verifyAndUsername(LibMemberRegistry.Leaf memory _leaf, bytes32[] calldata _merkleProof) external  {\\r\\n        _verifyAndUsername(_leaf, _merkleProof);\\r\\n    } \\r\\n\\r\\n    function setUsernamePair(string memory username) external  {\\r\\n        _setUsernamePair(username);\\r\\n    }\\r\\n\\r\\n    function usernameRecovery(string memory username) external  {\\r\\n        _usernameRecovery(username);\\r\\n    }\\r\\n\\r\\n    function finalizeRecovery(string memory username) external  {\\r\\n        _finalizeRecovery(username);\\r\\n    }\\r\\n\\r\\n    function cancelVerify(string memory username) external {\\r\\n        _cancelVerify(username);\\r\\n    }\\r\\n\\r\\n    function setUsernameAddressPair(string memory username) external  {\\r\\n        _setUsernameAddressPair(username);\\r\\n    }\\r\\n\\r\\n    function setUsernameOwner(string[] memory username, address[] memory userAddress) external  {\\r\\n        _setUsernameOwner(username, userAddress);\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x1c6440c6b555ec563494566cdbf52a133a12c9ea737254ea8d7a056f0105b113\"},\"contracts/facets/MemberRegistry/_MemberRegistry.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\nimport {iOwnership} from \\\"../Ownership/_Ownership.sol\\\";\\r\\nimport \\\"./LibMemberRegistry.sol\\\"; \\r\\n \\r\\n\\r\\ncontract iMemberRegistry is iOwnership { \\r\\n    uint32 public constant verificationTime = 1209600; //2 weeks\\r\\n   \\r\\n    /// @dev Emitted when a recovery action is initiated or finalized\\r\\n    /// @param username The username associated with the action\\r\\n    /// @param userAddress The user's address\\r\\n    /// @param recoveryStatus The status of the recovery action\\r\\n    event RecoveryAction(string username, address userAddress, LibMemberRegistry.RecoveryStatus recoveryStatus);\\r\\n\\r\\n    /// @dev Emitted when a user is successfully registered\\r\\n    /// @param username The registered username\\r\\n    /// @param userAddress The user's address\\r\\n    event UserRegistered(string username, address userAddress);\\r\\n\\r\\n\\r\\n    event UsersRegistered(string[] username, address[] userAddress);\\r\\n        /**\\r\\n     * @dev Verifies Merkle proof and sets user's level\\r\\n     * @param _leaf Level to assign to the user\\r\\n     * @param _merkleProof Array of hashed data to verify proof\\r\\n     */  \\r\\n    function _verifyAndUsername(LibMemberRegistry.Leaf memory _leaf, bytes32[] calldata _merkleProof) internal {\\r\\n        // Create leaf from msg.sender and level\\r\\n        LibMemberRegistry.MemberRegistryStorage storage mrs = LibMemberRegistry.memberRegistryStorage(); \\r\\n\\r\\n        bytes32 leaf = keccak256(abi.encodePacked( _leaf.username, _leaf.userAddress));\\r\\n        \\r\\n        require(_verifyMerkleProof(_merkleProof, mrs.registryMerkleRoot, leaf), \\\"Invalid Merkle proof\\\");\\r\\n          \\r\\n        //set username address relation \\r\\n        mrs.addressToUsername[ _leaf.userAddress ] = _leaf.username; \\r\\n        mrs.usernameToAddress[ _leaf.username ] = _leaf.userAddress;\\r\\n\\r\\n        emit UserRegistered( _leaf.username, _leaf.userAddress);\\r\\n    }\\r\\n\\r\\n       /**\\r\\n     * @dev Helper function to verify Merkle proofs\\r\\n     */\\r\\n    function _verifyMerkleProof(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\r\\n        bytes32 computedHash = leaf;\\r\\n        \\r\\n        for (uint256 i = 0; i < proof.length; i++) {\\r\\n            bytes32 proofElement = proof[i];\\r\\n            \\r\\n            if (computedHash <= proofElement) {\\r\\n                // Hash(current computed hash + current element of the proof)\\r\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\r\\n            } else {\\r\\n                // Hash(current element of the proof + current computed hash)\\r\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        // Check if the computed hash equals the root of the Merkle tree\\r\\n        return computedHash == root;\\r\\n    }\\r\\n \\r\\n\\r\\n    function _setUsernamePair(string memory username) internal {\\r\\n        _setUsernameAddressPair(username);\\r\\n    }\\r\\n\\r\\n    function _usernameRecovery(string memory username) internal {\\r\\n        LibMemberRegistry.MemberRegistryStorage storage ls = LibMemberRegistry.memberRegistryStorage(); \\r\\n\\r\\n        LibMemberRegistry.Recovery memory _userVerification = ls.usernameToRecoveryAddress[username];\\r\\n        if (msgSender() != _userVerification.userNewAddress) {\\r\\n            ls.usernameToRecoveryAddress[username] = LibMemberRegistry.Recovery(msgSender(), uint96(block.timestamp) + verificationTime);\\r\\n            emit RecoveryAction(username, msgSender(), LibMemberRegistry.RecoveryStatus.Initiated);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _finalizeRecovery(string memory username) internal {\\r\\n        LibMemberRegistry.MemberRegistryStorage storage ls = LibMemberRegistry.memberRegistryStorage();\\r\\n        LibMemberRegistry.Recovery memory _userVerification = ls.usernameToRecoveryAddress[username];\\r\\n        if (_userVerification.recoveryTimestamp < uint96(block.timestamp) && msgSender() == _userVerification.userNewAddress) {\\r\\n            _setUsernameAddressPair(username);\\r\\n            emit RecoveryAction(username, msgSender(), LibMemberRegistry.RecoveryStatus.Finalized);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _cancelVerify(string memory username) internal {\\r\\n        LibMemberRegistry.MemberRegistryStorage storage ls = LibMemberRegistry.memberRegistryStorage();\\r\\n        address registeredAddress = ls.usernameToAddress[username];\\r\\n        if (msgSender() == registeredAddress) {\\r\\n            ls.usernameToRecoveryAddress[username] = LibMemberRegistry.Recovery(address(0), 0);\\r\\n            emit RecoveryAction(username, msgSender(), LibMemberRegistry.RecoveryStatus.Cancelled);\\r\\n        }\\r\\n    } \\r\\n\\r\\n    function _setUsernameAddressPair(string memory username) internal {\\r\\n        LibMemberRegistry.MemberRegistryStorage storage ls = LibMemberRegistry.memberRegistryStorage();\\r\\n\\r\\n        ls.usernameToAddress[username] = msgSender();\\r\\n        ls.addressToUsername[msgSender()] = username; \\r\\n        emit UserRegistered(username, msgSender());\\r\\n    }\\r\\n\\r\\n    function _setUsernameOwner( string[] memory username, address[] memory userAddress ) internal {\\r\\n        LibMemberRegistry.MemberRegistryStorage storage ls = LibMemberRegistry.memberRegistryStorage();\\r\\n        uint256 length = username.length;\\r\\n        require(length == userAddress.length,\\\"Parameters must be of same length.\\\");\\r\\n\\r\\n        for( uint256 userIndex; userIndex < length; userIndex ++ ){\\r\\n            string memory _username = username[ userIndex ];\\r\\n            address _userAddress = userAddress[ userIndex ];\\r\\n \\r\\n            ls.usernameToAddress[ _username ] = _userAddress; \\r\\n            ls.addressToUsername[ _userAddress ]= _username;  \\r\\n        }\\r\\n        \\r\\n        emit UsersRegistered( username, userAddress);  \\r\\n    }\\r\\n    // need a case in which account is in recovery but current user wants to cancel\\r\\n}\\r\\n\",\"keccak256\":\"0xdb669de9b8a70223ed5c2801baf8f6f92c5ea7e3ad40b4687ed794e7d54789d2\"},\"contracts/facets/Ownership/LibOwnership.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n\\r\\nlibrary LibOwnership {\\r\\nbytes32 constant OWNERSHIP_STORAGE_POSITION = keccak256(\\\"diamond.ownership.storage\\\");\\r\\nuint24 constant MIGRATION_TRANSITION_LOCK_TIMESPAN = 259200; // 3 days\\r\\n\\r\\nstruct OwnershipStorage{\\r\\n    address ecosystemOwner;\\r\\n    address registry;\\r\\n    Migration migration;\\r\\n}\\r\\nstruct Migration{\\r\\n    bool isMigrating;\\r\\n    uint32 initiationTimestamp;\\r\\n}\\r\\n\\r\\nfunction ownershipStorage() internal pure returns (OwnershipStorage storage os) {\\r\\n        bytes32 position = OWNERSHIP_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            os.slot := position \\r\\n        }\\r\\n    }\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n        Should never be used outside of iOwnership.sol (exception for the initial diamond constructor)\\r\\n        @notice Sets the owner of this ecosystem\\r\\n        @param _newEcosystemOwner  new ecosystem owner \\r\\n     */\\r\\n    function _setEcosystemOwner(address _newEcosystemOwner) internal {\\r\\n        OwnershipStorage storage os = ownershipStorage();\\r\\n        address previousOwner = os.ecosystemOwner;\\r\\n        os.ecosystemOwner = _newEcosystemOwner;\\r\\n        emit OwnershipTransferred(previousOwner, _newEcosystemOwner);\\r\\n    }\\r\\n\\r\\n    function _ecosystemOwner() internal view returns (address ecosystemOwner_) {\\r\\n        ecosystemOwner_ = ownershipStorage().ecosystemOwner;\\r\\n    }\\r\\n\\r\\n    function _setRegistry(address _registry) internal {\\r\\n        OwnershipStorage storage os = ownershipStorage();\\r\\n        os.registry = _registry;\\r\\n    }\\r\\n    function _getRegistry() internal view returns (address registry_) {\\r\\n        OwnershipStorage storage os = ownershipStorage();\\r\\n        registry_ = os.registry;\\r\\n    }\\r\\n    \\r\\n    \\r\\n} \",\"keccak256\":\"0x424fd62131dbaccfa06ef6f6deb4e1ef1d75db9d9e0908c864faff0e1d52099e\"},\"contracts/facets/Ownership/_Ownership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {LibOwnership} from \\\"./LibOwnership.sol\\\";\\r\\nimport {iERC2771Recipient} from \\\"../ERC2771Recipient/_ERC2771Recipient.sol\\\";     \\r\\n\\r\\ncontract iOwnership is iERC2771Recipient {\\r\\n    error MigrationAlreadyInitiated();\\r\\n    error MigrationAlreadyCompleted();\\r\\n    error MigrationNotInitiated();\\r\\n\\r\\n    event MigrationInitiated(address initiatior, uint32 timeInitiatied);\\r\\n    event MigrationCancelled(address cancellor, uint32 timeCancelled);\\r\\n    event OwnershipChanged(address oldOwner, address newOwner); \\r\\n    modifier onlyOwner(){\\r\\n        msgSender() == _ecosystemOwner();\\r\\n        _;\\r\\n    }\\r\\n    function _setEcosystemOwner( address _newOwner) internal {\\r\\n        isEcosystemOwnerVerification();\\r\\n        LibOwnership._setEcosystemOwner(_newOwner);\\r\\n    }\\r\\n\\r\\n    function _ecosystemOwner() internal view returns (address owner_) {\\r\\n        owner_ = LibOwnership._ecosystemOwner();\\r\\n    }\\r\\n\\r\\n    function isEcosystemOwnerVerification() internal view {\\r\\n        require( msgSender() == _ecosystemOwner(), \\\"Must be the Ecosystem owner\\\"); \\r\\n    }\\r\\n    \\r\\n\\r\\n    //Migration related methods\\r\\n\\r\\n    /**\\r\\n     * @dev sole purpose is to restrict user from having access to ecosystem modularity\\r\\n     * until they initiate a migration. only modular changes are done via registry until\\r\\n     * then. \\r\\n     */\\r\\n    function isEffectiveOwner() internal view {\\r\\n        LibOwnership.OwnershipStorage storage os = LibOwnership.ownershipStorage();\\r\\n        LibOwnership.Migration storage _migration = os.migration;\\r\\n        if( _migration.isMigrating && isMigrationPeriodOver( _migration.initiationTimestamp ) ){\\r\\n            require( msgSender() == os.ecosystemOwner, \\\"Sender must be the owner.\\\");\\r\\n        }\\r\\n        else{\\r\\n            require(msgSender() == os.registry, \\\"Sender must be from the registry.\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    \\r\\n    /**\\r\\n     * @dev start the migration \\r\\n     */\\r\\n    function _initiateMigration() internal {\\r\\n        LibOwnership.OwnershipStorage storage os = LibOwnership.ownershipStorage();\\r\\n        LibOwnership.Migration storage _migration = os.migration;\\r\\n        if( _migration.isMigrating ){\\r\\n            revert MigrationAlreadyInitiated();\\r\\n        }\\r\\n        else{\\r\\n            _migration.isMigrating = true;\\r\\n            _migration.initiationTimestamp = uint32(block.timestamp);\\r\\n            emit MigrationInitiated(msgSender(), uint32(block.timestamp) );\\r\\n        } \\r\\n    }\\r\\n    function _cancelMigration() internal {\\r\\n        LibOwnership.OwnershipStorage storage os = LibOwnership.ownershipStorage();\\r\\n        LibOwnership.Migration storage _migration = os.migration;\\r\\n        uint32 _initiationTimestamp = _migration.initiationTimestamp;\\r\\n        if( _migration.isMigrating  ) {\\r\\n            if(isMigrationPeriodOver( _initiationTimestamp )){\\r\\n                revert MigrationAlreadyCompleted();\\r\\n            }\\r\\n            else{\\r\\n                _migration.isMigrating = false;\\r\\n                emit MigrationCancelled(msgSender(), uint32(block.timestamp));\\r\\n            }\\r\\n        }\\r\\n        else {\\r\\n            revert MigrationNotInitiated();\\r\\n        }\\r\\n        \\r\\n    }\\r\\n    function isMigrationPeriodOver( uint32 _initiationTimestamp ) internal view returns (bool isOver_){\\r\\n        isOver_ = uint32(block.timestamp) + LibOwnership.MIGRATION_TRANSITION_LOCK_TIMESPAN > _initiationTimestamp;\\r\\n    }\\r\\n}\\r\\n \",\"keccak256\":\"0x3fa7c0716afb600bfa154cef5596f51bb7a707b1d394648498ff24e35731f0ba\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "events": {
      "RecoveryAction(string,address,uint8)": {
        "details": "Emitted when a recovery action is initiated or finalized",
        "params": {
          "recoveryStatus": "The status of the recovery action",
          "userAddress": "The user's address",
          "username": "The username associated with the action"
        }
      },
      "UserRegistered(string,address)": {
        "details": "Emitted when a user is successfully registered",
        "params": {
          "userAddress": "The user's address",
          "username": "The registered username"
        }
      }
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}