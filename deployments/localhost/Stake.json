{
  "address": "0xe307Cc1815578D3b14f5F6d3976E3198bE221Fd8",
  "abi": [
    {
      "inputs": [],
      "name": "MigrationAlreadyCompleted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MigrationAlreadyInitiated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MigrationNotInitiated",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        }
      ],
      "name": "MemberBanned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "memberAddress",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "level",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            }
          ],
          "indexed": false,
          "internalType": "struct LibMemberLevel.Leaf",
          "name": "leaf",
          "type": "tuple"
        }
      ],
      "name": "MemberLevelUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "newRoot",
          "type": "bytes32"
        }
      ],
      "name": "MerkleRootUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "cancellor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "timeCancelled",
          "type": "uint32"
        }
      ],
      "name": "MigrationCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "initiatior",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "timeInitiatied",
          "type": "uint32"
        }
      ],
      "name": "MigrationInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "initialRate",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "rateIncrease",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "rateIncreaseStopDuration",
              "type": "uint16"
            }
          ],
          "indexed": false,
          "internalType": "struct Stake.RewardRate[]",
          "name": "_rewardRates",
          "type": "tuple[]"
        }
      ],
      "name": "RewardRatesChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        }
      ],
      "name": "RewardsRetrieved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "funder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "StakeRewardAccountFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "user",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amount",
          "type": "uint256[]"
        },
        {
          "internalType": "enum Stake.StakeTier[]",
          "name": "tier",
          "type": "uint8[]"
        },
        {
          "internalType": "uint256[]",
          "name": "stakeIds",
          "type": "uint256[]"
        }
      ],
      "name": "batchStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "fundStakeAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGasStakeFee",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "feeScale_",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "fee_",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Stake.StakeTier[]",
          "name": "_stakeTier",
          "type": "uint8[]"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "initialRate",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "rateIncrease",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "rateIncreaseStopDuration",
              "type": "uint16"
            }
          ],
          "internalType": "struct Stake.RewardRate[]",
          "name": "_rewardRate",
          "type": "tuple[]"
        }
      ],
      "name": "setRewardRates",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "enum Stake.StakeTier",
          "name": "tier",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "enum Stake.StakeTier",
          "name": "tier",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        }
      ],
      "name": "stakeContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "enum Stake.StakeTier",
          "name": "tier",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        }
      ],
      "name": "stakeVirtual",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        }
      ],
      "name": "unstakeContract",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        }
      ],
      "name": "unstakeVirtual",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        }
      ],
      "name": "viewMinimumStakeDurationLeft",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "timeLeft_",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        }
      ],
      "name": "viewReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reward_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa16b5e144aeda33bfd7d5a25c1d0395dd41cbefef12114fcddb0e4eca9804da7",
  "receipt": {
    "to": null,
    "from": "0x1a47C1D6d5B47048536f1111C854e48fA9D76fdF",
    "contractAddress": "0xe307Cc1815578D3b14f5F6d3976E3198bE221Fd8",
    "transactionIndex": 0,
    "gasUsed": "1644206",
    "logsBloom": "0x
    "blockHash": "0x7b95673ce7040ccf8dca52edde9e1354d85eaf9712582f469a4a7a9337b380fe",
    "transactionHash": "0xa16b5e144aeda33bfd7d5a25c1d0395dd41cbefef12114fcddb0e4eca9804da7",
    "logs": [],
    "blockNumber": 29,
    "cumulativeGasUsed": "1644206",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "54a7063fbd1377e55e2032f74c4aa199",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MigrationAlreadyCompleted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MigrationAlreadyInitiated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MigrationNotInitiated\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"name\":\"MemberBanned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"memberAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"level\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct LibMemberLevel.Leaf\",\"name\":\"leaf\",\"type\":\"tuple\"}],\"name\":\"MemberLevelUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newRoot\",\"type\":\"bytes32\"}],\"name\":\"MerkleRootUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cancellor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"timeCancelled\",\"type\":\"uint32\"}],\"name\":\"MigrationCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initiatior\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"timeInitiatied\",\"type\":\"uint32\"}],\"name\":\"MigrationInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"initialRate\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"rateIncrease\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"rateIncreaseStopDuration\",\"type\":\"uint16\"}],\"indexed\":false,\"internalType\":\"struct Stake.RewardRate[]\",\"name\":\"_rewardRates\",\"type\":\"tuple[]\"}],\"name\":\"RewardRatesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"RewardsRetrieved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeRewardAccountFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"user\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"},{\"internalType\":\"enum Stake.StakeTier[]\",\"name\":\"tier\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"stakeIds\",\"type\":\"uint256[]\"}],\"name\":\"batchStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fundStakeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGasStakeFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"feeScale_\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"fee_\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Stake.StakeTier[]\",\"name\":\"_stakeTier\",\"type\":\"uint8[]\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"initialRate\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"rateIncrease\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"rateIncreaseStopDuration\",\"type\":\"uint16\"}],\"internalType\":\"struct Stake.RewardRate[]\",\"name\":\"_rewardRate\",\"type\":\"tuple[]\"}],\"name\":\"setRewardRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum Stake.StakeTier\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum Stake.StakeTier\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"stakeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum Stake.StakeTier\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"stakeVirtual\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"unstakeContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"unstakeVirtual\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"viewMinimumStakeDurationLeft\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"timeLeft_\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"viewReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\"}},\"kind\":\"dev\",\"methods\":{\"unstakeVirtual(address,uint256,uint256)\":{\"params\":{\"amount\":\"amount to be virtually unstaked\",\"stakeId\":\"unique staking id\",\"staker\":\"reward transfer address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getGasStakeFee()\":{\"notice\":\"Multiply the target eth by feeScale_.  \"},\"stakeVirtual(address,uint256,uint8,uint256)\":{\"notice\":\"Swap orders having this ecosystem token as their output can stake the expected  outputted tokens and retrieve rewards IF their order is fulfilled. \"},\"unstakeVirtual(address,uint256,uint256)\":{\"notice\":\"Trusted contracts can stake users placing swap orders into this ecosystem's token.\"},\"viewMinimumStakeDurationLeft(uint256)\":{\"notice\":\"Retrieves the remaining time left until the minimum stake duration is completed, zero if already completed. \"},\"viewReward(uint256)\":{\"notice\":\"Retrieves current reward amount from a given stake position.  To retrieve the reward, you must unstake after the minimum stake duration. \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/Stake/Stake.sol\":\"Stake\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/facets/ERC2771Recipient/LibERC2771Recipient.sol\":{\"content\":\"// LibEventStorage.sol\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n\\r\\nlibrary LibERC2771Recipient {\\r\\n    bytes32 constant STORAGE_POSITION = keccak256(\\\"diamond.storage.ERC2771Recipient\\\");\\r\\n\\r\\n   \\r\\n    struct ERC2771RecipientStorage {\\r\\n        address trustedForwarder;\\r\\n    }\\r\\n\\r\\n    function erc2771RecipientStorage() internal pure returns ( ERC2771RecipientStorage storage es) {\\r\\n        bytes32 position = STORAGE_POSITION;\\r\\n        assembly {\\r\\n            es.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n   function __getTrustedForwarder() internal  view returns (address trustedForwarder_){\\r\\n       ERC2771RecipientStorage storage es =  erc2771RecipientStorage();\\r\\n        trustedForwarder_ =  es.trustedForwarder;\\r\\n    }\\r\\n\\r\\n    function __setTrustedForwarder(address _forwarder) internal {\\r\\n        ERC2771RecipientStorage storage es =  erc2771RecipientStorage();\\r\\n        es.trustedForwarder = _forwarder; \\r\\n    }\\r\\n \\r\\n  \\r\\n    function _isTrustedForwarder(address forwarder) public  view returns(bool) {\\r\\n        ERC2771RecipientStorage storage es =  erc2771RecipientStorage();\\r\\n        return forwarder == es.trustedForwarder;\\r\\n    }\\r\\n \\r\\n    \\r\\n    function _msgSender() internal  view returns (address ret) {\\r\\n        if (msg.data.length >= 20 && _isTrustedForwarder(msg.sender)) {\\r\\n            // At this point we know that the sender is a trusted forwarder,\\r\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\r\\n            // extract sender address from the end of msg.data\\r\\n            assembly {\\r\\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\\r\\n            }\\r\\n        } else {\\r\\n            ret = msg.sender;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    \\r\\n    function _msgData() internal  view returns (bytes calldata ret) {\\r\\n        if (msg.data.length >= 20 && _isTrustedForwarder(msg.sender)) {\\r\\n            return msg.data[0:msg.data.length-20];\\r\\n        } else {\\r\\n            return msg.data;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6ff10e2f12c8a61f2ae6ff642711976888a210d309d0e03885193162664330cb\"},\"contracts/facets/ERC2771Recipient/_ERC2771Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// solhint-disable no-inline-assembly\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\n\\r\\n\\r\\nimport { LibERC2771Recipient } from \\\"./LibERC2771Recipient.sol\\\";  \\r\\n/**\\r\\n * @title The ERC-2771 Recipient Base Abstract Class - Implementation\\r\\n *\\r\\n * @notice Note that this contract was called `BaseRelayRecipient` in the previous revision of the GSN.\\r\\n *\\r\\n * @notice A base contract to be inherited by any contract that want to receive relayed transactions.\\r\\n *\\r\\n * @notice A subclass must use `_msgSender()` instead of `msg.sender`.\\r\\n */\\r\\ncontract iERC2771Recipient {\\r\\n \\r\\n    /*\\r\\n     * Forwarder singleton we accept calls from\\r\\n     */\\r\\n     \\r\\n    \\r\\n\\r\\n    function _getTrustedForwarder() internal  view returns (address forwarder){\\r\\n        return LibERC2771Recipient.__getTrustedForwarder();\\r\\n    }\\r\\n\\r\\n    function _setTrustedForwarder(address _forwarder) internal {\\r\\n        LibERC2771Recipient.__setTrustedForwarder(_forwarder); \\r\\n    }\\r\\n  \\r\\n  \\r\\n    function _isTrustedForwarder(address forwarder) internal  view returns(bool) {\\r\\n        return LibERC2771Recipient._isTrustedForwarder(forwarder);\\r\\n    } \\r\\n\\r\\n    \\r\\n    function msgSender() internal  view returns (address ret_) {\\r\\n        ret_ = LibERC2771Recipient._msgSender();\\r\\n    }\\r\\n    \\r\\n    function msgData() internal  view returns (bytes calldata ret_) {\\r\\n        ret_ = LibERC2771Recipient._msgData();\\r\\n    }\\r\\n}\",\"keccak256\":\"0x0a097bedc1831e582bf1b64b8406b71a3441ed6f9d09b12874821b94d3ce9a88\",\"license\":\"MIT\"},\"contracts/facets/MemberLevel/LibMemberLevel.sol\":{\"content\":\"pragma solidity ^0.8.6;\\r\\n\\r\\nimport \\\"../../libraries/utils/Incrementer.sol\\\"; \\r\\n\\r\\n/**\\r\\n    user level history keys are designed to be unique by following the program of\\r\\n    using 8 bytes for the total history length ~1E19 for the highest order 8 bytes \\r\\n    and the lowest order 20 bytes for their address (28 byte total)\\r\\n\\r\\n    Why use a key when can just use uint96 for level history max index?\\r\\n */\\r\\nlibrary LibMemberLevel {\\r\\n    using Incrementer for bytes28;\\r\\n    using Incrementer for bytes8;\\r\\n    bytes32 constant MEMBER_STORAGE_POSITION = keccak256(\\\"diamond.standard.members.storage\\\");\\r\\n    struct MemberLevelStorage {\\r\\n        mapping( address => MemberLevel ) memberLevel; // level history \\r\\n        bytes32 merkleRoot;\\r\\n    }\\r\\n\\r\\n    struct Leaf {\\r\\n        address memberAddress;\\r\\n        uint32 level;\\r\\n        uint32 timestamp;\\r\\n    }\\r\\n\\r\\n    struct MemberLevel{\\r\\n        uint32 timestamp;\\r\\n        uint32 level;\\r\\n    }\\r\\n    \\r\\n    type level is uint32;\\r\\n\\r\\n    function memberLevelStorage() internal pure returns (MemberLevelStorage storage ms_) { \\r\\n        bytes32 position = MEMBER_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            ms_.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function permissionedChangeLevel( uint32 _level, address member) internal {\\r\\n        MemberLevelStorage storage ms = memberLevelStorage();\\r\\n        ms.memberLevel[ member ] = MemberLevel( uint32( block.timestamp ), _level ); \\r\\n    }\\r\\n  \\r\\n \\r\\n}\\r\\n\",\"keccak256\":\"0x7cefbdd11110e035371d6352310286b00867ab055242b358edbd9bb7c027ca95\"},\"contracts/facets/MemberLevel/_Members.sol\":{\"content\":\"pragma solidity ^0.8.9;\\r\\n \\r\\n   \\r\\nimport \\\"./LibMemberLevel.sol\\\";  \\r\\nimport \\\"../../libraries/utils/Incrementer.sol\\\"; \\r\\nimport \\\"../Moderator/LibModerator.sol\\\";  \\r\\nimport \\\"../Moderator/ModeratorModifiers.sol\\\";   \\r\\nimport {iOwnership} from \\\"../Ownership/_Ownership.sol\\\"; \\r\\nimport { LibMemberLevel} from \\\"./LibMemberLevel.sol\\\"; \\r\\n  \\r\\ncontract iMembers is iOwnership {   \\r\\n    event MerkleRootUpdated(bytes32 newRoot);\\r\\n    event MemberLevelUpdated(LibMemberLevel.Leaf leaf);\\r\\n    event MemberBanned(address indexed user, uint32 timestamp); \\r\\n      /**  \\r\\n     * @dev Updates the Merkle root\\r\\n     * @param _merkleRoot New Merkle root to be stored\\r\\n     */\\r\\n     function updateMemberMerkleRoot(bytes32 _merkleRoot) internal  {\\r\\n        isEcosystemOwnerVerification();\\r\\n        LibMemberLevel.MemberLevelStorage storage mrs = LibMemberLevel.memberLevelStorage();\\r\\n        mrs.merkleRoot = _merkleRoot; \\r\\n        emit MerkleRootUpdated(_merkleRoot);\\r\\n    }\\r\\n        /**\\r\\n     * @dev Verifies Merkle proof and sets user's level\\r\\n     * @param _leaf Level to assign to the user\\r\\n     * @param _merkleProof Array of hashed data to verify proof\\r\\n     */ \\r\\n    function _verifyAndSetLevel(LibMemberLevel.Leaf memory _leaf, bytes32[] calldata _merkleProof) internal {\\r\\n        // Create leaf from msg.sender and level\\r\\n        LibMemberLevel.MemberLevelStorage storage mrs = LibMemberLevel.memberLevelStorage();\\r\\n\\r\\n        bytes32 leaf = keccak256(abi.encodePacked(msg.sender, _leaf.level, _leaf.timestamp));\\r\\n        \\r\\n        require(_verifyMerkleProof(_merkleProof, mrs.merkleRoot, leaf), \\\"Invalid Merkle proof\\\");\\r\\n          \\r\\n        // Set the member level\\r\\n        mrs.memberLevel[msg.sender] = LibMemberLevel.MemberLevel({\\r\\n            level: _leaf.level,\\r\\n            timestamp: _leaf.timestamp\\r\\n        });\\r\\n        \\r\\n        emit MemberLevelUpdated(_leaf);  \\r\\n    }\\r\\n\\r\\n       /**\\r\\n     * @dev Helper function to verify Merkle proofs\\r\\n     */\\r\\n    function _verifyMerkleProof(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\r\\n        bytes32 computedHash = leaf;\\r\\n        \\r\\n        for (uint256 i = 0; i < proof.length; i++) {\\r\\n            bytes32 proofElement = proof[i];\\r\\n            \\r\\n            if (computedHash <= proofElement) {\\r\\n                // Hash(current computed hash + current element of the proof)\\r\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\r\\n            } else {\\r\\n                // Hash(current element of the proof + current computed hash)\\r\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        // Check if the computed hash equals the root of the Merkle tree\\r\\n        return computedHash == root;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Batch set levels for multiple addresses (permissioned function)\\r\\n     * @param _leaves user resource denoting their membership status\\r\\n     *   \\r\\n     */\\r\\n    function _batchSetLevels( LibMemberLevel.Leaf[] calldata _leaves) internal {\\r\\n        isEcosystemOwnerVerification();\\r\\n        LibMemberLevel.MemberLevelStorage storage mrs = LibMemberLevel.memberLevelStorage();\\r\\n        \\r\\n        for (uint256 i = 0; i < _leaves.length; i++) {\\r\\n            LibMemberLevel.Leaf memory _leaf = _leaves[ i ]; \\r\\n            mrs.memberLevel[ _leaf.memberAddress ] = LibMemberLevel.MemberLevel({\\r\\n                level: _leaf.level,\\r\\n                timestamp: _leaf.timestamp\\r\\n            });\\r\\n            \\r\\n            emit MemberLevelUpdated(_leaf);    \\r\\n        }\\r\\n    }\\r\\n\\r\\n     /**\\r\\n     * @dev Returns the level info for a given address\\r\\n     * @param _user Address to query\\r\\n     * @return level and timestamp of the user\\r\\n     */\\r\\n    function _getMemberLevelStruct(address _user) internal view returns (uint32 level, uint32 timestamp) {\\r\\n        LibMemberLevel.MemberLevelStorage storage mrs = LibMemberLevel.memberLevelStorage();\\r\\n        LibMemberLevel.MemberLevel storage memberLevelStruct = mrs.memberLevel[ _user ];\\r\\n        return (memberLevelStruct.level, memberLevelStruct.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the level info for a given address\\r\\n     * @param _user Address to query \\r\\n     */\\r\\n    function _getMemberLevel(address _user) internal view returns (uint32 memberLevel_) {\\r\\n        LibMemberLevel.MemberLevelStorage storage mrs = LibMemberLevel.memberLevelStorage();\\r\\n        memberLevel_ = mrs.memberLevel[ _user ].level;  \\r\\n    }\\r\\n    \\r\\n\\r\\n    /**\\r\\n     * @dev Bans a user by setting their level to 0\\r\\n     * @param _user Address of the user to ban\\r\\n     */\\r\\n    function _banMember(address _user) internal onlyOwner {\\r\\n        LibMemberLevel.MemberLevelStorage storage mrs = LibMemberLevel.memberLevelStorage();\\r\\n        uint32 currentTimestamp = uint32(block.timestamp);\\r\\n        \\r\\n        mrs.memberLevel[_user] = LibMemberLevel.MemberLevel({\\r\\n            level: 0,\\r\\n            timestamp: currentTimestamp\\r\\n        });\\r\\n        \\r\\n        emit MemberBanned(_user, currentTimestamp);\\r\\n    }\\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0x07b9e69ea7f3a83cb7c184802223dac94e1f9ea8631600e15bb0e771bdac7086\"},\"contracts/facets/Moderator/LibModerator.sol\":{\"content\":\"pragma solidity ^0.8.6;\\r\\n\\r\\nlibrary LibModerator{\\r\\n    bytes32 constant MODERATOR_STORAGE_POSITION = keccak256(\\\"diamond.standard.Moderator.storage\\\");\\r\\n    struct Moderator_Storage{\\r\\n        mapping( address => uint8 ) moderatorRank;\\r\\n    }\\r\\n\\r\\n    function moderatorStorage() internal pure returns (Moderator_Storage storage es){\\r\\n        bytes32 Moderator_STORAGE_POSITION = MODERATOR_STORAGE_POSITION;\\r\\n        assembly{\\r\\n            es.slot := Moderator_STORAGE_POSITION\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setModeratorRank(address _moderator, uint8 rank) internal {\\r\\n        moderatorStorage().moderatorRank[ _moderator ] = rank;\\r\\n    }\\r\\n    function getModeratorRank(address _moderator) internal view returns (uint8 rank_) {\\r\\n        rank_ = moderatorStorage().moderatorRank[ _moderator ];\\r\\n    }\\r\\n}\",\"keccak256\":\"0xf25a2532479212be318e406d567a6c55854139cf6b3eee3142ef15375514ef4b\"},\"contracts/facets/Moderator/ModeratorModifiers.sol\":{\"content\":\"pragma solidity ^0.8.9;\\r\\n\\r\\nimport {iERC2771Recipient} from \\\"../ERC2771Recipient/_ERC2771Recipient.sol\\\";    \\r\\nimport \\\"./ModeratorRankConstants.sol\\\";\\r\\nimport \\\"./LibModerator.sol\\\"; \\r\\n\\r\\ncontract ModeratorModifiers is ModeratorRankConstants, iERC2771Recipient {\\r\\n    modifier moderatorMemberPermission(){\\r\\n        require( LibModerator.getModeratorRank( msgSender() ) \\r\\n                 >= MODERATOR_MEMBER_PERMISSIONED ,\\\"MS - Insufficient Priveleges.\\\");\\r\\n        _;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x882815af7f8f780d8ff9839554eaac6d419009daaf3eb5eb0093d61eca9d2332\"},\"contracts/facets/Moderator/ModeratorRankConstants.sol\":{\"content\":\"pragma solidity ^0.8.9;\\r\\n\\r\\ncontract ModeratorRankConstants {\\r\\n    uint8 constant MODERATOR_MEMBER_PERMISSIONED = 200;\\r\\n}\",\"keccak256\":\"0xb901e110b796cbf22309409abb5e9c9b67fd71f39ce98e5d1bdb85f66c03e281\"},\"contracts/facets/Ownership/LibOwnership.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n\\r\\nlibrary LibOwnership {\\r\\nbytes32 constant OWNERSHIP_STORAGE_POSITION = keccak256(\\\"diamond.ownership.storage\\\");\\r\\nuint24 constant MIGRATION_TRANSITION_LOCK_TIMESPAN = 259200; // 3 days\\r\\n\\r\\nstruct OwnershipStorage{\\r\\n    address ecosystemOwner;\\r\\n    address registry;\\r\\n    Migration migration;\\r\\n}\\r\\nstruct Migration{\\r\\n    bool isMigrating;\\r\\n    uint32 initiationTimestamp;\\r\\n}\\r\\n\\r\\nfunction ownershipStorage() internal pure returns (OwnershipStorage storage os) {\\r\\n        bytes32 position = OWNERSHIP_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            os.slot := position \\r\\n        }\\r\\n    }\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n        Should never be used outside of iOwnership.sol (exception for the initial diamond constructor)\\r\\n        @notice Sets the owner of this ecosystem\\r\\n        @param _newEcosystemOwner  new ecosystem owner \\r\\n     */\\r\\n    function _setEcosystemOwner(address _newEcosystemOwner) internal {\\r\\n        OwnershipStorage storage os = ownershipStorage();\\r\\n        address previousOwner = os.ecosystemOwner;\\r\\n        os.ecosystemOwner = _newEcosystemOwner;\\r\\n        emit OwnershipTransferred(previousOwner, _newEcosystemOwner);\\r\\n    }\\r\\n\\r\\n    function _ecosystemOwner() internal view returns (address ecosystemOwner_) {\\r\\n        ecosystemOwner_ = ownershipStorage().ecosystemOwner;\\r\\n    }\\r\\n\\r\\n    function _setRegistry(address _registry) internal {\\r\\n        OwnershipStorage storage os = ownershipStorage();\\r\\n        os.registry = _registry;\\r\\n    }\\r\\n    function _getRegistry() internal view returns (address registry_) {\\r\\n        OwnershipStorage storage os = ownershipStorage();\\r\\n        registry_ = os.registry;\\r\\n    }\\r\\n    \\r\\n    \\r\\n} \",\"keccak256\":\"0x424fd62131dbaccfa06ef6f6deb4e1ef1d75db9d9e0908c864faff0e1d52099e\"},\"contracts/facets/Ownership/_Ownership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {LibOwnership} from \\\"./LibOwnership.sol\\\";\\r\\nimport {iERC2771Recipient} from \\\"../ERC2771Recipient/_ERC2771Recipient.sol\\\";     \\r\\n\\r\\ncontract iOwnership is iERC2771Recipient {\\r\\n    error MigrationAlreadyInitiated();\\r\\n    error MigrationAlreadyCompleted();\\r\\n    error MigrationNotInitiated();\\r\\n\\r\\n    event MigrationInitiated(address initiatior, uint32 timeInitiatied);\\r\\n    event MigrationCancelled(address cancellor, uint32 timeCancelled);\\r\\n    event OwnershipChanged(address oldOwner, address newOwner); \\r\\n    modifier onlyOwner(){\\r\\n        msgSender() == _ecosystemOwner();\\r\\n        _;\\r\\n    }\\r\\n    function _setEcosystemOwner( address _newOwner) internal {\\r\\n        isEcosystemOwnerVerification();\\r\\n        LibOwnership._setEcosystemOwner(_newOwner);\\r\\n    }\\r\\n\\r\\n    function _ecosystemOwner() internal view returns (address owner_) {\\r\\n        owner_ = LibOwnership._ecosystemOwner();\\r\\n    }\\r\\n\\r\\n    function isEcosystemOwnerVerification() internal view {\\r\\n        require( msgSender() == _ecosystemOwner(), \\\"Must be the Ecosystem owner\\\"); \\r\\n    }\\r\\n    \\r\\n\\r\\n    //Migration related methods\\r\\n\\r\\n    /**\\r\\n     * @dev sole purpose is to restrict user from having access to ecosystem modularity\\r\\n     * until they initiate a migration. only modular changes are done via registry until\\r\\n     * then. \\r\\n     */\\r\\n    function isEffectiveOwner() internal view {\\r\\n        LibOwnership.OwnershipStorage storage os = LibOwnership.ownershipStorage();\\r\\n        LibOwnership.Migration storage _migration = os.migration;\\r\\n        if( _migration.isMigrating && isMigrationPeriodOver( _migration.initiationTimestamp ) ){\\r\\n            require( msgSender() == os.ecosystemOwner, \\\"Sender must be the owner.\\\");\\r\\n        }\\r\\n        else{\\r\\n            require(msgSender() == os.registry, \\\"Sender must be from the registry.\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    \\r\\n    /**\\r\\n     * @dev start the migration \\r\\n     */\\r\\n    function _initiateMigration() internal {\\r\\n        LibOwnership.OwnershipStorage storage os = LibOwnership.ownershipStorage();\\r\\n        LibOwnership.Migration storage _migration = os.migration;\\r\\n        if( _migration.isMigrating ){\\r\\n            revert MigrationAlreadyInitiated();\\r\\n        }\\r\\n        else{\\r\\n            _migration.isMigrating = true;\\r\\n            _migration.initiationTimestamp = uint32(block.timestamp);\\r\\n            emit MigrationInitiated(msgSender(), uint32(block.timestamp) );\\r\\n        } \\r\\n    }\\r\\n    function _cancelMigration() internal {\\r\\n        LibOwnership.OwnershipStorage storage os = LibOwnership.ownershipStorage();\\r\\n        LibOwnership.Migration storage _migration = os.migration;\\r\\n        uint32 _initiationTimestamp = _migration.initiationTimestamp;\\r\\n        if( _migration.isMigrating  ) {\\r\\n            if(isMigrationPeriodOver( _initiationTimestamp )){\\r\\n                revert MigrationAlreadyCompleted();\\r\\n            }\\r\\n            else{\\r\\n                _migration.isMigrating = false;\\r\\n                emit MigrationCancelled(msgSender(), uint32(block.timestamp));\\r\\n            }\\r\\n        }\\r\\n        else {\\r\\n            revert MigrationNotInitiated();\\r\\n        }\\r\\n        \\r\\n    }\\r\\n    function isMigrationPeriodOver( uint32 _initiationTimestamp ) internal view returns (bool isOver_){\\r\\n        isOver_ = uint32(block.timestamp) + LibOwnership.MIGRATION_TRANSITION_LOCK_TIMESPAN > _initiationTimestamp;\\r\\n    }\\r\\n}\\r\\n \",\"keccak256\":\"0x3fa7c0716afb600bfa154cef5596f51bb7a707b1d394648498ff24e35731f0ba\",\"license\":\"MIT\"},\"contracts/facets/Stake/Stake.sol\":{\"content\":\"pragma solidity ^0.8.9;\\r\\n\\r\\n/**\\r\\n    Enable permitted contracts to allow staking/unstaking, done implicitly through erc20\\r\\n    transfers function\\r\\n    Have several tiers \\r\\n    Create a seperate stake address \\r\\n */\\r\\n \\r\\nimport {iERC1155Transfer} from \\\"../Tokens/ERC1155/ERC1155Transfer.sol\\\";  \\r\\nimport {LibERC20} from \\\"../Tokens/ERC20/libraries/LibERC20.sol\\\";  \\r\\nimport {iOwnership} from \\\"../Ownership/_Ownership.sol\\\";\\r\\nimport {iMembers} from \\\"../MemberLevel/_Members.sol\\\"; \\r\\n\\r\\ncontract Stake is iERC1155Transfer, iOwnership, iMembers{  \\r\\n    enum StakeTier {Continious, SevenDay, FourteenDay, TwentyEightDay} \\r\\n    uint8 constant NUM_STAKE_TIERS = 4;\\r\\n    struct RewardRate{\\r\\n        uint16 initialRate;\\r\\n        uint16 rateIncrease;\\r\\n        uint16 rateIncreaseStopDuration;\\r\\n    }\\r\\n\\r\\n    address constant STAKE_FUNDING_ADDRESS = 0x2D08BDf3c61834F76Decaf6E85ffAecFeF02E605; //address(this), massDX, and whoever else the owner decides has permissions\\r\\n    address constant STAKE_DEPOSIT_ADDRESS = 0x2D08BDf3c61834F76Decaf6E85ffAecFeF02E605; //address(this), massDX, and whoever else the owner decides has permissions\\r\\n\\r\\n    uint24 constant GAS_STAKE_FEE_SCALE = 1000000;\\r\\n    uint24 constant GAS_STAKE_FEE = 16000000;\\r\\n\\r\\n    struct StakePosition{\\r\\n        address holder; // if non-zero, implies an app is implicitly staking for a user and holds their currency in turn\\r\\n        StakeTier tier;\\r\\n        uint32 startTime;\\r\\n        bool isVirtual;\\r\\n        uint256 amount;\\r\\n    }\\r\\n    //address, then stakeId\\r\\n    mapping( address => mapping(uint256 => StakePosition) ) stakePosition;\\r\\n    mapping( StakeTier => RewardRate) rewardRate;\\r\\n    mapping( address => bool) approvedContracts;\\r\\n    event StakeRewardAccountFunded(address funder, uint256 amount);\\r\\n    event RewardsRetrieved(address user, uint256 amount, uint256 reward, uint256 stakeId);\\r\\n    event RewardRatesChanged(RewardRate[] _rewardRates);\\r\\n    \\r\\n    function stakeContract(address staker, uint256 amount, StakeTier tier, uint256 stakeId) public{\\r\\n        //require approved contract\\r\\n        //transfer funds from staker to stake deposit\\r\\n        _safeTransferFrom(staker, STAKE_DEPOSIT_ADDRESS, LibERC20.PRIMARY_CURRENCY_ID, amount, \\\"\\\");\\r\\n\\r\\n        //stake\\r\\n        StakePosition storage _stakePosition = stakePosition[ msgSender() ][ stakeId ];\\r\\n        require(_stakePosition.startTime == 0 ,\\\"StakeId already exists, please create a unique stakeId\\\");\\r\\n\\r\\n        stakePosition[ staker ][ stakeId ] = StakePosition( msgSender(), tier, uint32(block.timestamp), false, amount );\\r\\n    }\\r\\n\\r\\n    function stake(uint256 amount, StakeTier tier, uint256 stakeId) public{\\r\\n        stakeContract(msgSender(), amount, tier, stakeId); \\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Swap orders having this ecosystem token as their output can stake the expected \\r\\n     * outputted tokens and retrieve rewards IF their order is fulfilled. \\r\\n     */\\r\\n    function stakeVirtual(address staker, uint256 amount, StakeTier tier, uint256 stakeId) external {\\r\\n        //stake\\r\\n        StakePosition storage _stakePosition = stakePosition[ msgSender() ][ stakeId ];\\r\\n        require(_stakePosition.startTime == 0 ,\\\"StakeId already exists, please create a unique stakeId\\\");\\r\\n\\r\\n        stakePosition[ staker ][ stakeId ] = StakePosition( msgSender(), tier, uint32(block.timestamp), true, amount );\\r\\n\\r\\n    }\\r\\n\\r\\n    //batch staking is immune to same block/transaction limitation for a given user\\r\\n    function batchStake( address[] memory user, uint256[] memory amount, StakeTier[] memory tier, uint256[] memory stakeIds) external{\\r\\n        for( uint256 stakeIndex; stakeIndex < user.length - 1; stakeIndex++){\\r\\n            stake( amount[stakeIndex], tier[stakeIndex], stakeIds[stakeIndex]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setRewardRates(StakeTier[] memory _stakeTier, RewardRate[] memory _rewardRate) external {\\r\\n        isEcosystemOwnerVerification();\\r\\n        require(_stakeTier.length == _rewardRate.length, \\\"Input parameters must have same length\\\");\\r\\n        for(uint8 rewardRateIndex; rewardRateIndex < _rewardRate.length - 1; rewardRateIndex ++){\\r\\n            require( type(uint16).max >= _rewardRate[ rewardRateIndex ].rateIncreaseStopDuration , \\\"RateIncreaseStopDuration must be a uint16 type.\\\");\\r\\n            rewardRate[ _stakeTier[ rewardRateIndex ] ] = _rewardRate[ rewardRateIndex ];\\r\\n        }\\r\\n        emit RewardRatesChanged(_rewardRate);\\r\\n    }\\r\\n\\r\\n    function unstakeContract( address staker, uint256 amount, uint256 stakeId) public returns (uint256) {\\r\\n        StakePosition storage _stakePosition = stakePosition[ staker ][ stakeId ];\\r\\n        address _holder = _stakePosition.holder;\\r\\n\\r\\n        \\r\\n        uint32 elapsedTime = uint32( block.timestamp ) - _stakePosition.startTime;\\r\\n        require(elapsedTime >= stakeTierDurations(_stakePosition.tier),\\\"Can't unstake rewards until the mininmum duration has passed.\\\");\\r\\n        \\r\\n        //update stake amount\\r\\n        _stakePosition.amount -= amount;\\r\\n      \\r\\n\\r\\n        //calculate rewards\\r\\n        uint256 reward = calculateReward(amount, _stakePosition.tier, _stakePosition.startTime);\\r\\n        uint256 totalTransferAmount = reward + amount;\\r\\n        //send reward to user from STAKE_ACCOUNT\\r\\n        _safeTransferFrom( STAKE_FUNDING_ADDRESS, staker, LibERC20.PRIMARY_CURRENCY_ID, reward, \\\"\\\"); \\r\\n        //send amount to holding contract\\r\\n        _safeTransferFrom( STAKE_DEPOSIT_ADDRESS, _holder, LibERC20.PRIMARY_CURRENCY_ID, amount, \\\"\\\"); \\r\\n\\r\\n        emit RewardsRetrieved( staker, amount, reward, stakeId);\\r\\n        \\r\\n        return totalTransferAmount;\\r\\n    }\\r\\n    \\r\\n    function unstake( uint256 amount, uint256 stakeId) external {\\r\\n        unstakeContract( msgSender(), amount, stakeId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Trusted contracts can stake users placing swap orders into this\\r\\n     * ecosystem's token.\\r\\n     * @param staker reward transfer address\\r\\n     * @param amount amount to be virtually unstaked\\r\\n     * @param stakeId unique staking id\\r\\n     */\\r\\n    function unstakeVirtual( address staker, uint256 amount, uint256 stakeId) external {\\r\\n        //require trusted contract\\r\\n\\r\\n        StakePosition storage _stakePosition = stakePosition[ staker ][ stakeId ];\\r\\n\\r\\n        _stakePosition.amount -= amount; \\r\\n        \\r\\n        uint32 elapsedTime = uint32( block.timestamp ) - _stakePosition.startTime;\\r\\n        require(elapsedTime >= stakeTierDurations(_stakePosition.tier),\\\"Can't unstake rewards until the mininmum duration has passed.\\\");\\r\\n      \\r\\n        //calculate rewards\\r\\n        uint256 reward = calculateReward(amount, _stakePosition.tier, _stakePosition.startTime);\\r\\n\\r\\n        //send reward to user from STAKE_ACCOUNT\\r\\n        _safeTransferFrom( STAKE_FUNDING_ADDRESS, staker, LibERC20.PRIMARY_CURRENCY_ID, reward, \\\"\\\"); \\r\\n\\r\\n        emit RewardsRetrieved( staker, amount, reward, stakeId);\\r\\n    }\\r\\n    /**\\r\\n        Retrieves current reward amount from a given stake position. \\r\\n        To retrieve the reward, you must unstake after the minimum stake duration. \\r\\n     */\\r\\n    function viewReward(uint256 stakeId) external view returns (uint256 reward_){\\r\\n        StakePosition storage _stakePosition = stakePosition[ msgSender() ][ stakeId ];\\r\\n        uint256 _amount = _stakePosition.amount;\\r\\n        StakeTier _stakeTier = _stakePosition.tier;\\r\\n        uint32 _startTime = _stakePosition.startTime;\\r\\n        reward_ = calculateReward(_amount, _stakeTier, _startTime);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        Retrieves the remaining time left until the minimum stake duration is completed, zero if already completed. \\r\\n     */\\r\\n    function viewMinimumStakeDurationLeft(uint256 stakeId) external view returns (uint32 timeLeft_) {\\r\\n        StakePosition storage _stakePosition = stakePosition[ msgSender() ][ stakeId ];\\r\\n        uint32 _startTime = _stakePosition.startTime;\\r\\n        uint32 _minimumDuration = stakeTierDurations( _stakePosition.tier );\\r\\n        if(block.timestamp > _startTime + _minimumDuration ){\\r\\n            timeLeft_ = uint32(block.timestamp) - _startTime;\\r\\n        }\\r\\n        else{\\r\\n            timeLeft_ = 0;            \\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n        Rewards are calculated via a two part function, one function having the domain of 0 to rateIncreaseStopDuration,\\r\\n        the other from rateIncreaseStopDuration to infinity. \\r\\n\\r\\n        The first part is simply a linear increase in reward rate as a function of time with some intial reward rate, r(t). \\r\\n        The second is a flat reward rate which has the value r( rateIncreaseStopDuration );\\r\\n     */\\r\\n    function calculateReward(uint256 _amount, StakeTier _tier, uint32 _startTime ) internal view  returns (uint256 reward_) { \\r\\n        uint32 elapsedTime = uint32( block.timestamp ) - _startTime;\\r\\n        if(_tier == StakeTier.Continious){\\r\\n            reward_ = tierSpecificReward(_amount, elapsedTime, rewardRate[StakeTier.Continious]);      \\r\\n        }\\r\\n        else if(_tier == StakeTier.SevenDay){\\r\\n            reward_ = tierSpecificReward(_amount, elapsedTime, rewardRate[StakeTier.SevenDay]);      \\r\\n        } \\r\\n        else if(_tier == StakeTier.FourteenDay){\\r\\n            reward_ = tierSpecificReward(_amount, elapsedTime, rewardRate[StakeTier.FourteenDay]);      \\r\\n        }\\r\\n        else if(_tier == StakeTier.TwentyEightDay){\\r\\n            reward_ = tierSpecificReward(_amount, elapsedTime, rewardRate[StakeTier.TwentyEightDay]);      \\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tierSpecificReward(uint256 _amount, uint32 elapsedTime, RewardRate memory _rewardRate) private pure  returns (uint256 reward_){\\r\\n        if( elapsedTime >= _rewardRate.rateIncreaseStopDuration ){\\r\\n            reward_ += firstIntervalRewards(_amount, _rewardRate, _rewardRate.rateIncreaseStopDuration);\\r\\n            uint32 remainingTime = elapsedTime - _rewardRate.rateIncreaseStopDuration;\\r\\n            reward_ += remainingTime * rateFunction(_rewardRate.initialRate, _rewardRate.rateIncrease, _rewardRate.rateIncreaseStopDuration);\\r\\n        }\\r\\n        else{\\r\\n            reward_ += firstIntervalRewards(_amount, _rewardRate, elapsedTime);\\r\\n        }\\r\\n    }\\r\\n    function rateFunction(uint16 initialRate, uint16 rateIncrease, uint16 time) private pure returns (uint16 rate_){\\r\\n        rate_ = initialRate + rateIncrease * time; \\r\\n    }\\r\\n\\r\\n    //evaluates the integral of the first part of the reward function at zero and _maxTime\\r\\n    function firstIntervalRewards(uint256 _amount, RewardRate memory _rewardRate, uint32 _maxTime) private pure returns (uint256 reward_){\\r\\n        reward_ = ( _rewardRate.rateIncrease * _maxTime ** 2 ) / 2 + _rewardRate.initialRate * _maxTime;\\r\\n    }\\r\\n\\r\\n    function stakeTierDurations(StakeTier _stakeTier ) private pure returns (uint32 duration_ ){\\r\\n        if(_stakeTier == StakeTier.SevenDay){\\r\\n            duration_ = 604800; // 7 days \\r\\n        }\\r\\n        else if(_stakeTier == StakeTier.FourteenDay){\\r\\n            duration_ =  1209600;\\r\\n        }\\r\\n        else if(_stakeTier == StakeTier.TwentyEightDay){\\r\\n            duration_ =  2419200;\\r\\n        }\\r\\n        else if (_stakeTier == StakeTier.Continious){\\r\\n            duration_ = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //********************************************************************** */\\r\\n\\r\\n\\r\\n    function fundStakeAccount(uint256 amount) external {\\r\\n        _safeTransferFrom(msgSender(), STAKE_FUNDING_ADDRESS, LibERC20.PRIMARY_CURRENCY_ID, amount, \\\"\\\" );\\r\\n        emit StakeRewardAccountFunded(msgSender(),amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Multiply the target eth by feeScale_. \\r\\n     * \\r\\n     */\\r\\n    function getGasStakeFee() external view returns( uint24 feeScale_, uint24 fee_){\\r\\n        fee_ = GAS_STAKE_FEE;\\r\\n        feeScale_ = GAS_STAKE_FEE_SCALE;\\r\\n    }\\r\\n}\\r\\n/**\\r\\n * \\r\\n * Change two things.\\r\\n * 1. Implicit staking via swaps is done virtually, meaning a swap order who's output swap is intended for a target ecosystem\\r\\n *    will be staked there IF partial or more of the swap is fulfilled. \\r\\n * 2. Volume rewarded eth swapping to ecosystem token. Ecosystem can set a fee. \\r\\n *\\r\\n */\",\"keccak256\":\"0x3c4869a23bf45313b4d9b5fd42241d50b8453476f1ec72fbceadeb71210e37bc\"},\"contracts/facets/Tokens/ERC1155/ERC1155Transfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./interfaces/IERC1155.sol\\\";\\r\\nimport \\\"./interfaces/IERC1155Receiver.sol\\\";\\r\\nimport \\\"./interfaces/IERC1155MetadataURI.sol\\\";\\r\\nimport \\\"./interfaces/IERC1155Transfer.sol\\\";\\r\\nimport \\\"./internals/iERC1155.sol\\\";\\r\\nimport \\\"../../../libraries//utils/Address.sol\\\";\\r\\nimport \\\"../../../libraries/utils/Context.sol\\\";\\r\\nimport \\\"./libraries/LibERC1155.sol\\\";\\r\\nimport \\\"./internals/iERC1155Transfer.sol\\\";\\r\\n/**\\r\\n * @dev Implementation of the basic standard multi-token.\\r\\n * See https://eips.ethereum.org/EIPS/eip-1155\\r\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\r\\n *\\r\\n * _Available since v3.1._\\r\\n */\\r\\ncontract ERC1155Transfer is    iERC1155Transfer {\\r\\n    using Address for address;\\r\\n    /**\\r\\n     * @dev See {IERC1155-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to, \\r\\n        uint256 id,\\r\\n        uint256 amount,\\r\\n        bytes memory data\\r\\n    ) public   {\\r\\n        require(\\r\\n            from == msgSender() || isApprovedForAll(from, msgSender()),\\r\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\r\\n        );\\r\\n        _safeTransferFrom(from, to, id, amount, data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\r\\n     */\\r\\n    function safeBatchTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory amounts,\\r\\n        bytes memory data\\r\\n    ) public  {\\r\\n        require(\\r\\n            from == msgSender() || isApprovedForAll(from, msgSender()),\\r\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\r\\n        );\\r\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC1155-setApprovalForAll}.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) public  {\\r\\n        _setApprovalForAll(msgSender(), operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC1155-isApprovedForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(address account, address operator) public view  returns (bool) {\\r\\n        LibERC1155.ERC1155Storage storage es = LibERC1155.erc1155Storage();\\r\\n\\r\\n        return es.operatorApprovals[account][operator];\\r\\n    }\\r\\n    \\r\\n}\\r\\n\",\"keccak256\":\"0xd10431d55a295dae089e745b8f7c3cfb56b8d114f1a0032f8ee3029fc2649881\",\"license\":\"MIT\"},\"contracts/facets/Tokens/ERC1155/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\r\\n *\\r\\n * _Available since v3.1._\\r\\n */\\r\\ninterface IERC1155 {\\r\\n    /**\\r\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\r\\n     *\\r\\n     * If an {URI} event was emitted for `id`, the standard\\r\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\r\\n     * returned by {IERC1155MetadataURI-uri}.\\r\\n     */\\r\\n    event URI(string value, uint256 indexed id);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     */\\r\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `accounts` and `ids` must have the same length.\\r\\n     */\\r\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC1155MetadataURI-uri}.\\r\\n     *\\r\\n     * This implementation returns the same URI for *all* token types. It relies\\r\\n     * on the token type ID substitution mechanism\\r\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\r\\n     *\\r\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\r\\n     * actual token type ID.\\r\\n     */\\r\\n    function mint(address to, uint256 id, uint256 amount, bytes memory data) external;\\r\\n\\r\\n    function mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) external;\\r\\n\\r\\n    function burn(address from, uint256 id, uint256 amount) external;\\r\\n\\r\\n    function burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xc4b5dedca297f6e634dbe618b5ac7645d9b57254ff65cd1cdd75338e7afeeab3\",\"license\":\"MIT\"},\"contracts/facets/Tokens/ERC1155/interfaces/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\r\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\r\\n *\\r\\n * _Available since v3.1._\\r\\n */\\r\\ninterface IERC1155MetadataURI  {\\r\\n    /**\\r\\n     * @dev Returns the URI for token type `id`.\\r\\n     *\\r\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\r\\n     * clients with the actual token type ID.\\r\\n     */\\r\\n    function uri(uint256 id) external view returns (string memory);\\r\\n}\",\"keccak256\":\"0x4ef49699111ec060ff59c11773f6664a9c13c74695c57701b1348dd044f20695\",\"license\":\"MIT\"},\"contracts/facets/Tokens/ERC1155/interfaces/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev _Available since v3.1._\\r\\n */\\r\\ninterface IERC1155Receiver  {\\r\\n    /**\\r\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\r\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\r\\n     *\\r\\n     * NOTE: To accept the transfer, this must return\\r\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\r\\n     * (i.e. 0xf23a6e61, or its own function selector).\\r\\n     *\\r\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\r\\n     * @param from The address which previously owned the token\\r\\n     * @param id The ID of the token being transferred\\r\\n     * @param value The amount of tokens being transferred\\r\\n     * @param data Additional data with no specified format\\r\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\r\\n     */\\r\\n    function onERC1155Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 id,\\r\\n        uint256 value,\\r\\n        bytes calldata data\\r\\n    ) external returns (bytes4);\\r\\n\\r\\n    /**\\r\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\r\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\r\\n     * been updated.\\r\\n     *\\r\\n     * NOTE: To accept the transfer(s), this must return\\r\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\r\\n     * (i.e. 0xbc197c81, or its own function selector).\\r\\n     *\\r\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\r\\n     * @param from The address which previously owned the token\\r\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\r\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\r\\n     * @param data Additional data with no specified format\\r\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\r\\n     */\\r\\n    function onERC1155BatchReceived(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256[] calldata ids,\\r\\n        uint256[] calldata values,\\r\\n        bytes calldata data\\r\\n    ) external returns (bytes4);\\r\\n}\\r\\n\",\"keccak256\":\"0x903479627911c42b944018e3af01eecab68fbc134c6002f8fdc21d1626abf762\",\"license\":\"MIT\"},\"contracts/facets/Tokens/ERC1155/interfaces/IERC1155Transfer.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\ninterface IERC1155Transfer{\\r\\n\\r\\n\\r\\n /**\\r\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\r\\n     *\\r\\n     * Emits a {TransferSingle} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\r\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\r\\n     * acceptance magic value.\\r\\n     */\\r\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\r\\n    \\r\\n    /**\\r\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\r\\n     *\\r\\n     * Emits a {TransferBatch} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `ids` and `amounts` must have the same length.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\r\\n     * acceptance magic value.\\r\\n     */\\r\\n    function safeBatchTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256[] calldata ids,\\r\\n        uint256[] calldata amounts,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n      /**\\r\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `operator` cannot be the caller.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\r\\n     *\\r\\n     * See {setApprovalForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\r\\n\\r\\n}\",\"keccak256\":\"0x1fba6f123b029993faac5769a036f58dd1ea79ce27136031aa2f366e982b0737\"},\"contracts/facets/Tokens/ERC1155/internals/iERC1155.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../libraries/LibERC1155.sol\\\";\\r\\nimport \\\"./iERC1155ContractTransfer.sol\\\";\\r\\nimport \\\"../interfaces/IERC1155Transfer.sol\\\";\\r\\nimport \\\"../interfaces/IERC1155Receiver.sol\\\";\\r\\nimport \\\"../../../../libraries/utils/Address.sol\\\";\\r\\n\\r\\nimport {iOwnership} from \\\"../../../Ownership/_Ownership.sol\\\";\\r\\n\\r\\n\\r\\ncontract iERC1155 is iERC1155ContractTransfer, iOwnership {\\r\\n    using Address for address;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\r\\n     * substitution mechanism\\r\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\r\\n     *\\r\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\r\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\r\\n     * clients with the token type ID.\\r\\n     *\\r\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\r\\n     * interpreted by clients as\\r\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\r\\n     * for token type ID 0x4cce0.\\r\\n     *\\r\\n     * See {uri}.\\r\\n     *\\r\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\r\\n     * this function emits no events.\\r\\n     */\\r\\n    function _setURI(string memory newuri) internal {\\r\\n        LibERC1155.ERC1155Storage storage es = LibERC1155.erc1155Storage();\\r\\n        es.uri = newuri;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\r\\n     *\\r\\n     * Emits a {TransferSingle} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\r\\n     * acceptance magic value.\\r\\n     */\\r\\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal {\\r\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\r\\n\\r\\n        LibERC1155.ERC1155Storage storage es = LibERC1155.erc1155Storage();\\r\\n        address operator = msgSender();\\r\\n        uint256[] memory ids = LibERC1155._asSingletonArray(id);\\r\\n        uint256[] memory amounts = LibERC1155._asSingletonArray(amount);\\r\\n\\r\\n        es.balance[id][to] += amount;\\r\\n        es.totalSupply += amount;\\r\\n        emit TransferSingle(operator, address(0), to, id, amount);\\r\\n\\r\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\r\\n     *\\r\\n     * Emits a {TransferBatch} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `ids` and `amounts` must have the same length.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\r\\n     * acceptance magic value.\\r\\n     */\\r\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal {\\r\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\r\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\r\\n        uint256 _totalSupply;\\r\\n        LibERC1155.ERC1155Storage storage es = LibERC1155.erc1155Storage();\\r\\n\\r\\n        address operator = msgSender();\\r\\n\\r\\n        for (uint256 i = 0; i < ids.length; i++) {\\r\\n            es.balance[ids[i]][to] += amounts[i];\\r\\n            _totalSupply += amounts[i];\\r\\n        }\\r\\n        es.totalSupply = _totalSupply;\\r\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\r\\n\\r\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\r\\n     *\\r\\n     * Emits a {TransferSingle} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `from` must have at least `amount` tokens of token type `id`.\\r\\n     */\\r\\n    function _burn(address from, uint256 id, uint256 amount) internal {\\r\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\r\\n\\r\\n        LibERC1155.ERC1155Storage storage es = LibERC1155.erc1155Storage();\\r\\n\\r\\n        address operator = msgSender();\\r\\n        uint256[] memory ids = LibERC1155._asSingletonArray(id);\\r\\n        uint256[] memory amounts = LibERC1155._asSingletonArray(amount);\\r\\n\\r\\n        uint256 fromBalance = es.balance[id][from];\\r\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\r\\n        require(es.totalSupply >= amount, \\\"Exceeds total supply.\\\");\\r\\n        unchecked {\\r\\n            es.balance[id][from] = fromBalance - amount;\\r\\n            es.totalSupply -= amount;\\r\\n        }\\r\\n\\r\\n        emit TransferSingle(operator, from, address(0), id, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\r\\n     *\\r\\n     * Emits a {TransferBatch} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `ids` and `amounts` must have the same length.\\r\\n     */\\r\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) internal {\\r\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\r\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\r\\n\\r\\n        LibERC1155.ERC1155Storage storage es = LibERC1155.erc1155Storage();\\r\\n        address operator = msgSender();\\r\\n\\r\\n        uint256 _totalAmount;\\r\\n        for (uint256 i = 0; i < ids.length; i++) {\\r\\n            uint256 id = ids[i];\\r\\n            uint256 amount = amounts[i];\\r\\n            _totalAmount += amount;\\r\\n\\r\\n            uint256 fromBalance = es.balance[id][from];\\r\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\r\\n            require(es.totalSupply >= _totalAmount, \\\"Exceeds total supply.\\\");\\r\\n            unchecked {\\r\\n                es.balance[id][from] = fromBalance - amount;\\r\\n            }\\r\\n        }\\r\\n        es.totalSupply -= _totalAmount;\\r\\n\\r\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\r\\n    }\\r\\n\\r\\n    \\r\\n}\\r\\n\",\"keccak256\":\"0x309447f5d09a0118c953a9cf2089978e7d3d915b343fa106799986933a5bb5bf\"},\"contracts/facets/Tokens/ERC1155/internals/iERC1155ContractTransfer.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../interfaces/IERC1155Receiver.sol\\\";\\r\\nimport \\\"../../../../libraries/utils/Address.sol\\\";\\r\\nimport \\\"./iERC1155Receiver.sol\\\";\\r\\n\\r\\n//Safety check for transfers to contracts\\r\\ncontract iERC1155ContractTransfer is iERC1155Receiver {\\r\\n    \\r\\n    using Address for address;\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\r\\n     */\\r\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\r\\n     * transfers.\\r\\n     */\\r\\n   /**\\r\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\r\\n     * transfers.\\r\\n     */\\r\\n    event TransferBatch(\\r\\n        address indexed operator,\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256[] ids,\\r\\n        uint256[] values\\r\\n    );\\r\\n\\r\\n     function _doSafeTransferAcceptanceCheck(\\r\\n        address operator,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 id,\\r\\n        uint256 amount,\\r\\n        bytes memory data\\r\\n    ) internal {\\r\\n        if (to.isContract()) {\\r\\n            if( to == address(this)){\\r\\n               return;\\r\\n            }\\r\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\r\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\r\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\r\\n                }\\r\\n            } catch Error(string memory reason) {\\r\\n                revert(reason);\\r\\n            } catch {\\r\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _doSafeBatchTransferAcceptanceCheck(\\r\\n        address operator,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory amounts,\\r\\n        bytes memory data\\r\\n    ) internal {\\r\\n        if (to.isContract()) {\\r\\n            if( to == address(this)){\\r\\n               return;\\r\\n            }\\r\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\r\\n                bytes4 response\\r\\n            ) {\\r\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\r\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\r\\n                }\\r\\n            } catch Error(string memory reason) {\\r\\n                revert(reason);\\r\\n            } catch {\\r\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x929836d5a0c4a3961eb6d8c0dbc85213a50dff7fca377dd4df6e5e92832ab352\"},\"contracts/facets/Tokens/ERC1155/internals/iERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev _Available since v3.1._\\r\\n */\\r\\ncontract iERC1155Receiver   {\\r\\n\\r\\n    function _onERC1155Received(\\r\\n    ) internal pure returns (bytes4){\\r\\n        return 0xf23a6e61;\\r\\n    }\\r\\n    function _onERC1155BatchReceived(\\r\\n    ) internal pure returns (bytes4){\\r\\n        return 0xbc197c81;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbeaf6ce27c1d8a0f9e54061b5cd887071a88a229e9ce742ad51d01e915b5b459\",\"license\":\"MIT\"},\"contracts/facets/Tokens/ERC1155/internals/iERC1155Transfer.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\nimport {iERC2771Recipient} from \\\"../../../ERC2771Recipient/_ERC2771Recipient.sol\\\";    \\r\\nimport \\\"../libraries/LibERC1155.sol\\\";\\r\\nimport \\\"./iERC1155ContractTransfer.sol\\\";\\r\\nimport \\\"../interfaces/IERC1155Transfer.sol\\\";\\r\\n\\r\\ncontract iERC1155Transfer is iERC1155ContractTransfer, iERC2771Recipient {\\r\\n    /**\\r\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\r\\n     * `approved`.\\r\\n     */\\r\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\r\\n\\r\\n    /**\\r\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\r\\n     * transfers.\\r\\n     */\\r\\n\\r\\n    function _safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes memory data) internal {\\r\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\r\\n        LibERC1155.ERC1155Storage storage es = LibERC1155.erc1155Storage();\\r\\n        address operator = msgSender(); \\r\\n        uint256[] memory ids = LibERC1155._asSingletonArray(id);\\r\\n        uint256[] memory amounts = LibERC1155._asSingletonArray(amount);\\r\\n\\r\\n        uint256 fromBalance = es.balance[id][from];\\r\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\r\\n        unchecked {\\r\\n            es.balance[id][from] = fromBalance - amount;\\r\\n        }\\r\\n        es.balance[id][to] += amount;\\r\\n        emit TransferSingle(operator, from, to, id, amount);\\r\\n\\r\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\r\\n     *\\r\\n     * Emits a {TransferBatch} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\r\\n     * acceptance magic value.\\r\\n     */\\r\\n    function _safeBatchTransferFrom(address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal {\\r\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\r\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\r\\n        LibERC1155.ERC1155Storage storage es = LibERC1155.erc1155Storage();\\r\\n        address operator = msgSender();\\r\\n\\r\\n        for (uint256 i = 0; i < ids.length; ++i) {\\r\\n            uint256 id = ids[i];\\r\\n            uint256 amount = amounts[i];\\r\\n\\r\\n            uint256 fromBalance = es.balance[id][from];\\r\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\r\\n            unchecked {\\r\\n                es.balance[id][from] = fromBalance - amount;\\r\\n            }\\r\\n            es.balance[id][to] += amount;\\r\\n        }\\r\\n\\r\\n        emit TransferBatch(operator, from, to, ids, amounts);\\r\\n\\r\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     */\\r\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal {\\r\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\r\\n\\r\\n        LibERC1155.ERC1155Storage storage es = LibERC1155.erc1155Storage();\\r\\n        es.operatorApprovals[owner][operator] = approved;\\r\\n        emit ApprovalForAll(owner, operator, approved);\\r\\n    }\\r\\n\\r\\n    \\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0xbf776bb883cccddbaa660798a6e0f972c01864c9ee17fe9bf7ef3d0738a8da4f\"},\"contracts/facets/Tokens/ERC1155/libraries/LibERC1155.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\nlibrary LibERC1155 {\\r\\n    bytes32 constant STORAGE_ERC1155 = \\\"diamond.storage.erc1155\\\";\\r\\n\\r\\n    struct ERC1155Storage {\\r\\n        // Mapping from token ID to account balances\\r\\n        mapping(uint256 => mapping(address => uint256)) balance;\\r\\n        // Mapping from account to operator approvals\\r\\n        mapping(address => mapping(address => bool)) operatorApprovals;\\r\\n        // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\r\\n        string uri;\\r\\n        uint256 totalSupply;\\r\\n    }\\r\\n\\r\\n    function erc1155Storage() internal pure returns (ERC1155Storage storage es_) {\\r\\n        bytes32 erc1155_key = STORAGE_ERC1155;\\r\\n        assembly {\\r\\n            es_.slot := erc1155_key\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getBalance(uint256 tokenId, address user) internal view returns (uint256 balance_) {\\r\\n        ERC1155Storage storage es = erc1155Storage();\\r\\n        balance_ = es.balance[tokenId][user];\\r\\n    }\\r\\n\\r\\n    function getOperatorApproval(address user, address operator) internal view returns (bool approved_) {\\r\\n        ERC1155Storage storage es = erc1155Storage();\\r\\n        approved_ = es.operatorApprovals[user][operator];\\r\\n    }\\r\\n    function _asSingletonArray(uint256 element) internal pure  returns (uint256[] memory) {\\r\\n        uint256[] memory array = new uint256[](1);\\r\\n        array[0] = element;\\r\\n\\r\\n        return array;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2b0592f9db824744321e8eb08cfed2fb6f7ee07e0acd5d5daf3fc3e4c3318779\"},\"contracts/facets/Tokens/ERC20/libraries/LibERC20.sol\":{\"content\":\"pragma solidity ^0.8.6;\\r\\n\\r\\nlibrary LibERC20{\\r\\n    uint256 public constant PRIMARY_CURRENCY_ID = 0; \\r\\n    bytes32 constant ERC20_STORAGE_POSITION = keccak256(\\\"diamond.standard.erc20.storage\\\");\\r\\n    struct ERC20_Storage{\\r\\n        uint256 totalSupply;\\r\\n        string name;\\r\\n        string symbol;\\r\\n    }\\r\\n\\r\\n    function erc20Storage() internal pure returns (ERC20_Storage storage es){\\r\\n        bytes32 ERC20_STORAGE_POSITION = ERC20_STORAGE_POSITION;\\r\\n        assembly{\\r\\n            es.slot := ERC20_STORAGE_POSITION\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _setName(string memory _name) internal{\\r\\n        ERC20_Storage storage es = erc20Storage();\\r\\n        es.name = _name;\\r\\n    }\\r\\n    function _setSymbol(string memory _symbol) internal{\\r\\n        ERC20_Storage storage es = erc20Storage();\\r\\n        es.symbol = _symbol;\\r\\n    }\\r\\n    function getName() internal view returns(string memory name_) {\\r\\n        name_ = erc20Storage().name;\\r\\n    }\\r\\n    function getSymbol() internal view returns(string memory name_) {\\r\\n        name_ = erc20Storage().symbol;\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x5541de15add5c7fabeeda142ada2c091d8378a8dfc2133a63dea48632554ab21\"},\"contracts/libraries/utils/Address.sol\":{\"content\":\"library Address {\\r\\n\\r\\n    /**\\r\\n     * Returns whether the target address is a contract\\r\\n     * @dev This function will return false if invoked during the constructor of a contract,\\r\\n     * as the code is not actually created until after the constructor finishes.\\r\\n     * @param account address of the account to check\\r\\n     * @return whether the target address is a contract\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        uint256 size;\\r\\n        // XXX Currently there is no better way to check if there is a contract in an address\\r\\n        // than to check the size of the code at that address.\\r\\n        // See https://ethereum.stackexchange.com/a/14016/36603\\r\\n        // for more details about how this works.\\r\\n        // TODO Check this again before the Serenity release, because all addresses will be\\r\\n        // contracts then.\\r\\n        // solium-disable-next-line security/no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x332f7fa5b7e5de602575ce60b90e9f003ef7b6c5f6440064deb33ecca39c04d0\"},\"contracts/libraries/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n    function msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc0396a4816197ac7b903c3d4f8a5c9ea28e908c74cf9f48b89f51f55aa95bc36\",\"license\":\"MIT\"},\"contracts/libraries/utils/Incrementer.sol\":{\"content\":\"pragma solidity ^0.8.6;\\r\\n\\r\\nlibrary Incrementer {\\r\\n\\r\\n     function decrementKey(bytes28 self) internal pure returns( bytes28 ){\\r\\n        if( bytes8(self)  == bytes8(0) ) {\\r\\n            return self;\\r\\n        }\\r\\n        bytes8 decrementedIndex = bytes8( uint64( bytes8( self ) ) - 1 );\\r\\n        bytes28 decrementedKey = bytes28( abi.encodePacked(decrementedIndex, bytes20( self << 64) ) );\\r\\n        return decrementedKey ;\\r\\n    }\\r\\n    \\r\\n     function incrementKey(bytes28 self) internal pure returns( bytes28 ){\\r\\n        bytes8 decrementedIndex = bytes8( uint64( bytes8( self ) ) + 1 );\\r\\n        bytes28 decrementedKey = bytes28( abi.encodePacked(decrementedIndex, bytes20( self << 64) ) );\\r\\n        return decrementedKey ;\\r\\n    }\\r\\n    function decrementIndex(bytes8 self) internal returns( bytes8 decrementMaxIndex_ ){\\r\\n        decrementMaxIndex_ = bytes8( uint64( self ) - 1 );\\r\\n    }\\r\\n    function incrementIndex(bytes8 self) internal returns( bytes8 incrementMaxIndex_ ){\\r\\n        incrementMaxIndex_ = bytes8( uint64( self ) + 1 );\\r\\n    }\\r\\n}\",\"keccak256\":\"0xfef14fdef8f3de3f0ab8961bc9222df94f51ff451517768109c0cebcd165cd81\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600e575f5ffd5b50611cbf8061001c5f395ff3fe608060405234801561000f575f5ffd5b50600436106100b1575f3560e01c80639e2c8a5b1161006e5780639e2c8a5b14610157578063b81e3c891461016a578063becf89a11461017d578063c255260414610190578063f02883c9146101a3578063f99b7d75146101b6575f5ffd5b80630bd65c0b146100b55780632090b0d3146100db5780632510427c146100f0578063677902f4146101035780636972f8db146101165780639a7614f11461012f575b5f5ffd5b6100c86100c3366004611324565b6101c9565b6040519081526020015b60405180910390f35b6100ee6100e9366004611362565b610364565b005b6100ee6100fe366004611324565b6104cf565b6100ee610111366004611362565b610618565b60408051620f4240815262f424006020820152016100d2565b61014261013d3660046113a3565b610758565b60405163ffffffff90911681526020016100d2565b6100ee6101653660046113ba565b6107e6565b6100ee610178366004611543565b6107fd565b6100ee61018b366004611677565b610879565b6100c861019e3660046113a3565b610a90565b6100ee6101b13660046113a3565b610af9565b6100ee6101c4366004611786565b610b7c565b6001600160a01b038381165f90815260208181526040808320858452909152812080549192909190811690839061020d90600160a81b900463ffffffff16426117cd565b835490915061022590600160a01b900460ff16610b8f565b63ffffffff168163ffffffff1610156102595760405162461bcd60e51b8152600401610250906117ef565b60405180910390fd5b85836001015f82825461026c919061184c565b909155505082545f90610298908890600160a01b810460ff1690600160a81b900463ffffffff16610c19565b90505f6102a5888361185f565b90506102d6732d08bdf3c61834f76decaf6e85ffaecfef02e6058a5f8560405180602001604052805f815250610d2a565b610305732d08bdf3c61834f76decaf6e85ffaecfef02e605855f8b60405180602001604052805f815250610d2a565b604080516001600160a01b038b168152602081018a9052908101839052606081018890527f1b4835b6652e6ff440df539e52011c511ae737f525419fe13dbfb69557e0449f9060800160405180910390a19450505050505b9392505050565b5f5f5f61036f610efe565b6001600160a01b0316815260208082019290925260409081015f90812085825290925290208054909150600160a81b900463ffffffff16156103c35760405162461bcd60e51b815260040161025090611872565b6040518060a001604052806103d6610efe565b6001600160a01b031681526020018460038111156103f6576103f66118c8565b815263ffffffff4216602080830191909152600160408084019190915260609092018790526001600160a01b038089165f9081528083528381208782528352929092208351815493166001600160a01b0319841681178255918401519092909183916001600160a81b03191617600160a01b83600381111561047a5761047a6118c8565b02179055506040820151815460608401511515600160c81b0260ff60c81b1963ffffffff909316600160a81b029290921664ffffffffff60a81b19909116171781556080909101516001909101555050505050565b6001600160a01b0383165f9081526020818152604080832084845290915281206001810180549192859261050490849061184c565b909155505080545f9061052490600160a81b900463ffffffff16426117cd565b825490915061053c90600160a01b900460ff16610b8f565b63ffffffff168163ffffffff1610156105675760405162461bcd60e51b8152600401610250906117ef565b81545f9061058e908690600160a01b810460ff1690600160a81b900463ffffffff16610c19565b90506105bf732d08bdf3c61834f76decaf6e85ffaecfef02e605875f8460405180602001604052805f815250610d2a565b604080516001600160a01b038816815260208101879052908101829052606081018590527f1b4835b6652e6ff440df539e52011c511ae737f525419fe13dbfb69557e0449f9060800160405180910390a1505050505050565b61064784732d08bdf3c61834f76decaf6e85ffaecfef02e6055f8660405180602001604052805f815250610d2a565b5f5f5f610652610efe565b6001600160a01b0316815260208082019290925260409081015f90812085825290925290208054909150600160a81b900463ffffffff16156106a65760405162461bcd60e51b815260040161025090611872565b6040518060a001604052806106b9610efe565b6001600160a01b031681526020018460038111156106d9576106d96118c8565b815263ffffffff42166020808301919091525f604080840182905260609093018890526001600160a01b03808a16825281835283822087835283529290208351815493166001600160a01b0319841681178255918401519092909183916001600160a81b03191617600160a01b83600381111561047a5761047a6118c8565b5f5f5f5f610764610efe565b6001600160a01b0316815260208082019290925260409081015f90812086825290925281208054909250600160a81b810463ffffffff1691906107b090600160a01b900460ff16610b8f565b90506107bc81836118dc565b63ffffffff164211156107da576107d382426117cd565b93506107de565b5f93505b505050919050565b6107f86107f1610efe565b83836101c9565b505050565b5f5b6001855161080d919061184c565b8110156108725761086a848281518110610829576108296118f8565b6020026020010151848381518110610843576108436118f8565b602002602001015184848151811061085d5761085d6118f8565b6020026020010151610b7c565b6001016107ff565b5050505050565b610881610f0c565b80518251146108e15760405162461bcd60e51b815260206004820152602660248201527f496e70757420706172616d6574657273206d75737420686176652073616d65206044820152650d8cadccee8d60d31b6064820152608401610250565b5f5b600182516108f1919061184c565b8160ff161015610a5457818160ff1681518110610910576109106118f8565b60200260200101516040015161ffff1661ffff8016101561098b5760405162461bcd60e51b815260206004820152602f60248201527f52617465496e63726561736553746f704475726174696f6e206d75737420626560448201526e1030903ab4b73a189b103a3cb8329760891b6064820152608401610250565b818160ff16815181106109a0576109a06118f8565b602002602001015160015f858460ff16815181106109c0576109c06118f8565b602002602001015160038111156109d9576109d96118c8565b60038111156109ea576109ea6118c8565b815260208082019290925260409081015f208351815493850151949092015161ffff9081166401000000000265ffff0000000019958216620100000263ffffffff199095169190931617929092179290921691909117905580610a4c8161190c565b9150506108e3565b507f502e2557babc41671f9b2f46ef02dbc49733f00beb6e6ccc5d52ca5bf89737cc81604051610a84919061192a565b60405180910390a15050565b5f5f5f5f610a9c610efe565b6001600160a01b0316815260208082019290925260409081015f90812086825290925290206001810154815491925090600160a01b810460ff1690600160a81b900463ffffffff16610aef838383610c19565b9695505050505050565b610b2f610b04610efe565b732d08bdf3c61834f76decaf6e85ffaecfef02e6055f8460405180602001604052805f815250610d2a565b7f63942f00aa3067c74d1ae2965839be9e4a7d64c045dea45ca8e7f2a59c4e4b86610b58610efe565b604080516001600160a01b039092168252602082018490520160405180910390a150565b6107f8610b87610efe565b848484610618565b5f6001826003811115610ba457610ba46118c8565b03610bb3575062093a80919050565b6002826003811115610bc757610bc76118c8565b03610bd6575062127500919050565b6003826003811115610bea57610bea6118c8565b03610bf957506224ea00919050565b5f826003811115610c0c57610c0c6118c8565b03610c1457505f5b919050565b5f80610c2583426117cd565b90505f846003811115610c3a57610c3a6118c8565b03610ca857610ca1858260015f805b6003811115610c5a57610c5a6118c8565b815260208082019290925260409081015f208151606081018352905461ffff8082168352620100008204811694830194909452640100000000900490921690820152610f7d565b9150610d22565b6001846003811115610cbc57610cbc6118c8565b03610ccf57610ca1858260015f81610c49565b6002846003811115610ce357610ce36118c8565b03610cf757610ca1858260015f6002610c49565b6003846003811115610d0b57610d0b6118c8565b03610d2257610d1f858260015f6003610c49565b91505b509392505050565b6001600160a01b038416610d8e5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610250565b7f6469616d6f6e642e73746f726167652e657263313135350000000000000000005f610db8610efe565b90505f610dc486611022565b90505f610dd086611022565b5f888152602086815260408083206001600160a01b038e16845290915290205490915086811015610e565760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b6064820152608401610250565b5f888152602086815260408083206001600160a01b038e8116855292528083208a85039055908b16825281208054899290610e9290849061185f565b909155505060408051898152602081018990526001600160a01b03808c16928d821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610ef2848b8b8b8b8b61106b565b50505050505050505050565b5f610f07611220565b905090565b610f14611273565b6001600160a01b0316610f25610efe565b6001600160a01b031614610f7b5760405162461bcd60e51b815260206004820152601b60248201527f4d757374206265207468652045636f73797374656d206f776e657200000000006044820152606401610250565b565b5f816040015161ffff168363ffffffff161061100557610fa68483846040015161ffff166112a5565b610fb0908261185f565b90505f826040015161ffff1684610fc791906117cd565b9050610fdf835f0151846020015185604001516112f9565b610fed9061ffff1682611994565b610ffd9063ffffffff168361185f565b91505061035d565b6110108483856112a5565b61101a908261185f565b949350505050565b6040805160018082528183019092526060915f91906020808301908036833701905050905082815f8151811061105a5761105a6118f8565b602090810291909101015292915050565b6001600160a01b0384163b15611218576001600160a01b03841630146112185760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906110bf90899089908890889088906004016119e8565b6020604051808303815f875af19250505080156110f9575060408051601f3d908101601f191682019092526110f691810190611a2c565b60015b6111a557611105611a53565b806308c379a00361113e5750611119611a6b565b806111245750611140565b8060405162461bcd60e51b81526004016102509190611ae7565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610250565b6001600160e01b0319811663f23a6e6160e01b146112165760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610250565b505b505050505050565b5f6014361080159061125b57507f413a4c31c13c7c3de0c7da37be5d779b152baf3f21a1cb760fda41eb8ca97776546001600160a01b031633145b1561126d575060131936013560601c90565b50335b90565b5f610f077fd00049dc7109015045860694acecd3dc33338404aaf6e55a1c98a2bf41477b85546001600160a01b031690565b81515f906112b890839061ffff16611994565b60026112c48185611c0b565b856020015161ffff166112d79190611994565b6112e19190611c1f565b6112eb91906118dc565b63ffffffff16949350505050565b5f6113048284611c52565b61101a9085611c6f565b80356001600160a01b0381168114610c14575f5ffd5b5f5f5f60608486031215611336575f5ffd5b61133f8461130e565b95602085013595506040909401359392505050565b803560048110610c14575f5ffd5b5f5f5f5f60808587031215611375575f5ffd5b61137e8561130e565b93506020850135925061139360408601611354565b9396929550929360600135925050565b5f602082840312156113b3575f5ffd5b5035919050565b5f5f604083850312156113cb575f5ffd5b50508035926020909101359150565b634e487b7160e01b5f52604160045260245ffd5b6060810181811067ffffffffffffffff8211171561140e5761140e6113da565b60405250565b601f8201601f1916810167ffffffffffffffff8111828210171561143a5761143a6113da565b6040525050565b5f67ffffffffffffffff82111561145a5761145a6113da565b5060051b60200190565b5f82601f830112611473575f5ffd5b813561147e81611441565b60405161148b8282611414565b80915082815260208101915060208360051b8601019250858311156114ae575f5ffd5b602085015b838110156114cb5780358352602092830192016114b3565b5095945050505050565b5f82601f8301126114e4575f5ffd5b81356114ef81611441565b6040516114fc8282611414565b80915082815260208101915060208360051b86010192508583111561151f575f5ffd5b602085015b838110156114cb5761153581611354565b835260209283019201611524565b5f5f5f5f60808587031215611556575f5ffd5b843567ffffffffffffffff81111561156c575f5ffd5b8501601f8101871361157c575f5ffd5b803561158781611441565b6040516115948282611414565b80915082815260208101915060208360051b8501019250898311156115b7575f5ffd5b6020840193505b828410156115e0576115cf8461130e565b8252602093840193909101906115be565b9650505050602085013567ffffffffffffffff8111156115fe575f5ffd5b61160a87828801611464565b935050604085013567ffffffffffffffff811115611626575f5ffd5b611632878288016114d5565b925050606085013567ffffffffffffffff81111561164e575f5ffd5b61165a87828801611464565b91505092959194509250565b803561ffff81168114610c14575f5ffd5b5f5f60408385031215611688575f5ffd5b823567ffffffffffffffff81111561169e575f5ffd5b6116aa858286016114d5565b925050602083013567ffffffffffffffff8111156116c6575f5ffd5b8301601f810185136116d6575f5ffd5b80356116e181611441565b6040516116ee8282611414565b828152602060609093028401830192810191508783111561170d575f5ffd5b6020840193505b82841015611778576060848903121561172b575f5ffd5b604051611737816113ee565b61174085611666565b815261174e60208601611666565b602082015261175f60408601611666565b6040820152825260609390930192602090910190611714565b809450505050509250929050565b5f5f5f60608486031215611798575f5ffd5b833592506117a860208501611354565b929592945050506040919091013590565b634e487b7160e01b5f52601160045260245ffd5b63ffffffff82811682821603908111156117e9576117e96117b9565b92915050565b6020808252603d908201527f43616e277420756e7374616b65207265776172647320756e74696c207468652060408201527f6d696e696e6d756d206475726174696f6e20686173207061737365642e000000606082015260800190565b818103818111156117e9576117e96117b9565b808201808211156117e9576117e96117b9565b60208082526036908201527f5374616b65496420616c7265616479206578697374732c20706c6561736520636040820152751c99585d194818481d5b9a5c5d59481cdd185ad9525960521b606082015260800190565b634e487b7160e01b5f52602160045260245ffd5b63ffffffff81811683821601908111156117e9576117e96117b9565b634e487b7160e01b5f52603260045260245ffd5b5f60ff821660ff8103611921576119216117b9565b60010192915050565b602080825282518282018190525f918401906040840190835b8181101561198957835161ffff815116845261ffff602082015116602085015261ffff604082015116604085015250606083019250602084019350600181019050611943565b509095945050505050565b63ffffffff81811683821602908116908181146119b3576119b36117b9565b5092915050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190525f90611a21908301846119ba565b979650505050505050565b5f60208284031215611a3c575f5ffd5b81516001600160e01b03198116811461035d575f5ffd5b5f60033d11156112705760045f5f3e505f5160e01c90565b5f60443d1015611a785790565b6040513d600319016004823e80513d602482011167ffffffffffffffff82111715611aa257505090565b808201805167ffffffffffffffff811115611abe575050505090565b3d8401600319018282016020011115611ad8575050505090565b610d2260208285010185611414565b602081525f61035d60208301846119ba565b6001815b6001841115611b3457808504811115611b1857611b186117b9565b6001841615611b2657908102905b60019390931c928002611afd565b935093915050565b5f82611b4a575060016117e9565b81611b5657505f6117e9565b8160018114611b6c5760028114611b7657611ba7565b60019150506117e9565b60ff841115611b8757611b876117b9565b6001841b915063ffffffff821115611ba157611ba16117b9565b506117e9565b5060208310610133831016604e8410600b8410161715611bde575081810a63ffffffff811115611bd957611bd96117b9565b6117e9565b611bed63ffffffff8484611af9565b8063ffffffff04821115611c0357611c036117b9565b029392505050565b5f61035d60ff841663ffffffff8416611b3c565b5f63ffffffff831680611c4057634e487b7160e01b5f52601260045260245ffd5b8063ffffffff84160491505092915050565b61ffff81811683821602908116908181146119b3576119b36117b9565b61ffff81811683821601908111156117e9576117e96117b956fea26469706673582212208fb8ddb2c30b002d058be83aca92c003dbcb9bde7c70d8d3f45a948311bca00064736f6c634300081c0033",
  "deployedBytecode": "0x608060405234801561000f575f5ffd5b50600436106100b1575f3560e01c80639e2c8a5b1161006e5780639e2c8a5b14610157578063b81e3c891461016a578063becf89a11461017d578063c255260414610190578063f02883c9146101a3578063f99b7d75146101b6575f5ffd5b80630bd65c0b146100b55780632090b0d3146100db5780632510427c146100f0578063677902f4146101035780636972f8db146101165780639a7614f11461012f575b5f5ffd5b6100c86100c3366004611324565b6101c9565b6040519081526020015b60405180910390f35b6100ee6100e9366004611362565b610364565b005b6100ee6100fe366004611324565b6104cf565b6100ee610111366004611362565b610618565b60408051620f4240815262f424006020820152016100d2565b61014261013d3660046113a3565b610758565b60405163ffffffff90911681526020016100d2565b6100ee6101653660046113ba565b6107e6565b6100ee610178366004611543565b6107fd565b6100ee61018b366004611677565b610879565b6100c861019e3660046113a3565b610a90565b6100ee6101b13660046113a3565b610af9565b6100ee6101c4366004611786565b610b7c565b6001600160a01b038381165f90815260208181526040808320858452909152812080549192909190811690839061020d90600160a81b900463ffffffff16426117cd565b835490915061022590600160a01b900460ff16610b8f565b63ffffffff168163ffffffff1610156102595760405162461bcd60e51b8152600401610250906117ef565b60405180910390fd5b85836001015f82825461026c919061184c565b909155505082545f90610298908890600160a01b810460ff1690600160a81b900463ffffffff16610c19565b90505f6102a5888361185f565b90506102d6732d08bdf3c61834f76decaf6e85ffaecfef02e6058a5f8560405180602001604052805f815250610d2a565b610305732d08bdf3c61834f76decaf6e85ffaecfef02e605855f8b60405180602001604052805f815250610d2a565b604080516001600160a01b038b168152602081018a9052908101839052606081018890527f1b4835b6652e6ff440df539e52011c511ae737f525419fe13dbfb69557e0449f9060800160405180910390a19450505050505b9392505050565b5f5f5f61036f610efe565b6001600160a01b0316815260208082019290925260409081015f90812085825290925290208054909150600160a81b900463ffffffff16156103c35760405162461bcd60e51b815260040161025090611872565b6040518060a001604052806103d6610efe565b6001600160a01b031681526020018460038111156103f6576103f66118c8565b815263ffffffff4216602080830191909152600160408084019190915260609092018790526001600160a01b038089165f9081528083528381208782528352929092208351815493166001600160a01b0319841681178255918401519092909183916001600160a81b03191617600160a01b83600381111561047a5761047a6118c8565b02179055506040820151815460608401511515600160c81b0260ff60c81b1963ffffffff909316600160a81b029290921664ffffffffff60a81b19909116171781556080909101516001909101555050505050565b6001600160a01b0383165f9081526020818152604080832084845290915281206001810180549192859261050490849061184c565b909155505080545f9061052490600160a81b900463ffffffff16426117cd565b825490915061053c90600160a01b900460ff16610b8f565b63ffffffff168163ffffffff1610156105675760405162461bcd60e51b8152600401610250906117ef565b81545f9061058e908690600160a01b810460ff1690600160a81b900463ffffffff16610c19565b90506105bf732d08bdf3c61834f76decaf6e85ffaecfef02e605875f8460405180602001604052805f815250610d2a565b604080516001600160a01b038816815260208101879052908101829052606081018590527f1b4835b6652e6ff440df539e52011c511ae737f525419fe13dbfb69557e0449f9060800160405180910390a1505050505050565b61064784732d08bdf3c61834f76decaf6e85ffaecfef02e6055f8660405180602001604052805f815250610d2a565b5f5f5f610652610efe565b6001600160a01b0316815260208082019290925260409081015f90812085825290925290208054909150600160a81b900463ffffffff16156106a65760405162461bcd60e51b815260040161025090611872565b6040518060a001604052806106b9610efe565b6001600160a01b031681526020018460038111156106d9576106d96118c8565b815263ffffffff42166020808301919091525f604080840182905260609093018890526001600160a01b03808a16825281835283822087835283529290208351815493166001600160a01b0319841681178255918401519092909183916001600160a81b03191617600160a01b83600381111561047a5761047a6118c8565b5f5f5f5f610764610efe565b6001600160a01b0316815260208082019290925260409081015f90812086825290925281208054909250600160a81b810463ffffffff1691906107b090600160a01b900460ff16610b8f565b90506107bc81836118dc565b63ffffffff164211156107da576107d382426117cd565b93506107de565b5f93505b505050919050565b6107f86107f1610efe565b83836101c9565b505050565b5f5b6001855161080d919061184c565b8110156108725761086a848281518110610829576108296118f8565b6020026020010151848381518110610843576108436118f8565b602002602001015184848151811061085d5761085d6118f8565b6020026020010151610b7c565b6001016107ff565b5050505050565b610881610f0c565b80518251146108e15760405162461bcd60e51b815260206004820152602660248201527f496e70757420706172616d6574657273206d75737420686176652073616d65206044820152650d8cadccee8d60d31b6064820152608401610250565b5f5b600182516108f1919061184c565b8160ff161015610a5457818160ff1681518110610910576109106118f8565b60200260200101516040015161ffff1661ffff8016101561098b5760405162461bcd60e51b815260206004820152602f60248201527f52617465496e63726561736553746f704475726174696f6e206d75737420626560448201526e1030903ab4b73a189b103a3cb8329760891b6064820152608401610250565b818160ff16815181106109a0576109a06118f8565b602002602001015160015f858460ff16815181106109c0576109c06118f8565b602002602001015160038111156109d9576109d96118c8565b60038111156109ea576109ea6118c8565b815260208082019290925260409081015f208351815493850151949092015161ffff9081166401000000000265ffff0000000019958216620100000263ffffffff199095169190931617929092179290921691909117905580610a4c8161190c565b9150506108e3565b507f502e2557babc41671f9b2f46ef02dbc49733f00beb6e6ccc5d52ca5bf89737cc81604051610a84919061192a565b60405180910390a15050565b5f5f5f5f610a9c610efe565b6001600160a01b0316815260208082019290925260409081015f90812086825290925290206001810154815491925090600160a01b810460ff1690600160a81b900463ffffffff16610aef838383610c19565b9695505050505050565b610b2f610b04610efe565b732d08bdf3c61834f76decaf6e85ffaecfef02e6055f8460405180602001604052805f815250610d2a565b7f63942f00aa3067c74d1ae2965839be9e4a7d64c045dea45ca8e7f2a59c4e4b86610b58610efe565b604080516001600160a01b039092168252602082018490520160405180910390a150565b6107f8610b87610efe565b848484610618565b5f6001826003811115610ba457610ba46118c8565b03610bb3575062093a80919050565b6002826003811115610bc757610bc76118c8565b03610bd6575062127500919050565b6003826003811115610bea57610bea6118c8565b03610bf957506224ea00919050565b5f826003811115610c0c57610c0c6118c8565b03610c1457505f5b919050565b5f80610c2583426117cd565b90505f846003811115610c3a57610c3a6118c8565b03610ca857610ca1858260015f805b6003811115610c5a57610c5a6118c8565b815260208082019290925260409081015f208151606081018352905461ffff8082168352620100008204811694830194909452640100000000900490921690820152610f7d565b9150610d22565b6001846003811115610cbc57610cbc6118c8565b03610ccf57610ca1858260015f81610c49565b6002846003811115610ce357610ce36118c8565b03610cf757610ca1858260015f6002610c49565b6003846003811115610d0b57610d0b6118c8565b03610d2257610d1f858260015f6003610c49565b91505b509392505050565b6001600160a01b038416610d8e5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610250565b7f6469616d6f6e642e73746f726167652e657263313135350000000000000000005f610db8610efe565b90505f610dc486611022565b90505f610dd086611022565b5f888152602086815260408083206001600160a01b038e16845290915290205490915086811015610e565760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b6064820152608401610250565b5f888152602086815260408083206001600160a01b038e8116855292528083208a85039055908b16825281208054899290610e9290849061185f565b909155505060408051898152602081018990526001600160a01b03808c16928d821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610ef2848b8b8b8b8b61106b565b50505050505050505050565b5f610f07611220565b905090565b610f14611273565b6001600160a01b0316610f25610efe565b6001600160a01b031614610f7b5760405162461bcd60e51b815260206004820152601b60248201527f4d757374206265207468652045636f73797374656d206f776e657200000000006044820152606401610250565b565b5f816040015161ffff168363ffffffff161061100557610fa68483846040015161ffff166112a5565b610fb0908261185f565b90505f826040015161ffff1684610fc791906117cd565b9050610fdf835f0151846020015185604001516112f9565b610fed9061ffff1682611994565b610ffd9063ffffffff168361185f565b91505061035d565b6110108483856112a5565b61101a908261185f565b949350505050565b6040805160018082528183019092526060915f91906020808301908036833701905050905082815f8151811061105a5761105a6118f8565b602090810291909101015292915050565b6001600160a01b0384163b15611218576001600160a01b03841630146112185760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906110bf90899089908890889088906004016119e8565b6020604051808303815f875af19250505080156110f9575060408051601f3d908101601f191682019092526110f691810190611a2c565b60015b6111a557611105611a53565b806308c379a00361113e5750611119611a6b565b806111245750611140565b8060405162461bcd60e51b81526004016102509190611ae7565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610250565b6001600160e01b0319811663f23a6e6160e01b146112165760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610250565b505b505050505050565b5f6014361080159061125b57507f413a4c31c13c7c3de0c7da37be5d779b152baf3f21a1cb760fda41eb8ca97776546001600160a01b031633145b1561126d575060131936013560601c90565b50335b90565b5f610f077fd00049dc7109015045860694acecd3dc33338404aaf6e55a1c98a2bf41477b85546001600160a01b031690565b81515f906112b890839061ffff16611994565b60026112c48185611c0b565b856020015161ffff166112d79190611994565b6112e19190611c1f565b6112eb91906118dc565b63ffffffff16949350505050565b5f6113048284611c52565b61101a9085611c6f565b80356001600160a01b0381168114610c14575f5ffd5b5f5f5f60608486031215611336575f5ffd5b61133f8461130e565b95602085013595506040909401359392505050565b803560048110610c14575f5ffd5b5f5f5f5f60808587031215611375575f5ffd5b61137e8561130e565b93506020850135925061139360408601611354565b9396929550929360600135925050565b5f602082840312156113b3575f5ffd5b5035919050565b5f5f604083850312156113cb575f5ffd5b50508035926020909101359150565b634e487b7160e01b5f52604160045260245ffd5b6060810181811067ffffffffffffffff8211171561140e5761140e6113da565b60405250565b601f8201601f1916810167ffffffffffffffff8111828210171561143a5761143a6113da565b6040525050565b5f67ffffffffffffffff82111561145a5761145a6113da565b5060051b60200190565b5f82601f830112611473575f5ffd5b813561147e81611441565b60405161148b8282611414565b80915082815260208101915060208360051b8601019250858311156114ae575f5ffd5b602085015b838110156114cb5780358352602092830192016114b3565b5095945050505050565b5f82601f8301126114e4575f5ffd5b81356114ef81611441565b6040516114fc8282611414565b80915082815260208101915060208360051b86010192508583111561151f575f5ffd5b602085015b838110156114cb5761153581611354565b835260209283019201611524565b5f5f5f5f60808587031215611556575f5ffd5b843567ffffffffffffffff81111561156c575f5ffd5b8501601f8101871361157c575f5ffd5b803561158781611441565b6040516115948282611414565b80915082815260208101915060208360051b8501019250898311156115b7575f5ffd5b6020840193505b828410156115e0576115cf8461130e565b8252602093840193909101906115be565b9650505050602085013567ffffffffffffffff8111156115fe575f5ffd5b61160a87828801611464565b935050604085013567ffffffffffffffff811115611626575f5ffd5b611632878288016114d5565b925050606085013567ffffffffffffffff81111561164e575f5ffd5b61165a87828801611464565b91505092959194509250565b803561ffff81168114610c14575f5ffd5b5f5f60408385031215611688575f5ffd5b823567ffffffffffffffff81111561169e575f5ffd5b6116aa858286016114d5565b925050602083013567ffffffffffffffff8111156116c6575f5ffd5b8301601f810185136116d6575f5ffd5b80356116e181611441565b6040516116ee8282611414565b828152602060609093028401830192810191508783111561170d575f5ffd5b6020840193505b82841015611778576060848903121561172b575f5ffd5b604051611737816113ee565b61174085611666565b815261174e60208601611666565b602082015261175f60408601611666565b6040820152825260609390930192602090910190611714565b809450505050509250929050565b5f5f5f60608486031215611798575f5ffd5b833592506117a860208501611354565b929592945050506040919091013590565b634e487b7160e01b5f52601160045260245ffd5b63ffffffff82811682821603908111156117e9576117e96117b9565b92915050565b6020808252603d908201527f43616e277420756e7374616b65207265776172647320756e74696c207468652060408201527f6d696e696e6d756d206475726174696f6e20686173207061737365642e000000606082015260800190565b818103818111156117e9576117e96117b9565b808201808211156117e9576117e96117b9565b60208082526036908201527f5374616b65496420616c7265616479206578697374732c20706c6561736520636040820152751c99585d194818481d5b9a5c5d59481cdd185ad9525960521b606082015260800190565b634e487b7160e01b5f52602160045260245ffd5b63ffffffff81811683821601908111156117e9576117e96117b9565b634e487b7160e01b5f52603260045260245ffd5b5f60ff821660ff8103611921576119216117b9565b60010192915050565b602080825282518282018190525f918401906040840190835b8181101561198957835161ffff815116845261ffff602082015116602085015261ffff604082015116604085015250606083019250602084019350600181019050611943565b509095945050505050565b63ffffffff81811683821602908116908181146119b3576119b36117b9565b5092915050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190525f90611a21908301846119ba565b979650505050505050565b5f60208284031215611a3c575f5ffd5b81516001600160e01b03198116811461035d575f5ffd5b5f60033d11156112705760045f5f3e505f5160e01c90565b5f60443d1015611a785790565b6040513d600319016004823e80513d602482011167ffffffffffffffff82111715611aa257505090565b808201805167ffffffffffffffff811115611abe575050505090565b3d8401600319018282016020011115611ad8575050505090565b610d2260208285010185611414565b602081525f61035d60208301846119ba565b6001815b6001841115611b3457808504811115611b1857611b186117b9565b6001841615611b2657908102905b60019390931c928002611afd565b935093915050565b5f82611b4a575060016117e9565b81611b5657505f6117e9565b8160018114611b6c5760028114611b7657611ba7565b60019150506117e9565b60ff841115611b8757611b876117b9565b6001841b915063ffffffff821115611ba157611ba16117b9565b506117e9565b5060208310610133831016604e8410600b8410161715611bde575081810a63ffffffff811115611bd957611bd96117b9565b6117e9565b611bed63ffffffff8484611af9565b8063ffffffff04821115611c0357611c036117b9565b029392505050565b5f61035d60ff841663ffffffff8416611b3c565b5f63ffffffff831680611c4057634e487b7160e01b5f52601260045260245ffd5b8063ffffffff84160491505092915050565b61ffff81811683821602908116908181146119b3576119b36117b9565b61ffff81811683821601908111156117e9576117e96117b956fea26469706673582212208fb8ddb2c30b002d058be83aca92c003dbcb9bde7c70d8d3f45a948311bca00064736f6c634300081c0033",
  "devdoc": {
    "events": {
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."
      },
      "TransferBatch(address,address,address,uint256[],uint256[])": {
        "details": "Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."
      },
      "TransferSingle(address,address,address,uint256,uint256)": {
        "details": "Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."
      }
    },
    "kind": "dev",
    "methods": {
      "unstakeVirtual(address,uint256,uint256)": {
        "params": {
          "amount": "amount to be virtually unstaked",
          "stakeId": "unique staking id",
          "staker": "reward transfer address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getGasStakeFee()": {
        "notice": "Multiply the target eth by feeScale_.  "
      },
      "stakeVirtual(address,uint256,uint8,uint256)": {
        "notice": "Swap orders having this ecosystem token as their output can stake the expected  outputted tokens and retrieve rewards IF their order is fulfilled. "
      },
      "unstakeVirtual(address,uint256,uint256)": {
        "notice": "Trusted contracts can stake users placing swap orders into this ecosystem's token."
      },
      "viewMinimumStakeDurationLeft(uint256)": {
        "notice": "Retrieves the remaining time left until the minimum stake duration is completed, zero if already completed. "
      },
      "viewReward(uint256)": {
        "notice": "Retrieves current reward amount from a given stake position.  To retrieve the reward, you must unstake after the minimum stake duration. "
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14863,
        "contract": "contracts/facets/Stake/Stake.sol:Stake",
        "label": "stakePosition",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(StakePosition)14856_storage))"
      },
      {
        "astId": 14869,
        "contract": "contracts/facets/Stake/Stake.sol:Stake",
        "label": "rewardRate",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_enum(StakeTier)14822,t_struct(RewardRate)14832_storage)"
      },
      {
        "astId": 14873,
        "contract": "contracts/facets/Stake/Stake.sol:Stake",
        "label": "approvedContracts",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(StakeTier)14822": {
        "encoding": "inplace",
        "label": "enum Stake.StakeTier",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(StakePosition)14856_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct Stake.StakePosition))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(StakePosition)14856_storage)"
      },
      "t_mapping(t_enum(StakeTier)14822,t_struct(RewardRate)14832_storage)": {
        "encoding": "mapping",
        "key": "t_enum(StakeTier)14822",
        "label": "mapping(enum Stake.StakeTier => struct Stake.RewardRate)",
        "numberOfBytes": "32",
        "value": "t_struct(RewardRate)14832_storage"
      },
      "t_mapping(t_uint256,t_struct(StakePosition)14856_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Stake.StakePosition)",
        "numberOfBytes": "32",
        "value": "t_struct(StakePosition)14856_storage"
      },
      "t_struct(RewardRate)14832_storage": {
        "encoding": "inplace",
        "label": "struct Stake.RewardRate",
        "members": [
          {
            "astId": 14827,
            "contract": "contracts/facets/Stake/Stake.sol:Stake",
            "label": "initialRate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 14829,
            "contract": "contracts/facets/Stake/Stake.sol:Stake",
            "label": "rateIncrease",
            "offset": 2,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 14831,
            "contract": "contracts/facets/Stake/Stake.sol:Stake",
            "label": "rateIncreaseStopDuration",
            "offset": 4,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(StakePosition)14856_storage": {
        "encoding": "inplace",
        "label": "struct Stake.StakePosition",
        "members": [
          {
            "astId": 14846,
            "contract": "contracts/facets/Stake/Stake.sol:Stake",
            "label": "holder",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 14849,
            "contract": "contracts/facets/Stake/Stake.sol:Stake",
            "label": "tier",
            "offset": 20,
            "slot": "0",
            "type": "t_enum(StakeTier)14822"
          },
          {
            "astId": 14851,
            "contract": "contracts/facets/Stake/Stake.sol:Stake",
            "label": "startTime",
            "offset": 21,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 14853,
            "contract": "contracts/facets/Stake/Stake.sol:Stake",
            "label": "isVirtual",
            "offset": 25,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 14855,
            "contract": "contracts/facets/Stake/Stake.sol:Stake",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}