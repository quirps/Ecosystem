{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] memory accounts,\n        uint256[] memory ids\n    ) public view virtual override returns (uint256[] memory) {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1155.sol\";\n\n/**\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\n *\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\n * clearly identified. Note: While a totalSupply of 1 might mean the\n * corresponding is an NFT, there is no guarantees that no other token with the\n * same id are not going to be minted.\n */\nabstract contract ERC1155Supply is ERC1155 {\n    mapping(uint256 => uint256) private _totalSupply;\n\n    /**\n     * @dev Total amount of tokens in with a given id.\n     */\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\n        return _totalSupply[id];\n    }\n\n    /**\n     * @dev Indicates whether any token exist with a given id, or not.\n     */\n    function exists(uint256 id) public view virtual returns (bool) {\n        return ERC1155Supply.totalSupply(id) > 0;\n    }\n\n    /**\n     * @dev See {ERC1155-_beforeTokenTransfer}.\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual override {\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        if (from == address(0)) {\n            for (uint256 i = 0; i < ids.length; ++i) {\n                _totalSupply[ids[i]] += amounts[i];\n            }\n        }\n\n        if (to == address(0)) {\n            for (uint256 i = 0; i < ids.length; ++i) {\n                uint256 id = ids[i];\n                uint256 amount = amounts[i];\n                uint256 supply = _totalSupply[id];\n                require(supply >= amount, \"ERC1155: burn amount exceeds totalSupply\");\n                unchecked {\n                    _totalSupply[id] = supply - amount;\n                }\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155Receiver.sol\";\n\n/**\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\n *\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\n * stuck.\n *\n * @dev _Available since v3.1._\n */\ncontract ERC1155Holder is ERC1155Receiver {\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Receiver.sol\";\nimport \"../../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\n     * that `ownerOf(tokenId)` is `a`.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\n        _balances[account] += amount;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport './pool/IUniswapV3PoolImmutables.sol';\nimport './pool/IUniswapV3PoolState.sol';\nimport './pool/IUniswapV3PoolDerivedState.sol';\nimport './pool/IUniswapV3PoolActions.sol';\nimport './pool/IUniswapV3PoolOwnerActions.sol';\nimport './pool/IUniswapV3PoolEvents.sol';\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool is\n    IUniswapV3PoolImmutables,\n    IUniswapV3PoolState,\n    IUniswapV3PoolDerivedState,\n    IUniswapV3PoolActions,\n    IUniswapV3PoolOwnerActions,\n    IUniswapV3PoolEvents\n{\n\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IUniswapV3PoolActions {\n    /// @notice Sets the initial price for the pool\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n    function initialize(uint160 sqrtPriceX96) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface IUniswapV3PoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n    /// snapshot is taken and the second snapshot is taken.\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (\n            int56 tickCumulativeInside,\n            uint160 secondsPerLiquidityInsideX128,\n            uint32 secondsInside\n        );\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Events emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolEvents {\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n\n    /// @notice Emitted when liquidity is minted for a given position\n    /// @param sender The address that minted the liquidity\n    /// @param owner The owner of the position and recipient of any minted liquidity\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity minted to the position range\n    /// @param amount0 How much token0 was required for the minted liquidity\n    /// @param amount1 How much token1 was required for the minted liquidity\n    event Mint(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted when fees are collected by the owner of a position\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n    /// @param owner The owner of the position for which fees are collected\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount0 The amount of token0 fees collected\n    /// @param amount1 The amount of token1 fees collected\n    event Collect(\n        address indexed owner,\n        address recipient,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount0,\n        uint128 amount1\n    );\n\n    /// @notice Emitted when a position's liquidity is removed\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n    /// @param owner The owner of the position for which liquidity is removed\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity to remove\n    /// @param amount0 The amount of token0 withdrawn\n    /// @param amount1 The amount of token1 withdrawn\n    event Burn(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted by the pool for any swaps between token0 and token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the output of the swap\n    /// @param amount0 The delta of the token0 balance of the pool\n    /// @param amount1 The delta of the token1 balance of the pool\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n    /// @param liquidity The liquidity of the pool after the swap\n    /// @param tick The log base 1.0001 of price of the pool after the swap\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick\n    );\n\n    /// @notice Emitted by the pool for any flashes of token0/token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the tokens from flash\n    /// @param amount0 The amount of token0 that was flashed\n    /// @param amount1 The amount of token1 that was flashed\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\n    event Flash(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 paid0,\n        uint256 paid1\n    );\n\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n    /// just before a mint/swap/burn.\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n    event IncreaseObservationCardinalityNext(\n        uint16 observationCardinalityNextOld,\n        uint16 observationCardinalityNextNew\n    );\n\n    /// @notice Emitted when the protocol fee is changed by the pool\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\n\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\n    /// @param sender The address that collects the protocol fees\n    /// @param recipient The address that receives the collected protocol fees\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IUniswapV3PoolImmutables {\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissioned pool actions\n/// @notice Contains pool methods that may only be called by the factory owner\ninterface IUniswapV3PoolOwnerActions {\n    /// @notice Set the denominator of the protocol's % share of the fees\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\n\n    /// @notice Collect the protocol fee accrued to the pool\n    /// @param recipient The address to which collected protocol fees should be sent\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n    /// @return amount0 The protocol fee collected in token0\n    /// @return amount1 The protocol fee collected in token1\n    function collectProtocol(\n        address recipient,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return _liquidity The amount of liquidity in the position,\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/IERC721Permit.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\n\n/// @title ERC721 with permit\n/// @notice Extension to ERC721 that includes a permit function for signature based approvals\ninterface IERC721Permit is IERC721 {\n    /// @notice The permit typehash used in the permit signature\n    /// @return The typehash for the permit\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    /// @notice The domain separator used in the permit signature\n    /// @return The domain seperator used in encoding of permit signature\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    /// @notice Approve of a specific token ID for spending by spender via signature\n    /// @param spender The account that is being approved\n    /// @param tokenId The ID of the token that is being approved for spending\n    /// @param deadline The deadline timestamp by which the call must be mined for the approve to work\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n    function permit(\n        address spender,\n        uint256 tokenId,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable;\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol';\n\nimport './IPoolInitializer.sol';\nimport './IERC721Permit.sol';\nimport './IPeripheryPayments.sol';\nimport './IPeripheryImmutableState.sol';\nimport '../libraries/PoolAddress.sol';\n\n/// @title Non-fungible token for positions\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\n/// and authorized.\ninterface INonfungiblePositionManager is\n    IPoolInitializer,\n    IPeripheryPayments,\n    IPeripheryImmutableState,\n    IERC721Metadata,\n    IERC721Enumerable,\n    IERC721Permit\n{\n    /// @notice Emitted when liquidity is increased for a position NFT\n    /// @dev Also emitted when a token is minted\n    /// @param tokenId The ID of the token for which liquidity was increased\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\n    event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\n    /// @notice Emitted when liquidity is decreased for a position NFT\n    /// @param tokenId The ID of the token for which liquidity was decreased\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\n    /// @notice Emitted when tokens are collected for a position NFT\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\n    /// @param tokenId The ID of the token for which underlying tokens were collected\n    /// @param recipient The address of the account that received the collected tokens\n    /// @param amount0 The amount of token0 owed to the position that was collected\n    /// @param amount1 The amount of token1 owed to the position that was collected\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\n\n    /// @notice Returns the position information associated with a given token ID.\n    /// @dev Throws if the token ID is not valid.\n    /// @param tokenId The ID of the token that represents the position\n    /// @return nonce The nonce for permits\n    /// @return operator The address that is approved for spending\n    /// @return token0 The address of the token0 for a specific pool\n    /// @return token1 The address of the token1 for a specific pool\n    /// @return fee The fee associated with the pool\n    /// @return tickLower The lower end of the tick range for the position\n    /// @return tickUpper The higher end of the tick range for the position\n    /// @return liquidity The liquidity of the position\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\n    function positions(uint256 tokenId)\n        external\n        view\n        returns (\n            uint96 nonce,\n            address operator,\n            address token0,\n            address token1,\n            uint24 fee,\n            int24 tickLower,\n            int24 tickUpper,\n            uint128 liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    struct MintParams {\n        address token0;\n        address token1;\n        uint24 fee;\n        int24 tickLower;\n        int24 tickUpper;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        address recipient;\n        uint256 deadline;\n    }\n\n    /// @notice Creates a new position wrapped in a NFT\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\n    /// @return tokenId The ID of the token that represents the minted position\n    /// @return liquidity The amount of liquidity for this position\n    /// @return amount0 The amount of token0\n    /// @return amount1 The amount of token1\n    function mint(MintParams calldata params)\n        external\n        payable\n        returns (\n            uint256 tokenId,\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        );\n\n    struct IncreaseLiquidityParams {\n        uint256 tokenId;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\n    /// amount0Desired The desired amount of token0 to be spent,\n    /// amount1Desired The desired amount of token1 to be spent,\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\n    /// deadline The time by which the transaction must be included to effect the change\n    /// @return liquidity The new liquidity amount as a result of the increase\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        );\n\n    struct DecreaseLiquidityParams {\n        uint256 tokenId;\n        uint128 liquidity;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\n    /// amount The amount by which liquidity will be decreased,\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\n    /// deadline The time by which the transaction must be included to effect the change\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (uint256 amount0, uint256 amount1);\n\n    struct CollectParams {\n        uint256 tokenId;\n        address recipient;\n        uint128 amount0Max;\n        uint128 amount1Max;\n    }\n\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\n    /// recipient The account that should receive the tokens,\n    /// amount0Max The maximum amount of token0 to collect,\n    /// amount1Max The maximum amount of token1 to collect\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\n    /// must be collected first.\n    /// @param tokenId The ID of the token that is being burned\n    function burn(uint256 tokenId) external payable;\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Immutable state\n/// @notice Functions that return immutable state of the router\ninterface IPeripheryImmutableState {\n    /// @return Returns the address of the Uniswap V3 factory\n    function factory() external view returns (address);\n\n    /// @return Returns the address of WETH9\n    function WETH9() external view returns (address);\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\n/// @title Periphery Payments\n/// @notice Functions to ease deposits and withdrawals of ETH\ninterface IPeripheryPayments {\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\n    /// @param recipient The address receiving ETH\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\n\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\n    /// that use ether for the input amount\n    function refundETH() external payable;\n\n    /// @notice Transfers the full amount of a token held by this contract to recipient\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\n    /// @param token The contract address of the token which will be transferred to `recipient`\n    /// @param amountMinimum The minimum amount of token required for a transfer\n    /// @param recipient The destination address of the token\n    function sweepToken(\n        address token,\n        uint256 amountMinimum,\n        address recipient\n    ) external payable;\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/IPoolInitializer.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title Creates and initializes V3 Pools\n/// @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\n/// require the pool to exist.\ninterface IPoolInitializer {\n    /// @notice Creates a new pool if it does not exist, then initializes if not initialized\n    /// @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\n    /// @param token0 The contract address of token0 of the pool\n    /// @param token1 The contract address of token1 of the pool\n    /// @param fee The fee amount of the v3 pool for the specified token pair\n    /// @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\n    /// @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\n    function createAndInitializePoolIfNecessary(\n        address token0,\n        address token1,\n        uint24 fee,\n        uint160 sqrtPriceX96\n    ) external payable returns (address pool);\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouter is IUniswapV3SwapCallback {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient; \n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}\n"
    },
    "@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\nlibrary PoolAddress {\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\n\n    /// @notice The identifying key of the pool\n    struct PoolKey {\n        address token0;\n        address token1;\n        uint24 fee;\n    }\n\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\n    /// @param tokenA The first token of a pool, unsorted\n    /// @param tokenB The second token of a pool, unsorted\n    /// @param fee The fee level of the pool\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\n    function getPoolKey(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) internal pure returns (PoolKey memory) {\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\n    }\n\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\n    /// @param factory The Uniswap V3 factory contract address\n    /// @param key The PoolKey\n    /// @return pool The contract address of the V3 pool\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\n        require(key.token0 < key.token1);\n        pool = address( \n            uint160(\n                uint256(\n                    keccak256(\n                            abi.encodePacked(\n                            hex'ff',\n                            factory,\n                            keccak256(abi.encode(key.token0, key.token1, key.fee)),\n                            POOL_INIT_CODE_HASH\n                        )\n                    )\n                )\n            )\n        );\n    }\n}\n"
    },
    "contracts/apps/AppRegistry.sol": {
      "content": "// // SPDX-License-Identifier: MIT\r\n// pragma solidity ^0.8.19;\r\n\r\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\r\n// import \"@openzeppelin/contracts/utils/Create2.sol\";\r\n// import \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\n\r\n// contract AppRegistry is Ownable {\r\n//     using EnumerableSet for EnumerableSet.Bytes32Set;\r\n\r\n//     struct AppMetadata {\r\n//         address developer;\r\n//         string name;\r\n//         bytes32 descriptionHash; // keccak256 of detailed description JSON string\r\n//         string metadataUri; // e.g., ipfs://<hash_containing_image_abi_etc>\r\n//         bool isApproved;\r\n//         uint256 version; // Simple version tracking\r\n//         // We don't store the full init_code on-chain due to gas costs.\r\n//         // The deployer (creator) will need to provide it when calling deployApp.\r\n//     }\r\n\r\n//     // Mapping from init_code_hash (fingerprint) to metadata\r\n//     mapping(bytes32 => AppMetadata) public appMetadata;\r\n\r\n//     // Sets to easily iterate approved/pending apps (optional, adds gas)\r\n//     EnumerableSet.Bytes32Set private approvedAppFingerprints;\r\n//     EnumerableSet.Bytes32Set private pendingAppFingerprints; // Apps awaiting approval\r\n\r\n//     // Keep track of deployed instances per creator (optional)\r\n//     mapping(address => mapping(bytes32 => address[])) public deployedInstances;\r\n\r\n//     event AppSubmitted(\r\n//         bytes32 indexed fingerprint,\r\n//         address indexed developer,\r\n//         string name,\r\n//         string metadataUri,\r\n//         uint256 version\r\n//     );\r\n//     event AppApproved(bytes32 indexed fingerprint);\r\n//     event AppRejected(bytes32 indexed fingerprint); // Or just remove from pending\r\n//     event AppDeployed(\r\n//         bytes32 indexed fingerprint,\r\n//         address indexed creator,\r\n//         address instanceAddress,\r\n//         bytes salt\r\n//     );\r\n\r\n//     constructor(address _initialOwner) Ownable(_initialOwner) {}\r\n\r\n//     /**\r\n//      * @notice Submit a new app or a new version of an existing app.\r\n//      * @param _name App name.\r\n//      * @param _description Description (consider hashing a structured JSON off-chain).\r\n//      * @param _metadataUri URI pointing to more metadata (icon, ABI, detailed desc).\r\n//      * @param _initCode The deployment bytecode of the app contract.\r\n//      * @param _previousVersionFingerprint The fingerprint of the previous version, if updating (bytes32(0) for new app).\r\n//      */\r\n//     function submitApp(\r\n//         string calldata _name,\r\n//         string calldata _description, // Pass the full description, hash it on-chain\r\n//         string calldata _metadataUri,\r\n//         bytes calldata _initCode,\r\n//         bytes32 _previousVersionFingerprint // For simple upgrade tracking\r\n//     ) external {\r\n//         require(bytes(_name).length > 0, \"Name required\");\r\n//         require(_initCode.length > 0, \"Bytecode required\");\r\n\r\n//         bytes32 fingerprint = keccak256(_initCode);\r\n//         require(appMetadata[fingerprint].developer == address(0), \"Fingerprint exists\"); // Prevent duplicate bytecode submission\r\n\r\n//         // Simple versioning based on previous submission by the same dev\r\n//         uint256 nextVersion = 1;\r\n//         if (_previousVersionFingerprint != bytes32(0)) {\r\n//             AppMetadata storage prevMeta = appMetadata[_previousVersionFingerprint];\r\n//             require(prevMeta.developer == msg.sender, \"Not previous version owner\");\r\n//             nextVersion = prevMeta.version + 1;\r\n//         }\r\n\r\n//         appMetadata[fingerprint] = AppMetadata({\r\n//             developer: msg.sender,\r\n//             name: _name,\r\n//             descriptionHash: keccak256(bytes(_description)),\r\n//             metadataUri: _metadataUri,\r\n//             isApproved: false, // Requires admin approval\r\n//             version: nextVersion\r\n//         });\r\n\r\n//         pendingAppFingerprints.add(fingerprint);\r\n\r\n//         emit AppSubmitted(fingerprint, msg.sender, _name, _metadataUri, nextVersion);\r\n//     }\r\n\r\n//     /**\r\n//      * @notice Approve an app, making it deployable. Only owner.\r\n//      */\r\n//     function approveApp(bytes32 _fingerprint) external onlyOwner {\r\n//         require(appMetadata[_fingerprint].developer != address(0), \"App not found\");\r\n//         require(!appMetadata[_fingerprint].isApproved, \"Already approved\");\r\n//         require(pendingAppFingerprints.contains(_fingerprint), \"Not pending\"); // Ensure it was pending\r\n\r\n//         appMetadata[_fingerprint].isApproved = true;\r\n//         pendingAppFingerprints.remove(_fingerprint);\r\n//         approvedAppFingerprints.add(_fingerprint);\r\n\r\n//         emit AppApproved(_fingerprint);\r\n//     }\r\n\r\n//     /**\r\n//      * @notice Reject an app. Only owner.\r\n//      */\r\n//     function rejectApp(bytes32 _fingerprint) external onlyOwner {\r\n//         // Could add more logic, like preventing re-submission?\r\n//         require(pendingAppFingerprints.contains(_fingerprint), \"Not pending\");\r\n//         // Optionally delete metadata or just remove from pending set\r\n//         pendingAppFingerprints.remove(_fingerprint);\r\n//         // Optionally delete appMetadata[_fingerprint]; to allow resubmission with same code?\r\n//         emit AppRejected(_fingerprint);\r\n//     }\r\n\r\n//     /**\r\n//      * @notice Deploy an instance of an approved app using CREATE2.\r\n//      * @param _fingerprint The keccak256 hash of the init_code for the approved app version.\r\n//      * @param _initCode The actual init_code (deployment bytecode) - verified against the fingerprint.\r\n//      * @param _salt A unique salt provided by the deployer (e.g., keccak256(abi.encodePacked(msg.sender, nonce))).\r\n//      * @param _constructorArgs ABI encoded constructor arguments for the app instance.\r\n//      */\r\n//     function deployAppInstance(\r\n//         bytes32 _fingerprint,\r\n//         bytes calldata _initCode,\r\n//         bytes32 _salt,\r\n//         bytes calldata _constructorArgs\r\n//     ) external payable returns (address instanceAddress) { // Payable if constructor needs funds\r\n//         require(appMetadata[_fingerprint].isApproved, \"App not approved\");\r\n//         require(keccak256(_initCode) == _fingerprint, \"Code mismatch\"); // CRITICAL CHECK\r\n\r\n//         // Combine init code with constructor arguments\r\n//         bytes memory deploymentCode = abi.encodePacked(_initCode, _constructorArgs);\r\n\r\n//         // Deploy using CREATE2\r\n//         instanceAddress = Create2.deploy(msg.value, _salt, deploymentCode); // msg.value forwards ETH if needed\r\n\r\n//         require(instanceAddress != address(0), \"Deployment failed\");\r\n\r\n//         // Optional: Track deployed instances\r\n//         bytes32 instanceSaltHash = keccak256(abi.encodePacked(msg.sender, _salt)); // Unique identifier for this deployment attempt\r\n//         deployedInstances[msg.sender][_fingerprint].push(instanceAddress);\r\n\r\n//         emit AppDeployed(_fingerprint, msg.sender, instanceAddress, _salt);\r\n//     }\r\n\r\n//     // --- View Functions ---\r\n\r\n//     function getAppMetadata(bytes32 _fingerprint) external view returns (AppMetadata memory) {\r\n//         return appMetadata[_fingerprint];\r\n//     }\r\n\r\n//     function isApproved(bytes32 _fingerprint) external view returns (bool) {\r\n//         return appMetadata[_fingerprint].isApproved;\r\n//     }\r\n\r\n//     // Functions to get lists of approved/pending apps (use pagination off-chain)\r\n//     function getApprovedAppCount() external view returns (uint256) {\r\n//         return approvedAppFingerprints.length();\r\n//     }\r\n\r\n//     function getApprovedAppFingerprint(uint256 _index) external view returns (bytes32) {\r\n//         return approvedAppFingerprints.at(_index);\r\n//     }\r\n\r\n//      function getPendingAppCount() external view returns (uint256) {\r\n//         return pendingAppFingerprints.length();\r\n//     }\r\n\r\n//     function getPendingAppFingerprint(uint256 _index) external view returns (bytes32) {\r\n//         return pendingAppFingerprints.at(_index);\r\n//     }\r\n\r\n//     function predictDeterministicAddress(bytes32 _fingerprint, bytes32 _salt, address _deployer) public view returns (address) {\r\n//          require(appMetadata[_fingerprint].developer != address(0), \"App not found\"); // Check if app exists\r\n//          // Note: This prediction requires the INIT_CODE_HASH, which is the fingerprint IF no constructor args are used.\r\n//          // If constructor args are used, the actual hash needed by Create2.computeAddress is keccak256(abi.encodePacked(INIT_CODE, CONSTRUCTOR_ARGS)).\r\n//          // For a simple prediction without args, we can use the fingerprint directly.\r\n//          // A more accurate prediction function would need the _constructorArgs as well.\r\n//          return Create2.computeAddress(_salt, _fingerprint, _deployer);\r\n//     }\r\n// }"
    },
    "contracts/apps/Poll.sol": {
      "content": "// // SPDX-License-Identifier: MIT\r\n// pragma solidity ^0.8.19;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\n// import \"@openzeppelin/contracts/access/Ownable.sol\"; // Or custom access control\r\n// import \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\n// interface IEcosystem {\r\n//     function getMemberLevel(address _user) external view returns (uint256);\r\n//     // function ecosystemOwner() external view returns (address); // Assuming Ownable uses this logic\r\n// }\r\n\r\n// contract Poll is Ownable, ReentrancyGuard {\r\n//     IEcosystem public immutable ecosystemContract;\r\n//     IERC1155 public immutable tokenContract;\r\n\r\n//     string public eventName;\r\n//     string public question;\r\n//     string[] public options; // Keep strings short or use bytes32 for options\r\n\r\n//     uint256 public startTime;\r\n//     uint256 public endTime;\r\n\r\n//     // Requirements\r\n//     uint256 public requiredLevel;\r\n//     uint256 public requiredTokenId;\r\n//     bool public spendTicket; // If true, spend 1 ticket; if false, just check balance >= 1\r\n\r\n//     mapping(uint256 => uint256) public votesPerOptionIndex;\r\n//     mapping(address => bool) public hasVoted;\r\n//     uint256 public totalVotes;\r\n\r\n//     event Voted(address indexed voter, uint256 indexed optionIndex);\r\n//     event PollEnded(uint256 timestamp);\r\n\r\n//     modifier withinEventWindow() {\r\n//         require(block.timestamp >= startTime, \"Poll: Not started\");\r\n//         require(block.timestamp < endTime, \"Poll: Ended\");\r\n//         _;\r\n//     }\r\n\r\n//     constructor(\r\n//         address _ecosystemAddress,\r\n//         address _tokenAddress,\r\n//         address _initialOwner,\r\n//         string memory _eventName,\r\n//         string memory _question,\r\n//         string[] memory _options,\r\n//         uint256 _startTime,\r\n//         uint256 _endTime,\r\n//         uint256 _requiredLevel,\r\n//         uint256 _requiredTokenId,\r\n//         bool _spendTicket\r\n//     ) Ownable(_initialOwner) {\r\n//         require(_ecosystemAddress != address(0), \"Invalid ecosystem address\");\r\n//         require(_tokenAddress != address(0), \"Invalid token address\");\r\n//         require(_startTime < _endTime, \"Invalid times\");\r\n//         require(_options.length >= 2, \"Need at least 2 options\");\r\n\r\n//         ecosystemContract = IEcosystem(_ecosystemAddress);\r\n//         tokenContract = IERC1155(_tokenAddress);\r\n//         eventName = _eventName;\r\n//         question = _question;\r\n//         options = _options;\r\n//         startTime = _startTime;\r\n//         endTime = _endTime;\r\n//         requiredLevel = _requiredLevel;\r\n//         requiredTokenId = _requiredTokenId;\r\n//         spendTicket = _spendTicket;\r\n//     }\r\n\r\n//     function vote(uint256 _optionIndex) external withinEventWindow nonReentrant {\r\n//         address voter = msg.sender; // In meta-tx context, this might be recovered signer\r\n//         require(!hasVoted[voter], \"Poll: Already voted\");\r\n//         require(_optionIndex < options.length, \"Poll: Invalid option\");\r\n\r\n//         // Check Requirements\r\n//         if (requiredLevel > 0) {\r\n//             require(ecosystemContract.getMemberLevel(voter) >= requiredLevel, \"Poll: Insufficient level\");\r\n//         }\r\n//         if (requiredTokenId > 0) { // Assuming Token ID 0 is invalid/unused\r\n//             uint256 balance = tokenContract.balanceOf(voter, requiredTokenId);\r\n//             require(balance >= 1, \"Poll: Insufficient tokens\");\r\n\r\n//             if (spendTicket) {\r\n//                 // Requires voter to have approved this contract beforehand\r\n//                 // OR use permit-style signature if supported by token\r\n//                 tokenContract.safeTransferFrom(voter, address(this), requiredTokenId, 1, \"\");\r\n//                 // Consider transferring to address(0) to burn, or to owner/treasury\r\n//             }\r\n//         }\r\n\r\n//         // Record Vote\r\n//         hasVoted[voter] = true;\r\n//         votesPerOptionIndex[_optionIndex]++;\r\n//         totalVotes++;\r\n\r\n//         emit Voted(voter, _optionIndex);\r\n//     }\r\n\r\n//     // Function for owner to manually trigger end if needed, e.g., after endTime\r\n//     function manualEndPoll() external onlyOwner {\r\n//          require(block.timestamp >= endTime, \"Poll: Not ended yet\");\r\n//          // Can add logic here if needed, like snapshotting final results\r\n//          emit PollEnded(block.timestamp);\r\n//          // Could potentially self-destruct or transfer remaining tokens if needed\r\n//     }\r\n\r\n//     // View functions for results\r\n//     function getOptionCount() external view returns (uint256) {\r\n//         return options.length;\r\n//     }\r\n\r\n//      function getVotesForOption(uint256 _optionIndex) external view returns (uint256) {\r\n//          require(_optionIndex < options.length, \"Poll: Invalid option\");\r\n//          return votesPerOptionIndex[_optionIndex];\r\n//      }\r\n// }"
    },
    "contracts/apps/Raffle.sol": {
      "content": "// // SPDX-License-Identifier: MIT\r\n// pragma solidity ^0.8.19;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\r\n// import \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n// import \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\"; // Optional: for easier participant iteration\r\n\r\n// contract Raffle is Ownable, ReentrancyGuard {\r\n//     using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n//     IERC1155 public immutable tokenContract;\r\n\r\n//     string public eventName;\r\n//     string public prizeDescription;\r\n\r\n//     uint256 public startTime;\r\n//     uint256 public endTime;\r\n\r\n//     // Requirements\r\n//     uint256 public immutable requiredTokenId;\r\n//     uint256 public immutable ticketsPerEntry; // Usually 1\r\n\r\n//     // Limits & State\r\n//     uint256 public maxEntriesPerUser; // 0 means unlimited\r\n//     address[] public participants; // Stores address for each entry (duplicates allowed)\r\n//     mapping(address => uint256) public entriesPerUser;\r\n//     // EnumerableSet.AddressSet private uniqueParticipants; // Optional: track unique users easily\r\n\r\n//     // Winner\r\n//     bool public winnerDeclared;\r\n//     address public winner;\r\n\r\n//     event EnteredRaffle(address indexed user, uint256 entryCount);\r\n//     event WinnerDrawn(address indexed winner);\r\n\r\n//     modifier withinEventWindow() {\r\n//         require(block.timestamp >= startTime, \"Raffle: Not started\");\r\n//         require(block.timestamp < endTime, \"Raffle: Ended\");\r\n//         _;\r\n//     }\r\n\r\n//      modifier drawAllowed() {\r\n//         require(block.timestamp >= endTime, \"Raffle: Not ended yet\");\r\n//         require(!winnerDeclared, \"Raffle: Winner already drawn\");\r\n//         _;\r\n//     }\r\n\r\n//     constructor(\r\n//         address _tokenAddress,\r\n//         address _initialOwner,\r\n//         string memory _eventName,\r\n//         string memory _prize,\r\n//         uint256 _startTime,\r\n//         uint256 _endTime,\r\n//         uint256 _requiredTokenId,\r\n//         uint256 _ticketsPerEntry,\r\n//         uint256 _maxEntriesPerUser\r\n//     ) Ownable(_initialOwner) {\r\n//         require(_tokenAddress != address(0));\r\n//         require(_startTime < _endTime);\r\n//         require(_requiredTokenId != 0);\r\n//         require(_ticketsPerEntry > 0);\r\n\r\n//         tokenContract = IERC1155(_tokenAddress);\r\n//         eventName = _eventName;\r\n//         prizeDescription = _prize;\r\n//         startTime = _startTime;\r\n//         endTime = _endTime;\r\n//         requiredTokenId = _requiredTokenId;\r\n//         ticketsPerEntry = _ticketsPerEntry;\r\n//         maxEntriesPerUser = _maxEntriesPerUser;\r\n//     }\r\n\r\n//     function enterRaffle() external withinEventWindow nonReentrant {\r\n//         address entrant = msg.sender; // Recovered signer in meta-tx\r\n\r\n//         if (maxEntriesPerUser > 0) {\r\n//             require(entriesPerUser[entrant] < maxEntriesPerUser, \"Raffle: Max entries reached\");\r\n//         }\r\n\r\n//         // Check balance\r\n//         uint256 balance = tokenContract.balanceOf(entrant, requiredTokenId);\r\n//         require(balance >= ticketsPerEntry, \"Raffle: Insufficient tickets\");\r\n\r\n//         // Take tickets (Requires approval or permit)\r\n//         tokenContract.safeTransferFrom(entrant, address(this), requiredTokenId, ticketsPerEntry, \"\");\r\n//         // Consider burning or sending to owner\r\n\r\n//         // Record entry\r\n//         participants.push(entrant);\r\n//         entriesPerUser[entrant]++;\r\n//         // uniqueParticipants.add(entrant); // Optional\r\n\r\n//         emit EnteredRaffle(entrant, entriesPerUser[entrant]);\r\n//     }\r\n\r\n//     // --- Winner Selection (Manual Example) ---\r\n//     // NOTE: On-chain randomness (Chainlink VRF) is better but more complex.\r\n//     // This manual method relies on the owner being trustworthy.\r\n\r\n//     function drawWinnerManual() external onlyOwner drawAllowed {\r\n//         uint256 totalEntries = participants.length;\r\n//         require(totalEntries > 0, \"Raffle: No entries\");\r\n\r\n//         // VERY BASIC pseudo-randomness (Not secure for high value prizes!)\r\n//         uint256 randomIndex = uint256(keccak256(abi.encodePacked(block.timestamp, block.prevrandao, totalEntries))) % totalEntries;\r\n//         winner = participants[randomIndex];\r\n//         winnerDeclared = true;\r\n\r\n//         emit WinnerDrawn(winner);\r\n//     }\r\n\r\n//     // --- View Functions ---\r\n//     function getTotalEntries() external view returns (uint256) {\r\n//         return participants.length;\r\n//     }\r\n\r\n//     function getEntriesForUser(address _user) external view returns (uint256) {\r\n//         return entriesPerUser[_user];\r\n//     }\r\n\r\n//     // function getUniqueParticipantCount() external view returns (uint256) { // Optional\r\n//     //     return uniqueParticipants.length();\r\n//     // }\r\n// }"
    },
    "contracts/deploy/diamondDeploy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport \"../facets/Diamond/IDiamondCut.sol\";\r\nimport \"./IDiamondDeploy.sol\";  \r\ncontract DiamondDeploy {\r\n    address public registryAddress;\r\n    bool isRegistrySet = false;\r\n    bytes32 bytecodeHash;\r\n\r\n    \r\n    constructor(address registry, bytes memory _bytecode ) { \r\n        registryAddress = registry; \r\n        bytecodeHash = keccak256(_bytecode);\r\n    }\r\n\r\n    function deploy(address owner, uint256 _salt, bytes calldata _bytecode, IDiamondCut.FacetCut[] memory _facetCuts) external returns (address diamond_) {\r\n        //require(msg.sender == registryAddress,\"Must be initiated from the MassDX registry.\");\r\n        \r\n        // Initialize a variable to hold the deployed address\r\n        address deployedAddress; //fksdf\r\n\r\n        require(keccak256(_bytecode) == bytecodeHash, \"Bytecode must match that of the Diamond associated with this contract.\");\r\n        // ABI encode the constructor parameters\r\n        bytes memory encodedParams = abi.encode(owner, msg.sender, _facetCuts); \r\n\r\n        // Concatenate the pseudoBytecode and encoded constructor parameters\r\n        bytes memory finalBytecode = abi.encodePacked(_bytecode, encodedParams);\r\n\r\n        // Use CREATE2 opcode to deploy the contract with static bytecode\r\n        // Generate a unique salt based on msg.sender\r\n        bytes32 salt = keccak256(abi.encodePacked(msg.sender, _salt, encodedParams)); \r\n\r\n        // The following assembly block deploys the contract using CREATE2 opcode\r\n        assembly {\r\n            deployedAddress := create2(\r\n                0, // 0 wei sent with the contract\r\n                add(finalBytecode, 32), // skip the first 32 bytes (length)\r\n                mload(finalBytecode), // size of bytecode\r\n                salt // salt\r\n            )\r\n            // Check if contract deployment was successful\r\n            if iszero(extcodesize(deployedAddress)) {\r\n                revert(0, 0)\r\n            }\r\n        }\r\n\r\n        return deployedAddress;\r\n    }\r\n\r\n \r\n}\r\n\r\n/**\r\n * We store hash of bytecode.\r\n * Client deploys bytecode.\r\n * Checks hash, deploys.\r\n */\r\n"
    },
    "contracts/deploy/IDiamondDeploy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\nimport \"../facets/Diamond/IDiamondCut.sol\"; \r\n\r\n/// @title DiamondDeploy Interface\r\n/// @notice Interface for the DiamondDeploy contract\r\n/// @dev This interface describes the methods available in the DiamondDeploy contract\r\ninterface IDiamondDeploy {\r\n\r\n\r\n    /// @notice Deploy a new Diamond contract\r\n    /// @dev Deploys a new Diamond contract and returns its address\r\n    /// @param _bytecode The bytecode of the contract to deploy\r\n    /// @return diamond_ The address of the newly deployed Diamond\r\n    function deploy(address _owner, uint256 _salt, bytes memory _bytecode, IDiamondCut.FacetCut[] memory _facetCuts) external returns (address diamond_);\r\n\r\n    /// @notice Get the address of the DiamondCutFacet\r\n    /// @dev Returns the address of the DiamondCutFacet associated with this DiamondDeploy contract\r\n    /// @return The address of the DiamondCutFacet\r\n    function diamondCutFacet() external view returns (address);\r\n}\r\n "
    },
    "contracts/Diamond.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/******************************************************************************\\\r\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\r\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\r\n*\r\n* Implementation of a diamond.\r\n/******************************************************************************/\r\n\r\nimport { LibDiamond } from \"./facets/Diamond/LibDiamond.sol\";\r\nimport { IDiamondCut } from \"./facets/Diamond/IDiamondCut.sol\";\r\n\r\nimport {LibOwnership} from \"./facets/Ownership/LibOwnership.sol\"; \r\nimport {iOwnership} from \"./facets/Ownership/_Ownership.sol\";  \r\n\r\nimport \"hardhat/console.sol\";\r\ncontract Diamond is iOwnership{    \r\n\r\n    constructor(address _owner, address _registry, IDiamondCut.FacetCut[] memory _cuts) payable {    \r\n        LibOwnership._setRegistry( _registry );    \r\n        LibOwnership._setEcosystemOwner( _owner ); \r\n        LibDiamond.diamondCut(_cuts, address(0), \"\");        \r\n    }\r\n\r\n    // Find facet for function that is called and execute the\r\n    // function if a facet is found and return any value.\r\n    fallback() external payable {\r\n        LibDiamond.DiamondStorage storage ds;\r\n        bytes32 position = LibDiamond.DIAMOND_STORAGE_POSITION;\r\n        // get diamond storage\r\n        assembly {\r\n            ds.slot := position\r\n        }\r\n        // get facet from function selector\r\n        console.logBytes4(msg.sig);\r\n        address facet = ds.selectorToFacetAndPosition[msg.sig].facetAddress;\r\n        require(facet != address(0), \"Diamond: Function does not exist\");\r\n        // Execute external function from facet using    delegatecall and return any value.\r\n        assembly {\r\n            // copy function selector and any arguments\r\n            calldatacopy(0, 0, calldatasize())\r\n            // execute function call using the facet\r\n            let result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\r\n            // get any return value\r\n            returndatacopy(0, 0, returndatasize())\r\n            // return any return value or error back to the caller\r\n            switch result\r\n                case 0 {\r\n                    revert(0, returndatasize())\r\n                }\r\n                default {\r\n                    return(0, returndatasize())\r\n                }\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n}\r\n"
    },
    "contracts/exchange/CleanupUser.sol": {
      "content": "pragma solidity ^0.8.9;\r\n\r\n\r\n\r\n/**\r\n * @title \r\n * @author \r\n * @dev Sole purpose is to stake 1 wei of every time slot that has a transaction in order to  \r\n *      prevent dead tokens.\r\n */\r\ncontract CleanupUser{\r\n    address cleanupAddress;\r\n    uint256 constant CLEANUP_STAKE_AMOUNT = 1;\r\n    mapping( address => mapping(uint32 => bool)) collected;\r\n\r\n}   "
    },
    "contracts/exchange/ERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport \"../facets/Tokens/ERC1155/interfaces/IERC1155Receiver.sol\";\r\nimport \"../IERC165.sol\";\r\n\r\ncontract MyERC1155Receiver is IERC1155Receiver, IERC165 {\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external returns (bytes4) {\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external returns (bytes4) { \r\n        return this.onERC1155BatchReceived.selector;\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\r\n        return interfaceId == this.onERC1155Received.selector || \r\n            interfaceId == this.onERC1155BatchReceived.selector ||\r\n            interfaceId == 0x01ffc9a7; // ERC165 interface ID\r\n        }\r\n}\r\n"
    },
    "contracts/exchange/ERC1155Rewards.sol": {
      "content": "pragma solidity ^0.8.9;\r\n\r\nimport { ERC1155 } from \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\r\nimport \"../facets/Tokens/ERC1155/ERC1155Receiver.sol\";\r\nimport { IERC1155 } from \"../facets/Tokens/ERC1155/interfaces/IERC1155.sol\";\r\nimport { IERC1155MetadataURI } from \"../facets/Tokens/ERC1155/interfaces/IERC1155MetadataURI.sol\";\r\nimport { iERC1155Transfer } from \"../facets/Tokens/ERC1155/internals/iERC1155Transfer.sol\";\r\ncontract ERC1155Rewards is  ERC1155ReceiverEcosystem,    iERC1155Transfer {  \r\n    uint64 constant TIME_POOL_TOKEN_DECIMALS = 10**18;\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\r\n        return\r\n            interfaceId == this.onERC1155Received.selector || \r\n            interfaceId == this.onERC1155BatchReceived.selector ||\r\n            interfaceId == type(IERC1155).interfaceId ||\r\n            interfaceId == type(IERC1155MetadataURI).interfaceId ;\r\n    }\r\n}\r\n     "
    },
    "contracts/exchange/ExchangeRewardPool.sol": {
      "content": "pragma solidity ^0.8.9;\r\n\r\nimport \"./LibTimeManagement.sol\";\r\nimport \"./LibUnderflow.sol\";\r\n\r\nimport { iOwnership } from \"../facets/Ownership/_Ownership.sol\";\r\n\r\nimport \"./CleanupUser.sol\";\r\nimport \"./ERC1155Rewards.sol\";\r\nimport { IERC20 } from \"../facets/Tokens/ERC20/interfaces/IERC20.sol\";\r\nimport { IERC1155 } from \"../facets/Tokens/ERC1155/interfaces/IERC1155.sol\";\r\nimport { IERC1155Transfer } from \"../facets/Tokens/ERC1155/interfaces/IERC1155Transfer.sol\";\r\nimport \"hardhat/console.sol\";\r\n\r\ncontract ExchangeRewardPool is  iOwnership, CleanupUser{\r\n    using LibTimeManagement for uint32;\r\n    using LibUnderflow for uint8;\r\n\r\n    uint32 immutable GENESIS_TIMESTAMP;\r\n    address immutable exchangeRewardERC1155; \r\n\r\n    event Staked (uint32 timeStart, LibTimeManagement.StakeDayInterval stakeInterval, uint256 stakeAmouunt, address staker);\r\n    event StakerRewardsCollected(address staker, uint256 amount);\r\n  \r\n    enum StakeStatus { Staking, Collected }\r\n\r\n    struct TimePool{\r\n        uint32 startTimeSlot;\r\n        address staker;\r\n        LibTimeManagement.StakeDayInterval stakeInterval;\r\n        uint256 amount;\r\n        address tokenAddress; //used as the erc1155 id as well, uint256(tokenAddress)\r\n        StakeStatus status;\r\n    }\r\n    //helps with precision for earningSumRatio\r\n    uint64 constant PRECISION_RETAINER = uint64(10 ** 18);\r\n    mapping (uint256 => TimePool) public timePoolStakes;\r\n     \r\n     /**\r\n      * @dev \r\n      * @param exhangeTimePoolEarnings - amount of earnings allocated to the time pool for token at time slot\r\n      * @param totalStakedSum - total amount of time pool tokens staked for token and time slot. The sum works\r\n      * by maintaining a running total, and only adding and subtracting \r\n      * @param totalEarningsPerSum - exchangeTimePoolEarnings/totalStakedSum + previous\r\n      */\r\n     struct StakedSum{\r\n        uint256 oneDay;\r\n        uint256 threeDay;\r\n        uint256 nineDay;\r\n        uint256 eighteenDay;\r\n        uint256 thirtySixDay;\r\n     }\r\n    struct RewardsManage{\r\n        mapping(LibTimeManagement.StakeDayInterval => uint256) stakeSum;\r\n        uint256 totalSlotSum;\r\n        uint256 totalEarningsPerSum;\r\n    }\r\n    //total staked amount of all users for token at address at timeslot\r\n    mapping (address => mapping (uint32 => RewardsManage)) public timeSlotRewards;\r\n    uint256 public  rollingEarningsSumRatio;\r\n    mapping(address => mapping(uint32 => bytes32) ) public  timeSlotActivationBitMap;\r\n\r\n\r\n    constructor( address _exchangeRewardERC1155){\r\n        GENESIS_TIMESTAMP = uint32(block.timestamp);\r\n        exchangeRewardERC1155 = _exchangeRewardERC1155;  \r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param _tokenAddress 2\r\n     * @param _timeSlot 2\r\n     * @param _stakeDayInterval 2\r\n     * @dev A function purely for testing purposes, as there's wasn't a straightforward solution to accessing\r\n     * a mapping within a struct.\r\n     */\r\n    function stakeSumGetter(address _tokenAddress, uint32 _timeSlot, LibTimeManagement.StakeDayInterval _stakeDayInterval) external view returns (uint256){\r\n        return timeSlotRewards[_tokenAddress][_timeSlot].stakeSum[_stakeDayInterval];\r\n    }\r\n    function batchStakeTimePool(uint256[] calldata _stakeIds, LibTimeManagement.StakeDayInterval[] memory _stakeIntervals, uint256[] calldata _stakeAmounts, address[] calldata _tokenAddresses) external {\r\n        //require lengths matchg\r\n        for( uint _stakeIndex; _stakeIndex < _stakeIds.length; _stakeIndex++){\r\n            stakeTimePool(_stakeIds[_stakeIndex],_stakeIntervals[_stakeIndex],_stakeAmounts[_stakeIndex],_tokenAddresses[_stakeIndex]);\r\n        }\r\n    }\r\n    /**\r\n     */\r\n    function stakeTimePool(uint256 _stakeId, LibTimeManagement.StakeDayInterval _stakeInterval,  uint256 _stakeAmount, address _tokenAddress) public {\r\n        require( timePoolStakes[ _stakeId ].startTimeSlot == 0, \"A Time Pool stake already exists with this id\");\r\n        //assert initial and final time slots are a multiple of TIME_INTERVAL\r\n        \r\n        require(_tokenAddress != address(this), \"Reward tokens aren't stakeable\"); //likely dont need this due to this doesnt employ erc20\r\n        uint32 _stakeIntervalSeconds = LibTimeManagement.getDayIntervalSeconds(_stakeInterval);\r\n        uint32 _timeStart = uint32(block.timestamp).getNextTimeSlot(_stakeIntervalSeconds);\r\n        //calculate stake amount uniformally distributed over interval\r\n        uint256 _uniformStake = _stakeAmount / LibTimeManagement.convertDenominationalUnits(_stakeInterval);\r\n        //add stake \r\n        timeSlotRewards[ _tokenAddress ][ _timeStart ].stakeSum[_stakeInterval] +=  _uniformStake;\r\n        //burn amount\r\n        IERC1155(exchangeRewardERC1155).burn(msgSender(), uint256(uint160(_tokenAddress)), _stakeAmount);\r\n        \r\n        timePoolStakes[_stakeId] = TimePool( _timeStart, msgSender(), _stakeInterval, _stakeAmount, _tokenAddress, StakeStatus.Staking);\r\n\r\n        emit Staked(_timeStart, _stakeInterval, _stakeAmount, msgSender());\r\n\r\n    }\r\n   \r\n\r\n  /**\r\n   * Sends user their earned rewards.\r\n   * @param _stakeId stake identifier \r\n   */\r\n    function collectReward(uint256 _stakeId) external{\r\n        uint256 _stakerEarnings;\r\n        TimePool storage _stake = timePoolStakes[_stakeId];\r\n        LibTimeManagement.StakeDayInterval _stakeInterval = _stake.stakeInterval;\r\n        address _tokenAddress = _stake.tokenAddress;\r\n        uint32 _stakeStartSlot = _stake.startTimeSlot;\r\n        uint256 _stakeAmount = _stake.amount;\r\n        address _stakerAddress = _stake.staker;\r\n        \r\n        uint32 _stakeEndSlot = _stakeStartSlot + LibTimeManagement.getDayIntervalSeconds(_stakeInterval);\r\n\r\n        require(_stake.status == StakeStatus.Staking, \"Musn't have collected rewards yet\");\r\n        require(msgSender() == _stake.staker, \"Must be the original staker\");\r\n        \r\n        //add a day due to endSlot being the last day of the interval, yet the slot after would be the when the\r\n        //interval actually ends\r\n        require(_stakeEndSlot  + LibTimeManagement.getDayIntervalSeconds( LibTimeManagement.StakeDayInterval.One ) < uint32(block.timestamp),\"Stake period is still ongoing\");\r\n\r\n        RewardsManage storage _timeSlotRewards = timeSlotRewards[ _tokenAddress ][ _stakeStartSlot ]; \r\n        \r\n        uint256 _reward = calculateReward( _tokenAddress, _stakeInterval, _stakeStartSlot, _stakeAmount);\r\n\r\n        _stake.status = StakeStatus.Collected; \r\n        //transfer rewards\r\n        IERC20(_tokenAddress).transferFrom( address(this), _stakerAddress, _reward); \r\n        \r\n        //transfer reward token? should be burned during stake so likely remove this transfer\r\n        IERC1155Transfer(exchangeRewardERC1155).safeTransferFrom(address(this), msgSender(), uint256(uint160(_tokenAddress)), _stakerEarnings, \"\");\r\n        \r\n        emit StakerRewardsCollected(msgSender(), _stakerEarnings);\r\n    }\r\n\r\n    function collectRewardCleanupUser(address[] memory _tokenAddresses, uint32[] memory _startTimeSlots ) external{\r\n        require(msgSender() == cleanupAddress, \"Must use the cleanupAddress to access these funds.\");\r\n        require(_tokenAddresses.length == _startTimeSlots.length,\"Input parameter argument lengths must match.\");\r\n        for(uint256 claimIndex; claimIndex < _tokenAddresses.length; claimIndex++){\r\n            collectRewardCleanupUser(_tokenAddresses[claimIndex],_startTimeSlots[claimIndex]);\r\n        }\r\n\r\n    }\r\n    //_startTimeSlot MUST have reward\r\n    function collectRewardCleanupUser(address _tokenAddress, uint32 _startTimeSlot) public {\r\n        // TODO\r\n    }\r\n    \r\n\r\n    function calculateReward(address _tokenAddress, LibTimeManagement.StakeDayInterval _stakeInterval, uint32 _stakeStartTimeSlot, uint256 _stakeAmount) public view  returns (uint256 reward_){\r\n        //retrieve starting timeslots of bitmaps that instersect stake interval time slots (max stake interval is smaller than 256 days, but can exist at a boundary)\r\n        (bool _zeroReward, uint32 firstActivatedTimeSlot, uint32 lastActivatedTimeSlot) =  getRewardTimeSlots(_tokenAddress, _stakeInterval, _stakeStartTimeSlot);\r\n        console.log(\"bool value is %s\",_zeroReward); \r\n        if(  _zeroReward){\r\n            return 0;\r\n        }\r\n        \r\n        (uint256 _beginningRewards, uint256 _finalRewards) = getEarningSumRatios(_tokenAddress, firstActivatedTimeSlot, lastActivatedTimeSlot);\r\n        console.log(\"final rewards arae %s\",_finalRewards);  \r\n\r\n        reward_ = ( (_finalRewards - _beginningRewards) * _stakeAmount ) / PRECISION_RETAINER;\r\n        \r\n    }\r\n    function getEarningSumRatios(address _tokenAddress,  uint32 _firstActivatedTimeSlot, uint32 _lastActivatedTimeSlot) internal view returns( uint256 beginningReward_,uint256 finalReward_){\r\n        beginningReward_ = timeSlotRewards[_tokenAddress][_firstActivatedTimeSlot].totalEarningsPerSum;\r\n        finalReward_ = timeSlotRewards[_tokenAddress][_lastActivatedTimeSlot].totalEarningsPerSum;\r\n\r\n    }\r\n    /**\r\n     * @dev ( start -1 ) and end of interval time slots may not have transactions on them hence we need to check the \r\n     *      last activated timeslots to get reward information. \r\n     */\r\n    function getRewardTimeSlots(address _tokenAddress, LibTimeManagement.StakeDayInterval _stakeInterval, uint32 _stakeStartTimeSlot) internal view returns (bool isZeroReward_, uint32 firstActivatedTimeSlot_, uint32 finalActivatedTimeSlot_){\r\n        finalActivatedTimeSlot_ =  getFinalActivatedTimeSlot(_tokenAddress, _stakeInterval, _stakeStartTimeSlot );\r\n        console.log(\"this is the final reward slot %s\",finalActivatedTimeSlot_);\r\n        if( finalActivatedTimeSlot_ == 0){\r\n            return (true, uint32(0), uint32(0) );\r\n        }\r\n        //can have non-zero reward only in very small purchase, just calculate anyway\r\n        firstActivatedTimeSlot_ = getStartActivatedTimeSlot(_tokenAddress, _stakeStartTimeSlot);\r\n        console.log(firstActivatedTimeSlot_);\r\n\r\n        return (false, firstActivatedTimeSlot_, finalActivatedTimeSlot_);\r\n    }\r\n    /**\r\n     * @param _intervalSize This corresponds to the stake interval size with respect to the denominational interval size \r\n     */\r\n    /**\r\n     * @dev We must check for an activated slot starting from the final slot down to the starting slot. This involves potentially\r\n     *      accesssing the previous activationBitMap. \r\n     */\r\n    function getFinalActivatedTimeSlot(address _tokenAddress, LibTimeManagement.StakeDayInterval _stakeInterval, uint32 _stakeStartTimeSlot ) internal view returns (uint32 finalActivatedTimeSlot_){\r\n        uint32 _finalSlot; \r\n        uint32 _bitMapStartSlot;\r\n        uint8 _finalSlotPosition;\r\n        bytes32 _activationBitMap; \r\n        uint8 _intervalDenominationalSize;\r\n        console.log(\"start slot is %s\",_stakeStartTimeSlot);\r\n        //right now this will work but _intervalDenominationalSize needs to be shortened after recursion by amount of underflow\r\n        //also names need to be changed to make sense after recursion\r\n\r\n\r\n        _finalSlot = _stakeStartTimeSlot.getFinalTimeSlot(_stakeInterval);\r\n        console.log(\"final slot is %s\",_finalSlot);\r\n        (_bitMapStartSlot, _finalSlotPosition) = _finalSlot.bitFlagRemainder(LibTimeManagement.StakeDayInterval.One);\r\n        _activationBitMap = timeSlotActivationBitMap[_tokenAddress][_bitMapStartSlot];\r\n        _intervalDenominationalSize =  LibTimeManagement.convertDenominationalUnits(_stakeInterval);\r\n        console.log(_bitMapStartSlot);\r\n\r\n        console.log('start position %s',_finalSlotPosition);\r\n        (bool _isUnderflow, uint8 _amountUnderflow) = _finalSlotPosition.uint8Underflow( _intervalDenominationalSize);\r\n        console.logBytes32(_activationBitMap); \r\n        //_intevalDenominationlUnits - _amountUnderflow must be >= 0\r\n        uint8 _endOfBitMap = _isUnderflow ?  _intervalDenominationalSize - _amountUnderflow : _intervalDenominationalSize;\r\n        for(uint8 shiftIndex; shiftIndex < _endOfBitMap; shiftIndex++  ){\r\n            uint8 _newPosition = _finalSlotPosition - shiftIndex;\r\n            if( _activationBitMap & bytes32 (2**(_newPosition)  )  != bytes32(0) ){\r\n                console.log(\"final positiio %s\", _newPosition);\r\n                return  _bitMapStartSlot  + _newPosition * LibTimeManagement.denominationalSize() ;\r\n            }\r\n        }\r\n        //no activated slots from start to finish slots of stake period\r\n        if( _finalSlotPosition - _endOfBitMap + 1 == _intervalDenominationalSize){\r\n            return 0;\r\n        }\r\n\r\n        require(_isUnderflow,\"Must be underflowed to reach this point - Critical Error\");\r\n\r\n        //assert underflow\r\n        //If we're here it means one more we underflowed and must check bitmap before the previous\r\n        uint8 _previousFinalPosition = type(uint8).max;\r\n        //ignore calculating second argument when we already know we're starting from the max bit position \r\n        //just need to get a timeslot in that bitmap\r\n        (bytes32 _isPreviousTimeSlotActivated,) =  getRewardAcitvationBitMap( _tokenAddress,  _stakeStartTimeSlot.shiftDownBitMap());\r\n        for(uint8 shiftIndex; shiftIndex <  _amountUnderflow; shiftIndex++  ){\r\n            uint8 _newPosition =_previousFinalPosition - shiftIndex;\r\n            if(_isPreviousTimeSlotActivated & bytes32( 2 ** (_newPosition)  )  != bytes32(0) ){\r\n                return _bitMapStartSlot.shiftDownBitMap()  + _newPosition * LibTimeManagement.denominationalSize();\r\n            }\r\n        }\r\n        //we passed the starting stake slot, no reward\r\n        return 0;\r\n    }\r\n    /**\r\n     * @param _tokenAddress address of token used to purchase ticket(s).\r\n     * @param _startingTimeSlot the time slot we begin decrementing from. On the initial call it\r\n     * corresponds to the starting slot of a user's stake, shifted one slot down.  \r\n     */\r\n    function getStartActivatedTimeSlot(address _tokenAddress, uint32 _startingTimeSlot) internal  view returns (  uint32 startingTimeSlot_){\r\n        \r\n        uint32 _startingTimeSlotShifted = _startingTimeSlot - LibTimeManagement.denominationalSize();\r\n        (uint32 _bitMapStartTimeSlot, uint8 _stakeStartTimeSlotPosition) = _startingTimeSlotShifted.bitFlagRemainder( LibTimeManagement.denominationalSize() );\r\n        (bytes32 _isTimeSlotActivatedBitMap, )=  getRewardAcitvationBitMap( _tokenAddress,   _bitMapStartTimeSlot);\r\n        //shift left, check \r\n            \r\n        bytes32 _shiftedBitMap = _isTimeSlotActivatedBitMap << type(uint8).max - _stakeStartTimeSlotPosition;\r\n        if(_shiftedBitMap & bytes32(type(uint256).max) ==  bytes32(0)){\r\n            if( _bitMapStartTimeSlot < GENESIS_TIMESTAMP ){\r\n                return 0;\r\n            }\r\n            else{   \r\n                uint32 _newTimeSlot = _startingTimeSlotShifted -  (_stakeStartTimeSlotPosition + 1 )* LibTimeManagement.denominationalSize();\r\n                getStartActivatedTimeSlot(_tokenAddress, _newTimeSlot);\r\n            }\r\n        }\r\n\r\n        for(uint8 _shiftIndex; _shiftIndex < _stakeStartTimeSlotPosition; _shiftIndex++ ){\r\n            uint8 _newPosition = _stakeStartTimeSlotPosition -  _shiftIndex;\r\n            if(_isTimeSlotActivatedBitMap & bytes32 (2**(_newPosition) - 1)  != bytes32(0) ){\r\n                return _bitMapStartTimeSlot + _newPosition * LibTimeManagement.denominationalSize();\r\n            }\r\n        }\r\n\r\n        if( _bitMapStartTimeSlot < GENESIS_TIMESTAMP ){\r\n                return 0;\r\n        }\r\n\r\n        uint32 _newTimeSlot = _startingTimeSlot -  (_stakeStartTimeSlotPosition + 1 )* LibTimeManagement.denominationalSize();\r\n        getStartActivatedTimeSlot(_tokenAddress, _newTimeSlot);\r\n\r\n    }\r\n\r\n\r\n\r\n    \r\n    /**\r\n     * @dev Responsible for updating time pool rewards related data, including:\r\n     *  bitmap - flags which timeslots contained a transaction \r\n     *  totalTimeSlotSum - caches the total staked sum in one storage slot\r\n     *  rollingEarningsRatio -  updates the rolling earnings sum ratio in the current \r\n     * time slot and the global variable   \r\n     * @param _tokenAddress token used to purchase ticket\r\n     * @param _timePoolFee the amount of fee added to current time slots earnings  \r\n     */\r\n    function updateRewardsData(address _tokenAddress, uint256 _timePoolFee) internal {\r\n        //updates sum if flag not set, maybe no flag since always non-zero \r\n\r\n        //get current timeslot and it's corresponding rewards\r\n        uint32 _intervalSeconds = LibTimeManagement.getDayIntervalSeconds(LibTimeManagement.StakeDayInterval.One);\r\n        uint32 _currentTimeSlot = uint32( block.timestamp ) .getCurrentIntervalStartTimeSlot(_intervalSeconds);\r\n        console.log(\"timeslot is %s\", _currentTimeSlot);\r\n        RewardsManage storage _timeSlotRewards = timeSlotRewards[ _tokenAddress ][ _currentTimeSlot ];\r\n        \r\n        //current total sum for current slot\r\n        uint256 _totalSlotSum = _timeSlotRewards.totalSlotSum;\r\n\r\n        //if true, implies first transaction in timeslot \r\n        if( _totalSlotSum == 0){\r\n            //sum all staked amounts from each stake interval\r\n            uint256 _stakedAmountSum;\r\n            for( uint8 _stakeIntervalIndex; _stakeIntervalIndex <  uint8(type(LibTimeManagement.StakeDayInterval).max); _stakeIntervalIndex ++){\r\n                uint32 _stakeIntervalSeconds = LibTimeManagement.getDayIntervalSeconds(  _stakeIntervalIndex);\r\n                uint32 _intervalCurrentStartTimeSlot =  uint32(block.timestamp).getCurrentIntervalStartTimeSlot(_stakeIntervalSeconds);\r\n                LibTimeManagement.StakeDayInterval _stakeDayInterval = LibTimeManagement.uint8ToStakeDay(_stakeIntervalIndex); \r\n                _stakedAmountSum += timeSlotRewards[_tokenAddress][_intervalCurrentStartTimeSlot].stakeSum[  _stakeDayInterval ];\r\n            }\r\n            _stakedAmountSum += CLEANUP_STAKE_AMOUNT;//see CleanupUser contract\r\n            _totalSlotSum  = _stakedAmountSum;\r\n            _timeSlotRewards.totalSlotSum = _totalSlotSum;\r\n            //must update sum and the bitmap stating this timeslot was activated\r\n            updateBitMap(_tokenAddress, _currentTimeSlot);\r\n        }\r\n\r\n        // update global rolling earnings and timeslot\r\n        uint256 _rollingEarningsSumRatio = rollingEarningsSumRatio;\r\n        uint256 _newAddedFee = ( _timePoolFee * PRECISION_RETAINER )/_totalSlotSum;\r\n        _rollingEarningsSumRatio += _newAddedFee;\r\n\r\n        _timeSlotRewards.totalEarningsPerSum = _rollingEarningsSumRatio;\r\n        rollingEarningsSumRatio = _rollingEarningsSumRatio;\r\n    }\r\n    /**\r\n     * We keep a bitmap of all timeslots, and flag the timeslots that have one transaction or more.\r\n     * This way we can efficiently calculate rewards. \r\n     * \r\n     * Gets the bitmap that contains _timeSlot;\r\n     */\r\n    function getRewardAcitvationBitMap(address _tokenAddress, uint32 _timeSlot) internal  view returns( bytes32 bitMap_, uint8 timeSlotPosition_){\r\n        uint32 _minimumIntervalSeconds = LibTimeManagement.getDayIntervalSeconds(LibTimeManagement.StakeDayInterval.One);\r\n        (uint32 _bitFlagTimeSlot, uint8 timeSlotPosition_ ) =  _timeSlot.bitFlagRemainder( _minimumIntervalSeconds);\r\n        bytes32 bitMap_ = timeSlotActivationBitMap[_tokenAddress][ _bitFlagTimeSlot ];\r\n        \r\n    }\r\n    /**\r\n     * Denotes the timeslot contains a transaction\r\n     * @param _tokenAddress Address of token used for ticket sale\r\n     * @param _timeSlot Timeslot that will be now marked for containing a transaction\r\n     */\r\n    function updateBitMap(address _tokenAddress, uint32 _timeSlot) internal {\r\n        //retrieve the starting timeslot of the bitmap containing _timeSlot and the corresponding offset of its corresponding bit\r\n        ( uint32 _bitMapTimeSlotStartTimestamp, uint8 _timeSlotPosition ) =  _timeSlot.bitFlagRemainder(LibTimeManagement.StakeDayInterval.One); \r\n        console.log(\"Bitmap timeslot is %s\",_bitMapTimeSlotStartTimestamp );\r\n        console.log(_timeSlotPosition);\r\n        bytes32 _outdatedBitMap = timeSlotActivationBitMap[_tokenAddress][ _bitMapTimeSlotStartTimestamp ];\r\n        bytes32 _updatedBitMap = _outdatedBitMap | bytes32( ( 2 ** (_timeSlotPosition) ) );\r\n        timeSlotActivationBitMap[_tokenAddress][ _bitMapTimeSlotStartTimestamp ] = _updatedBitMap;\r\n    }\r\n    // function updateTimePoolEarnings(uint256 _timePoolFee, uint256 _totalSlotSum) internal {\r\n       \r\n\r\n    //     //Users can unstake anytime they want, but will forfeit their earnings in the current time slot\r\n    //     //can use one time interval\r\n    //     //we still need to use fixed intervals  due to rewards and sums needed to be updated every \r\n    //     //transacted timeslot \r\n\r\n    //     /**\r\n    //      So since sums are well defined due to fixed intervals,\r\n    //      we simply find the respective timeslot, go to the beginning day of that interval \r\n    //      and loading the sum from each interval. \r\n    //      Only has to be done once per time slot. So transactor would check flag and store it\r\n    //      as well. \r\n    //      */\r\n    // }\r\n\r\n\r\n}\r\n\r\n\r\n/**\r\n * What if we have multiple stake length tiers i.e. 3 Day, 9 Day, 27 Day\r\n * Bonuses given to 30 day.\r\n * You'd have to wait a long time to get into a 30 day if you miss it. \r\n * 3,9,18,36 works well in the sense the catchup time isn't long. \r\n * a 27 period only has to check once for the 3 day and the once for the 7day\r\n * \r\n * So if you register for the 9 days and suppose you're on day 5, \r\n * to get the sum you'd only need to check the 9 day + the latest 3 day\r\n * could we make it work such that someone can enter a 9 day at day 5?\r\n * no that wouldn't work \r\n * \r\n * How do we perform stores of sums? seperate for each interval? that would\r\n * be the easy first obvious solution. A way to make it more efficient though?\r\n * the longer intervals are constant, hardly costs any gas.\r\n */\r\n/**\r\n * How to we implement sum? We need running sum along with delta. So each time slot has a delta and\r\n * when the time slot starts the \r\n * \r\n * Issue is we don't want to store sums over all time slots for a user staking an extended duration. \r\n * But we want to access sums in each time slot. So we'd want a running sum that impacts a delta at the start\r\n * of a time slot.\r\n * How would we track the running sum efficiently?\r\n * \r\n * \r\n * \r\n * \r\n * So build sum from nearest reference point.\r\n * reference point is the current sum at a given time slot\r\n * longest anyone would have backtrack calculate the sum is MAX_TIME_SLOTS?  \r\n * No. \r\n * \r\n * Reference point with a bonus? It still seems daunting.\r\n * Why not a bonus for when staking? This way we could potentially \r\n * make some optimizations for drought periods. \r\n * If last stake was longer than MAX_STAKE_PERIOD, it's implied \r\n * we're able to set a new reference point on new stake. \r\n * So when loading new reference point we have the timestamp and last sum,\r\n * we know the new sum must be zero after MAX_STAKE_PERIOD, IF we force\r\n * stakers to update new reference point\r\n */\r\n\r\n/**\r\n * So no future staking, only current timestamp solve issues?\r\n * Well we certainly help update the sum more frequently, the worst \r\n * case scenario is MAX_TIME_INTERVALS. \r\n * But we still have issues with sum updates, at some point a stake will\r\n * end and the sum won't be updated until another transaction. \r\n * Why does user need to specify how long? So the weight can be distributed. \r\n * So if we set it so users have uniform stakes but no end time. The end time\r\n * is when they unstake and collect rewards. This commpletely solves the problem.\r\n * \r\n * We still need to figure out the sum is calculated. Before the sum was governed \r\n * by the current sum at time t < timeSlot_n. So currently the sum is set before \r\n * the timeSlot starts. but then how would you unstake and leave sum? \r\n * \r\n * you update the sum but forfeit your profit for that timeslot. \r\n * issue with this is people could stake and leave when it didnt pan out well for\r\n * them. maybe require a minimum stake\r\n * \r\n * \r\n * So single time interval, no extensions past that time interval.\r\n * i.e. 8hr\r\n */"
    },
    "contracts/exchange/LibTimeManagement.sol": {
      "content": "pragma solidity ^0.8.9;\r\n\r\nlibrary LibTimeManagement{\r\n    \r\n    enum StakeDayInterval{ One, Three, Nine, Eighteen, ThirtySix}\r\n\r\n    //StakeDayInterval helpers\r\n    function getDayIntervalSeconds( StakeDayInterval _stakeDayInterval) internal pure returns (uint32){\r\n         return stakeDayIntervals()[uint8(_stakeDayInterval)];\r\n    }\r\n    function getDayIntervalSeconds( uint8 _stakeEnumIndexer) internal pure returns (uint32){\r\n         return stakeDayIntervals()[ _stakeEnumIndexer];\r\n    }\r\n    function stakeDayIntervals() internal pure returns ( uint32[5] memory){\r\n        return [uint32(86400), 259200, 777600, 1555200, 3110400];\r\n    }\r\n    function uint8ToStakeDay(uint8 _stakeDayIntervalIndex) internal pure returns ( StakeDayInterval stakeDayInterval_){\r\n        return StakeDayInterval(_stakeDayIntervalIndex);\r\n    }\r\n    /**\r\n     * \r\n     * @param _unix initial time slot\r\n     * @param _incrementAmount amount of denmoninatinal interval sizes to increment\r\n     */ \r\n    function incrementTimeSlot( uint32 _unix, uint16 _incrementAmount) internal pure returns (uint32 incrementedTimeSlot_){\r\n        \r\n    }\r\n    \r\n    //must be ordered from least to greatest\r\n    //smallest item IS the denomination unit of stake interval\r\n    \r\n  \r\n    function getCurrentIntervalStartTimeSlot(uint32 _unix, uint32 _TIME_INTERVAL) internal pure returns(uint32 timeSlot_){\r\n        timeSlot_ = _unix - (_unix % _TIME_INTERVAL );\r\n    } \r\n    function getNextTimeSlot(uint32 _unix, uint32 _TIME_INTERVAL) internal pure returns(uint32 timeSlot_){\r\n        timeSlot_ = _unix - (_unix % _TIME_INTERVAL ) + _TIME_INTERVAL;\r\n    } \r\n    /*\r\n     *  Already know _unix is a multiple of time interval, so now we find out what bit in _BIT_FLAG_INTERVAL\r\n     *  corresponds to the inverval \r\n     * @param _unix \r\n     * @param _BIT_FLAG_INTERVAL \r\n     */\r\n    \r\n    function bitFlagRemainder(uint32 _unix, uint32 _INTERVAL_SIZE ) internal pure returns (uint32 bitFlagTimestamp_, uint8 bitStartPosition_){\r\n        uint32 _bitFlagInterval = _INTERVAL_SIZE * type(uint8).max;\r\n        bitStartPosition_ =  uint8 ( ( _unix % _bitFlagInterval ) / _INTERVAL_SIZE) ; \r\n        bitFlagTimestamp_ = _unix - (_unix % _bitFlagInterval );\r\n    }\r\n    \r\n    function shiftDownBitMap(uint32 _unix) internal pure returns (uint32 shiftedSlot_){\r\n        shiftedSlot_ = _unix - denominationalSize() * type(uint8).max;\r\n    }\r\n    \r\n    function getTimeSlotFromPosition(uint32 _activatedBitMapStartingSlot, uint8 _timeSlotPosition) internal pure returns(uint32 timeSlot_){\r\n        _activatedBitMapStartingSlot + _timeSlotPosition ;//FIX\r\n    }\r\n    function getFinalTimeSlot(uint32 _startTimeSlot, StakeDayInterval _stakeDayInterval) internal pure returns(uint32 finalTimeSlot_){\r\n        //subtract denominational interval due to the startTimeSlot being included \r\n        finalTimeSlot_ = _startTimeSlot + getDayIntervalSeconds(_stakeDayInterval) - getDayIntervalSeconds(StakeDayInterval.One);\r\n    }\r\n    /**\r\n     * Converting an interval to a denomination size is useful for getting the size of an\r\n     * interval in amount of timeslots, which is handy with indexing\r\n     */\r\n    function denominationalSize() internal pure returns(uint32 size_){\r\n        size_ = getDayIntervalSeconds(StakeDayInterval.One);\r\n\r\n    }\r\n    /**\r\n     * \r\n     * @param _stakeInterval stake interval to be converted\r\n     * @dev We can perform this division so long as max interval is <= 255 times bigger than denominational size \r\n     */\r\n    function convertDenominationalUnits(StakeDayInterval _stakeInterval) internal pure returns(uint8 denominationalSize_){\r\n        uint32 _intervalSeconds = getDayIntervalSeconds(_stakeInterval);\r\n        denominationalSize_ = uint8(_intervalSeconds / denominationalSize());\r\n    }\r\n    function bitFlagRemainder(uint32 _unix, StakeDayInterval _interval ) internal pure returns (uint32 bitFlagTimestamp_, uint8 bitFlagPosition_){\r\n         uint32 _intervalSeconds = getDayIntervalSeconds(_interval);\r\n        ( bitFlagTimestamp_,  bitFlagPosition_) = bitFlagRemainder(_unix, _intervalSeconds);\r\n    }\r\n} \r\n\r\n\r\n"
    },
    "contracts/exchange/LibUnderflow.sol": {
      "content": "pragma solidity ^0.8.9;\r\n\r\nlibrary LibUnderflow{\r\n\r\n    function uint8Underflow(uint8 _minuend, uint8 _subtrahend) internal pure returns(bool isUnderflow_, uint8 amount_) {\r\n        unchecked{ \r\n            uint8  _difference =  _minuend - _subtrahend;\r\n            if(_difference > _minuend){\r\n                return (true , type(uint8).max + 1 - _difference);\r\n            }\r\n            return (false, _difference);\r\n        }\r\n    }\r\n}"
    },
    "contracts/exchange/TicketExhange.sol": {
      "content": "pragma solidity ^0.8.9;\r\n\r\nimport {ERC1155} from \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\"; \r\nimport {IERC1155Transfer} from \"../facets/Tokens/ERC1155/interfaces/IERC1155Transfer.sol\";\r\nimport {IERC1155} from \"../facets/Tokens/ERC1155/interfaces/IERC1155.sol\";\r\nimport {IERC20} from \"../facets/Tokens/ERC20/interfaces/IERC20.sol\";\r\nimport \"./ExchangeRewardPool.sol\";\r\n \r\n \r\ncontract MassDX is  ExchangeRewardPool{  \r\n    address public  massDXProtocol;   \r\n \r\n    // per\r\n    uint24 constant PERCENTAGE_BASE =             1000000; \r\n    uint24 MASSDX_PROTOCOL_FEE_PERCENTAGE =  10000; //1%\r\n    uint24 public TIME_POOL_FEE_PERCENTAGE =        2000; //0.2%\r\n    uint64 constant STAKE_PRECISION_HELPER = type(uint64).max; // used as a placeholder before calculating stake rewards \r\n                                                               // during division to maintain precision\r\n    //Auction\r\n    uint24 MIN_BID_INCREASE =               30000; //3%\r\n    mapping(uint96 => TicketSale) public ticketSale;\r\n    \r\n\r\n    enum SaleStatus {NonExistent, Available, Sold, Cancelled}\r\n    enum AuctionStatus {Ongoing, Completed, Cancelled, Overtime}\r\n\r\n    event SaleCreated(TotalSale);\r\n    event SaleCancelled(uint96);\r\n    event SaleExecuted(uint96 saleId, uint256 ticketAmount, address buyer, uint256 sellerFee, uint256 timePoolTokensMinted );\r\n    \r\n    struct TicketSale{\r\n       address ticketAddress;\r\n        uint256 ticketId;\r\n        uint256 ticketAmount;\r\n        address tokenAddress;\r\n        uint256 tokenAmountPerTicket;\r\n       SaleStatus status;\r\n       address sellerAddress;\r\n    }\r\n    struct TotalSale {\r\n        uint96 saleId;\r\n        SaleInput sale;\r\n    }\r\n    struct SaleInput{\r\n        address ticketAddress;\r\n        uint256 ticketId;\r\n        uint256 ticketAmount;\r\n        uint256 tokenAmountPerTicket;\r\n        address tokenAddress;\r\n    }\r\n    struct Auction {\r\n        uint96 auctionId;\r\n        SaleInput sale;\r\n        AuctionParams params;\r\n        \r\n    }\r\n    struct AuctionParams{\r\n        uint32 expirationTime; \r\n        uint256 buyNow;\r\n        uint256 minimumBid;\r\n    }\r\n\r\n    constructor( address _exchangeRewardERC1155 ) ExchangeRewardPool( _exchangeRewardERC1155){\r\n        massDXProtocol = msgSender();\r\n    }\r\n    function sellTickets( TotalSale[] memory _tickets) external {\r\n        for(uint ticketIndex; ticketIndex < _tickets.length; ticketIndex ++){\r\n            sellTicket(_tickets[ticketIndex]);\r\n        }\r\n    }\r\n\r\n    //User's can sell for reward tokens, but it won't gain rewards due to not implementing ERC20\r\n    /**\r\n     * \r\n     * @param _ticket ticket(s) for sale\r\n     * @dev ticket price is price per ticket. \r\n     */\r\n    function sellTicket( TotalSale memory _ticket) public {\r\n        //assert unused ticketId\r\n        require( ticketSale[ _ticket.saleId ].status == SaleStatus.NonExistent, \"Must generate a unique sale id\");\r\n        require( _ticket.sale.ticketAmount > 0, \"Must sell a non-zero amount of tickets\");\r\n        \r\n        //transfer tickets to exchange \r\n        IERC1155Transfer(_ticket.sale.ticketAddress).safeTransferFrom(msgSender(), address(this), _ticket.sale.ticketId, _ticket.sale.ticketAmount,\"\"); \r\n \r\n        //set valid sale\r\n        \r\n        ticketSale[ _ticket.saleId ] = TicketSale(\r\n            _ticket.sale.ticketAddress, \r\n            _ticket.sale.ticketId,\r\n            _ticket.sale.ticketAmount,\r\n            _ticket.sale.tokenAddress,\r\n            _ticket.sale.tokenAmountPerTicket,\r\n            SaleStatus.Available,\r\n            msgSender()\r\n        );\r\n        emit SaleCreated(_ticket);\r\n    }\r\n\r\n    function cancelSale (uint96 _saleId) public {\r\n        TicketSale storage _ticketSale = ticketSale[_saleId];\r\n        require(msgSender() == _ticketSale.sellerAddress, \"Must be the seller to cancel this sale\"); \r\n        IERC1155Transfer(_ticketSale.ticketAddress).safeTransferFrom( address(this), msgSender(), _ticketSale.ticketId, _ticketSale.ticketAmount,\"\"); \r\n  \r\n        _ticketSale.status = SaleStatus.Cancelled;\r\n        emit SaleCancelled(_saleId);\r\n    }\r\n\r\n    /**\r\n     * @param _saleId id of the sale\r\n     * @param _ticketAmount  amount of tickets to purchase from this sale\r\n     * @dev buys a ticket from a given sale ID. \r\n     * \r\n     */\r\n    function buyTickets(uint96 _saleId, uint256 _ticketAmount) public {\r\n        uint256 _mintAmount; \r\n        uint256 _sellerFee;\r\n        uint256 _massDXProtocolFee;\r\n        uint256 _timePoolFee;\r\n        address _tokenAddress;\r\n        //approaching stack too deep limit, don't unpack variables\r\n        TicketSale storage _ticketSale = ticketSale[_saleId];\r\n        _tokenAddress = _ticketSale.tokenAddress;\r\n        //assert valid sale conditions\r\n        require(_ticketAmount <= _ticketSale.ticketAmount, \"Unable to purchase more tickets than are currently available.\");\r\n        require(_ticketSale.status == SaleStatus.Available,\"Sale isn't available anymore.\");\r\n\r\n        //transfer tickets/currency\r\n         \r\n        uint256 _totalCost = _ticketAmount * _ticketSale.tokenAmountPerTicket;\r\n\r\n        //transfer protocol fee \r\n        _massDXProtocolFee = ( _totalCost * MASSDX_PROTOCOL_FEE_PERCENTAGE )/PERCENTAGE_BASE;\r\n        IERC20(_tokenAddress).transferFrom(msgSender(), massDXProtocol, _massDXProtocolFee);\r\n        //time pool fee\r\n        _timePoolFee = ( _totalCost * TIME_POOL_FEE_PERCENTAGE )/PERCENTAGE_BASE;\r\n        IERC20(_tokenAddress).transferFrom(msgSender(), address(this), _timePoolFee);\r\n\r\n        //updates the following:\r\n        // activate this timeslots bitmap position if not done so already\r\n        // total earning /sum ratio locally and globally \r\n        updateRewardsData(_tokenAddress, _timePoolFee);\r\n        \r\n        \r\n        //transfer currency to seller\r\n        _sellerFee = _totalCost - _massDXProtocolFee - _timePoolFee; \r\n        IERC20(_tokenAddress).transferFrom(msgSender(), _ticketSale.sellerAddress, _sellerFee );\r\n        //transfer ticket to buyer\r\n        IERC1155Transfer(_ticketSale.ticketAddress).safeTransferFrom( address(this), msgSender(), _ticketSale.ticketId, _ticketAmount,\"\");\r\n        \r\n        //generate time pool reward tokens\r\n        //the reward token is purely relative to it's exchange counterpart, hence we can simply take a \r\n        //1:1 correspondence of the sale amount as the base conversion of  a transaction to reward amount\r\n        //but since we want to implement erc1155, that implies allowing the purchase of tickets via reward tokens\r\n        //users could then double their rewards by simply buying an item\r\n        //issue has to do with minting on purchase. \r\n        //but it wouldnt be an issue if a new reward token for the reward token was created, but that's getting out\r\n        //scope\r\n        _mintAmount = _totalCost;\r\n        //exchange token addresses are mapped directly to erc1155 reward ids\r\n        IERC1155( exchangeRewardERC1155 ).mint(_ticketSale.sellerAddress,uint256(uint160(_tokenAddress)), _mintAmount,\"\");\r\n         \r\n        //update sale information\r\n        uint256 _newTicketAmount = _ticketSale.ticketAmount - _ticketAmount;\r\n        if( _newTicketAmount == 0 ){\r\n            _ticketSale.status = SaleStatus.Sold;\r\n        }\r\n        _ticketSale.ticketAmount -= _ticketAmount;\r\n\r\n        emit SaleExecuted(_saleId, _ticketAmount, msgSender(), _sellerFee, _mintAmount);\r\n        //assert \r\n\r\n         \r\n    }\r\n \r\n \r\n    \r\n    // function createAuction() external {\r\n\r\n    // }\r\n    // function cancelAuction() external{\r\n\r\n    // }\r\n\r\n    // function bid() external {\r\n\r\n    // }\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n"
    },
    "contracts/facets/Diamond/DiamondCutFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/******************************************************************************\\\r\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\r\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\r\n/******************************************************************************/\r\n\r\nimport { IDiamondCut } from \"./IDiamondCut.sol\"; \r\nimport { LibDiamond } from \"./LibDiamond.sol\";\r\n\r\nimport {iOwnership} from \"../Ownership/_Ownership.sol\";  \r\n\r\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\r\n// The loupe functions are required by the EIP2535 Diamonds standard\r\n\r\ncontract DiamondCutFacet is IDiamondCut, iOwnership {\r\n    /// @notice Add/replace/remove any number of functions and optionally execute\r\n    ///         a function with delegatecall\r\n    /// @param _diamondCut Contains the facet addresses and function selectors\r\n    /// @param _init The address of the contract or facet to execute _calldata\r\n    /// @param _calldata A function call, including function selector and arguments\r\n    ///                  _calldata is executed with delegatecall on _init\r\n    function diamondCut(\r\n        FacetCut[] calldata _diamondCut,\r\n        address _init,\r\n        bytes calldata _calldata\r\n    ) external override {\r\n        isEffectiveOwner();\r\n        LibDiamond.diamondCut(_diamondCut, _init, _calldata);\r\n    }\r\n    \r\n    /**\r\n     * @notice Initiate a migration away from the massDX ecosystem versions. \r\n     * There is a 3 day minimum required timespan\r\n     */\r\n    function initiateMigration() external {\r\n        isEcosystemOwnerVerification();\r\n\r\n        _initiateMigration();\r\n    }\r\n\r\n    /**\r\n     * @notice If an ongoing migration exists and hasn't surpassed the 3 day \r\n     * minimum wait time, then the migration will be cancelled.\r\n     */\r\n    function cancelMigration() external {\r\n        isEcosystemOwnerVerification();\r\n\r\n        _cancelMigration();\r\n    }\r\n}\r\n"
    },
    "contracts/facets/Diamond/DiamondLoupeFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n/******************************************************************************\\\r\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\r\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\r\n/******************************************************************************/\r\n\r\nimport {LibDiamond} from \"./LibDiamond.sol\";\r\nimport {IDiamondLoupe} from \"./IDiamondLoupe.sol\";\r\nimport {IERC165} from \"../../IERC165.sol\";  \r\n\r\n// The functions in DiamondLoupeFacet MUST be added to a diamond.\r\n// The EIP-2535 Diamond standard requires these functions.\r\n\r\ncontract DiamondLoupeFacet is IDiamondLoupe, IERC165 {\r\n    // Diamond Loupe Functions\r\n    ////////////////////////////////////////////////////////////////////\r\n    /// These functions are expected to be called frequently by tools.\r\n    //\r\n    // struct Facet {\r\n    //     address facetAddress;\r\n    //     bytes4[] functionSelectors;\r\n    // }\r\n\r\n    /// @notice Gets all facets and their selectors.\r\n    /// @return facets_ Facet\r\n    function facets() external view override returns (Facet[] memory facets_) {\r\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\r\n        uint256 numFacets = ds.facetAddresses.length;\r\n        facets_ = new Facet[](numFacets);\r\n        for (uint256 i; i < numFacets; i++) {\r\n            address facetAddress_ = ds.facetAddresses[i];\r\n            facets_[i].facetAddress = facetAddress_;\r\n            facets_[i].functionSelectors = ds.facetFunctionSelectors[facetAddress_].functionSelectors;\r\n        }\r\n    }\r\n\r\n    /// @notice Gets all the function selectors provided by a facet.\r\n    /// @param _facet The facet address.\r\n    /// @return facetFunctionSelectors_\r\n    function facetFunctionSelectors(address _facet) external view override returns (bytes4[] memory facetFunctionSelectors_) {\r\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\r\n        facetFunctionSelectors_ = ds.facetFunctionSelectors[_facet].functionSelectors;\r\n    }\r\n\r\n    /// @notice Get all the facet addresses used by a diamond.\r\n    /// @return facetAddresses_\r\n    function facetAddresses() external view override returns (address[] memory facetAddresses_) {\r\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\r\n        facetAddresses_ = ds.facetAddresses;\r\n    }\r\n\r\n    /// @notice Gets the facet that supports the given selector.\r\n    /// @dev If facet is not found return address(0).\r\n    /// @param _functionSelector The function selector.\r\n    /// @return facetAddress_ The facet address.\r\n    function facetAddress(bytes4 _functionSelector) external view override returns (address facetAddress_) {\r\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\r\n        facetAddress_ = ds.selectorToFacetAndPosition[_functionSelector].facetAddress;\r\n    }\r\n\r\n    // This implements ERC-165.\r\n    function supportsInterface(bytes4 _interfaceId) external view override returns (bool) {\r\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\r\n        return ds.supportedInterfaces[_interfaceId];\r\n    }\r\n}\r\n"
    },
    "contracts/facets/Diamond/IDiamondCut.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/******************************************************************************\\\r\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\r\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\r\n/******************************************************************************/\r\n\r\ninterface IDiamondCut {\r\n    enum FacetCutAction {Add, Replace, Remove}\r\n    // Add=0, Replace=1, Remove=2\r\n\r\n    struct FacetCut {\r\n        address facetAddress;\r\n        FacetCutAction action;  \r\n        bytes4[] functionSelectors;\r\n    }\r\n\r\n    /// @notice Add/replace/remove any number of functions and optionally execute\r\n    ///         a function with delegatecall\r\n    /// @param _diamondCut Contains the facet addresses and function selectors\r\n    /// @param _init The address of the contract or facet to execute _calldata\r\n    /// @param _calldata A function call, including function selector and arguments\r\n    ///                  _calldata is executed with delegatecall on _init\r\n    function diamondCut(\r\n        FacetCut[] calldata _diamondCut,\r\n        address _init,\r\n        bytes calldata _calldata\r\n    ) external;\r\n\r\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\r\n}\r\n"
    },
    "contracts/facets/Diamond/IDiamondLoupe.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/******************************************************************************\\\r\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\r\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\r\n/******************************************************************************/\r\n\r\n// A loupe is a small magnifying glass used to look at diamonds.\r\n// These functions look at diamonds\r\ninterface IDiamondLoupe {\r\n    /// These functions are expected to be called frequently\r\n    /// by tools.\r\n \r\n    struct Facet {\r\n        address facetAddress;\r\n        bytes4[] functionSelectors;\r\n    }\r\n\r\n    /// @notice Gets all facet addresses and their four byte function selectors.\r\n    /// @return facets_ Facet\r\n    function facets() external view returns (Facet[] memory facets_);\r\n\r\n    /// @notice Gets all the function selectors supported by a specific facet.\r\n    /// @param _facet The facet address.\r\n    /// @return facetFunctionSelectors_\r\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\r\n\r\n    /// @notice Get all the facet addresses used by a diamond.\r\n    /// @return facetAddresses_\r\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\r\n\r\n    /// @notice Gets the facet that supports the given selector.\r\n    /// @dev If facet is not found return address(0).\r\n    /// @param _functionSelector The function selector.\r\n    /// @return facetAddress_ The facet address.\r\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\r\n}\r\n"
    },
    "contracts/facets/Diamond/LibDiamond.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/******************************************************************************\\\r\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\r\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\r\n/******************************************************************************/\r\nimport { IDiamondCut } from \"./IDiamondCut.sol\";\r\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\r\n// The loupe functions are required by the EIP2535 Diamonds standard\r\nimport {LibOwnership} from \"../Ownership/LibOwnership.sol\";\r\n\r\nlibrary LibDiamond {\r\n    error InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\r\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\"diamond.standard.diamond.storage\");\r\n    \r\n    struct FacetAddressAndPosition {\r\n        address facetAddress;\r\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\r\n    }\r\n\r\n    struct FacetFunctionSelectors {\r\n        bytes4[] functionSelectors;\r\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\r\n    }\r\n\r\n    struct DiamondStorage {\r\n        // maps function selector to the facet address and\r\n        // the position of the selector in the facetFunctionSelectors.selectors array\r\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\r\n        // maps facet addresses to function selectors\r\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\r\n        // facet addresses\r\n        address[] facetAddresses;\r\n        // Used to query if a contract implements an interface.\r\n        // Used to implement ERC-165.\r\n        mapping(bytes4 => bool) supportedInterfaces;\r\n        \r\n    }\r\n\r\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\r\n        bytes32 position = DIAMOND_STORAGE_POSITION;\r\n        assembly {\r\n            ds.slot := position\r\n        }\r\n    }\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n\r\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\r\n\r\n    // Internal function version of diamondCut\r\n    function diamondCut(\r\n        IDiamondCut.FacetCut[] memory _diamondCut,\r\n        address _init,\r\n        bytes memory _calldata\r\n    ) internal {\r\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\r\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\r\n            if (action == IDiamondCut.FacetCutAction.Add) {\r\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\r\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\r\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\r\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\r\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\r\n            } else {\r\n                revert(\"LibDiamondCut: Incorrect FacetCutAction\");\r\n            }\r\n        }\r\n        emit DiamondCut(_diamondCut, _init, _calldata);\r\n        initializeDiamondCut(_init, _calldata);\r\n    }\r\n\r\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\r\n\r\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\r\n        DiamondStorage storage ds = diamondStorage();        \r\n        require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\r\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\r\n        // add new facet address if it does not exist\r\n        if (selectorPosition == 0) {\r\n            addFacet(ds, _facetAddress);            \r\n        }\r\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\r\n            bytes4 selector = _functionSelectors[selectorIndex];\r\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\r\n            require(oldFacetAddress == address(0), \"LibDiamondCut: Can't add function that already exists\");\r\n            addFunction(ds, selector, selectorPosition, _facetAddress);\r\n            selectorPosition++;\r\n        }\r\n    }\r\n\r\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\r\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\r\n        DiamondStorage storage ds = diamondStorage();\r\n        require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\r\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\r\n        // add new facet address if it does not exist\r\n        if (selectorPosition == 0) {\r\n            addFacet(ds, _facetAddress);\r\n        }\r\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\r\n            bytes4 selector = _functionSelectors[selectorIndex];\r\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\r\n            require(oldFacetAddress != _facetAddress, \"LibDiamondCut: Can't replace function with same function\");\r\n            removeFunction(ds, oldFacetAddress, selector);\r\n            addFunction(ds, selector, selectorPosition, _facetAddress);\r\n            selectorPosition++;\r\n        }\r\n    }\r\n\r\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\r\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\r\n        DiamondStorage storage ds = diamondStorage();\r\n        // if function does not exist then do nothing and return\r\n        require(_facetAddress == address(0), \"LibDiamondCut: Remove facet address must be address(0)\");\r\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\r\n            bytes4 selector = _functionSelectors[selectorIndex];\r\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\r\n            removeFunction(ds, oldFacetAddress, selector);\r\n        }\r\n    }\r\n\r\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\r\n        enforceHasContractCode(_facetAddress, \"LibDiamondCut: New facet has no code\");\r\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\r\n        ds.facetAddresses.push(_facetAddress);\r\n    }    \r\n\r\n\r\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\r\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\r\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\r\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\r\n    }\r\n\r\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \r\n        require(_facetAddress != address(0), \"LibDiamondCut: Can't remove function that doesn't exist\");\r\n        // an immutable function is a function defined directly in a diamond\r\n        require(_facetAddress != address(this), \"LibDiamondCut: Can't remove immutable function\");\r\n        // replace selector with last selector, then delete last selector\r\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\r\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\r\n        // if not the same then replace _selector with lastSelector\r\n        if (selectorPosition != lastSelectorPosition) {\r\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\r\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\r\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\r\n        }\r\n        // delete the last selector\r\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\r\n        delete ds.selectorToFacetAndPosition[_selector];\r\n\r\n        // if no more selectors for facet address then delete the facet address\r\n        if (lastSelectorPosition == 0) {\r\n            // replace facet address with last facet address and delete last facet address\r\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\r\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\r\n            if (facetAddressPosition != lastFacetAddressPosition) {\r\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\r\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\r\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\r\n            }\r\n            ds.facetAddresses.pop();\r\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\r\n        }\r\n    }\r\n\r\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\r\n        if (_init == address(0)) {\r\n            return;\r\n        }\r\n        enforceHasContractCode(_init, \"LibDiamondCut: _init address has no code\");        \r\n        (bool success, bytes memory error) = _init.delegatecall(_calldata);\r\n        if (!success) {\r\n            if (error.length > 0) {\r\n                // bubble up error\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    let returndata_size := mload(error)\r\n                    revert(add(32, error), returndata_size)\r\n                }\r\n            } else {\r\n                revert InitializationFunctionReverted(_init, _calldata);\r\n            }\r\n        }\r\n    }\r\n\r\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\r\n        uint256 contractSize;\r\n        assembly {\r\n            contractSize := extcodesize(_contract)\r\n        }\r\n        require(contractSize > 0, _errorMessage);\r\n    }\r\n    \r\n}\r\n\r\n"
    },
    "contracts/facets/ERC2771Recipient/_ERC2771Recipient.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// solhint-disable no-inline-assembly\r\npragma solidity >=0.8.0;\r\n\r\n\r\n\r\nimport { LibERC2771Recipient } from \"./LibERC2771Recipient.sol\";  \r\n/**\r\n * @title The ERC-2771 Recipient Base Abstract Class - Implementation\r\n *\r\n * @notice Note that this contract was called `BaseRelayRecipient` in the previous revision of the GSN.\r\n *\r\n * @notice A base contract to be inherited by any contract that want to receive relayed transactions.\r\n *\r\n * @notice A subclass must use `_msgSender()` instead of `msg.sender`.\r\n */\r\ncontract iERC2771Recipient {\r\n \r\n    /*\r\n     * Forwarder singleton we accept calls from\r\n     */\r\n     \r\n    \r\n\r\n    function _getTrustedForwarder() internal  view returns (address forwarder){\r\n        return LibERC2771Recipient.__getTrustedForwarder();\r\n    }\r\n\r\n    function _setTrustedForwarder(address _forwarder) internal {\r\n        LibERC2771Recipient.__setTrustedForwarder(_forwarder); \r\n    }\r\n  \r\n  \r\n    function _isTrustedForwarder(address forwarder) internal  view returns(bool) {\r\n        return LibERC2771Recipient._isTrustedForwarder(forwarder);\r\n    } \r\n\r\n    \r\n    function msgSender() internal  view returns (address ret_) {\r\n        ret_ = LibERC2771Recipient._msgSender();\r\n    }\r\n    \r\n    function msgData() internal  view returns (bytes calldata ret_) {\r\n        ret_ = LibERC2771Recipient._msgData();\r\n    }\r\n}"
    },
    "contracts/facets/ERC2771Recipient/ERC2771Recipient.sol": {
      "content": "\r\n\r\n// SPDX-License-Identifier: MIT\r\n// solhint-disable no-inline-assembly\r\npragma solidity >=0.8.0;\r\n\r\n\r\n\r\nimport { LibERC2771Recipient } from \"./LibERC2771Recipient.sol\";  \r\nimport { iERC2771Recipient} from \"./_ERC2771Recipient.sol\"; \r\n\r\nimport {iOwnership} from \"../Ownership/_Ownership.sol\";\r\n/**\r\n * @title The ERC-2771 Recipient Base Abstract Class - Implementation\r\n *\r\n * @notice Note that this contract was called `BaseRelayRecipient` in the previous revision of the GSN.\r\n *\r\n * @notice A base contract to be inherited by any contract that want to receive relayed transactions.\r\n *\r\n * @notice A subclass must use `_msgSender()` instead of `msg.sender`.\r\n */\r\ncontract ERC2771Recipient is iERC2771Recipient, iOwnership{\r\n \r\n    /*\r\n     * Forwarder singleton we accept calls from\r\n     */\r\n     \r\n    \r\n    constructor(address _forwarder){ \r\n        _setTrustedForwarder(_forwarder); \r\n    }\r\n\r\n    function getTrustedForwarder() public  view returns (address forwarder){\r\n        return _getTrustedForwarder();\r\n    }\r\n\r\n    function setTrustedForwarder(address _forwarder) private {\r\n        _setTrustedForwarder(_forwarder); \r\n    }\r\n    \r\n    function isTrustedForwarder(address forwarder) external view returns( bool trusted_){\r\n        trusted_ = _isTrustedForwarder(forwarder);\r\n    } \r\n}\r\n"
    },
    "contracts/facets/ERC2771Recipient/LibERC2771Recipient.sol": {
      "content": "// LibEventStorage.sol\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\nlibrary LibERC2771Recipient {\r\n    bytes32 constant STORAGE_POSITION = keccak256(\"diamond.storage.ERC2771Recipient\");\r\n\r\n   \r\n    struct ERC2771RecipientStorage {\r\n        address trustedForwarder;\r\n    }\r\n\r\n    function erc2771RecipientStorage() internal pure returns ( ERC2771RecipientStorage storage es) {\r\n        bytes32 position = STORAGE_POSITION;\r\n        assembly {\r\n            es.slot := position\r\n        }\r\n    }\r\n\r\n\r\n   function __getTrustedForwarder() internal  view returns (address trustedForwarder_){\r\n       ERC2771RecipientStorage storage es =  erc2771RecipientStorage();\r\n        trustedForwarder_ =  es.trustedForwarder;\r\n    }\r\n\r\n    function __setTrustedForwarder(address _forwarder) internal {\r\n        ERC2771RecipientStorage storage es =  erc2771RecipientStorage();\r\n        es.trustedForwarder = _forwarder; \r\n    }\r\n \r\n  \r\n    function _isTrustedForwarder(address forwarder) public  view returns(bool) {\r\n        ERC2771RecipientStorage storage es =  erc2771RecipientStorage();\r\n        return forwarder == es.trustedForwarder;\r\n    }\r\n \r\n    \r\n    function _msgSender() internal  view returns (address ret) {\r\n        if (msg.data.length >= 20 && _isTrustedForwarder(msg.sender)) {\r\n            // At this point we know that the sender is a trusted forwarder,\r\n            // so we trust that the last bytes of msg.data are the verified sender address.\r\n            // extract sender address from the end of msg.data\r\n            assembly {\r\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\r\n            }\r\n        } else {\r\n            ret = msg.sender;\r\n        }\r\n    }\r\n\r\n    \r\n    function _msgData() internal  view returns (bytes calldata ret) {\r\n        if (msg.data.length >= 20 && _isTrustedForwarder(msg.sender)) {\r\n            return msg.data[0:msg.data.length-20];\r\n        } else {\r\n            return msg.data;\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/facets/ERC2981/_ERC2981.sol": {
      "content": "pragma solidity ^0.8.28;\r\n\r\nimport { LibERC2981 } from \"./LibERC2981.sol\";   \r\nimport { iOwnership } from \"../Ownership/_Ownership.sol\"; \r\nimport { LibERC1155TransferConstraints } from \"../Tokens/ERC1155/libraries/LibERC1155TransferConstraints.sol\";\r\ncontract iERC2981 is iOwnership{\r\n    event RoyaltyFeeAccessed( address sender, uint256 tokenId, uint256 salePrice, uint256 royaltyAmount);\r\n      // EIP-2981 royalty info\r\n    function _royaltyInfo(\r\n        uint256 tokenId,\r\n        uint256 salePrice\r\n    ) internal  returns (address receiver, uint256 royaltyAmount) {\r\n        LibERC1155TransferConstraints.ConstraintStorage storage cs = \r\n        LibERC1155TransferConstraints.erc1155ConstraintStorage();\r\n        \r\n        uint256 _royalteFee = cs.royaltyFee[ tokenId ];  \r\n   \r\n        receiver = _ecosystemOwner();\r\n        royaltyAmount = ( salePrice * _royalteFee ) / 100000; // Basis points calculation\r\n        \r\n        emit RoyaltyFeeAccessed(msgSender(), tokenId, salePrice, royaltyAmount); \r\n    }\r\n}"
    },
    "contracts/facets/ERC2981/ERC2981.sol": {
      "content": "pragma solidity ^0.8.28;\r\n\r\nimport { LibERC2981 } from \"./LibERC2981.sol\";   \r\nimport { iERC2981 } from \"./_ERC2981.sol\";\r\ncontract ERC2981 is iERC2981{\r\n    function royaltyInfo(\r\n        uint256 tokenId,\r\n        uint256 salePrice\r\n    ) external  returns (address receiver, uint256 royaltyAmount) {\r\n       _royaltyInfo(tokenId, salePrice);\r\n    }\r\n}"
    },
    "contracts/facets/ERC2981/LibERC2981.sol": {
      "content": "pragma solidity ^0.8.28;\r\nlibrary LibERC2981 {\r\n    \r\n    bytes32 constant STORAGE_ERC2981 = \"diamond.storage.ERC2981\";\r\n\r\n    struct ERC2981Storage {\r\n        mapping(uint256 => uint256) royaltyFee; // tokenId -> royaltyFee\r\n    } \r\n\r\n    function erc2981torage() internal pure returns (ERC2981Storage storage es_) {\r\n        bytes32 storagePosition = STORAGE_ERC2981;\r\n        assembly {\r\n            es_.slot := storagePosition\r\n        }\r\n    }\r\n}"
    },
    "contracts/facets/Events/_EventFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./LibEventFactory.sol\"; \r\nimport \"../../libraries/utils/MerkleProof.sol\"; \r\nimport \"../Tokens/ERC1155/interfaces/IERC1155Transfer.sol\";\r\nimport \"../Ownership/_Ownership.sol\"; \r\nimport {LibOwnership} from \"../Ownership/LibOwnership.sol\";\r\nimport \"../Tokens/ERC1155/internals/iERC1155Transfer.sol\"; \r\nimport \"hardhat/console.sol\";\r\n\r\ncontract iEventFactory is iOwnership, iERC1155Transfer { \r\n\r\n    /// @dev Emitted when an event is deactivated by the owner.\r\n    /// @param eventId The unique identifier for the event.\r\n    event EventDeactivated(uint256 eventId);\r\n\r\n    /// @dev Emitted when an event transitions from a pending state to an active state, which generally happens when the first ticket for the event is redeemed.\r\n    /// @param eventId The unique identifier for the event.\r\n    event EventActivated(uint256 eventId);\r\n\r\n    /// @dev Emitted when one or more tickets are redeemed for an event. Contains details of the ticket IDs and the respective amounts that have been redeemed.\r\n    /// @param eventId The unique identifier for the event.\r\n    /// @param ticketIds An array of unique identifiers for the tickets that have been redeemed.\r\n    /// @param amounts An array of amounts representing the quantity redeemed for each corresponding ticket ID.\r\n    event TicketRedeemed(uint256 eventId, uint256[] ticketIds, uint256[] amounts);\r\n\r\n    /// @dev Emitted when a ticket is refunded. This occurs after a successful call to the `refundTicketsWithProof` function, indicating that the refund was processed successfully.\r\n    /// @param eventId The unique identifier for the event.\r\n    /// @param ticketId The unique identifier for the ticket that has been refunded.\r\n    /// @param amount The amount that has been refunded for the particular ticket id.\r\n    event TicketRefunded(uint256 eventId, uint256 ticketId, uint256 amount);\r\n\r\n    /// @dev Emitted when a new event is created. Contains all the essential details regarding the event including its schedule and entry conditions.\r\n    /// @param eventId The unique identifier for the event.\r\n    /// @param startTime The start time of the event, represented as a UNIX timestamp.\r\n    /// @param endTime The end time of the event, represented as a UNIX timestamp.\r\n    /// @param minEntries The minimum number of entries required for the event.\r\n    /// @param maxEntries The maximum number of entries allowed for the event.\r\n    /// @param imageUri A URI pointing to the event's image resource.\r\n    /// @param maxEntriesPerUser max entries a user can submit to event\r\n    /// @param status The current status of the event.\r\n    event EventDetails(\r\n        uint256 eventId,\r\n        uint32 startTime,\r\n        uint32 endTime,\r\n        uint256 minEntries,\r\n        uint256 maxEntries,\r\n        string imageUri,\r\n        uint256 maxEntriesPerUser,\r\n        LibEventFactory.EventStatus status\r\n    );\r\n\r\n    /// @dev Emitted when ticket details for a specific event are defined or updated. Contains arrays of ticket IDs and their corresponding details.\r\n    /// @param eventId The unique identifier for the event.\r\n    /// @param ticketIds An array of unique identifiers for the tickets associated with the event.\r\n    event TicketDetails(uint256 eventId, uint256[] ticketIds);\r\n    /**\r\n     * @dev Emitted when an event's duration is extended\r\n     * @param eventId The unique identifier for the event.\r\n     * @param addedTime Time added to the endTime property of the event\r\n     */\r\n    event EventExtended(uint256 eventId, uint32 addedTime);\r\n\r\n    event ImageUriUpdated(uint256 eventId, string imageUri);\r\n    event RefundsEnabled(uint256 eventId, bytes32 merkleRoot);\r\n\r\n \r\n\r\n    function _extendEvent(uint256 eventId, uint32 addedTime) internal {\r\n        LibEventFactory.EventDetail storage eventDetail = LibEventFactory.getEventDetail(eventId);\r\n        eventDetail.endTime += addedTime;\r\n        emit EventExtended(eventId, addedTime);\r\n    }\r\n\r\n    function _deactivateEvent(uint256 eventId, bytes32 root) internal  {\r\n        \r\n        LibEventFactory.EventDetail storage eventDetail = LibEventFactory.getEventDetail(eventId);\r\n\r\n        require(\r\n            eventDetail.status == LibEventFactory.EventStatus.Active || eventDetail.status == LibEventFactory.EventStatus.Pending,\r\n            \"Event has already terminated\"\r\n        );\r\n\r\n        eventDetail.status = LibEventFactory.EventStatus.Deactivated;\r\n        emit EventDeactivated(eventId);\r\n\r\n        if (root != bytes32(0)) {\r\n            eventDetail.merkleRoot = root;\r\n        }\r\n    }\r\n\r\n    function _setMerkleRoot(uint256 eventId, bytes32 root) internal {\r\n        LibEventFactory.EventDetail storage eventDetail = LibEventFactory.getEventDetail(eventId);\r\n        LibEventFactory.EventStatus _eventStatus = eventDetail.status;\r\n        require(\r\n            _eventStatus == LibEventFactory.EventStatus.Deactivated || _eventStatus == LibEventFactory.EventStatus.Completed,\r\n            \"Event must be finished.\"\r\n        );\r\n\r\n        bytes32 _merkleRoot = eventDetail.merkleRoot;\r\n        require(_merkleRoot == bytes32(0), \"Merkle root has already been set for this event.\");\r\n        eventDetail.merkleRoot = root;\r\n        emit RefundsEnabled(eventId, _merkleRoot);\r\n    }\r\n\r\n    function _setImageUri(uint256 eventId, string memory imageUri) internal {\r\n        LibEventFactory.EventDetail storage eventDetail = LibEventFactory.getEventDetail(eventId);\r\n        require(eventDetail.endTime != 0, \"Event does not exist\");\r\n        eventDetail.imageUri = imageUri;\r\n        emit ImageUriUpdated(eventId, imageUri);\r\n    }\r\n\r\n    // Additional functions such as `_redeemTickets`, `_refundTicketsWithProof`, and `_createEvent` would be implemented here following the existing logic, but leveraging the `LibEventFactory` library to interact with storage.\r\n\r\n    // Assuming the necessary imports and library setup are done at the top of your file\r\n\r\n    function _createEvent(\r\n        uint32 _startTime,\r\n        uint32 _endTime,\r\n        uint256 _minEntries,\r\n        uint256 _maxEntries,\r\n        string memory _imageUri,\r\n        uint256[] memory _ticketIds,\r\n        uint256 _maxEntriesPerUser\r\n    ) internal returns (uint256) {\r\n        LibEventFactory.EventStorage storage es = LibEventFactory.eventStorage();\r\n\r\n        require(_endTime > block.timestamp - 1, \"Must be non-trivial event time window\");\r\n        require(_maxEntries > 0,\"Must have non-trivial entrant amount\");\r\n        uint256 eventId = uint256(keccak256(abi.encodePacked(_startTime, _endTime, _minEntries, _maxEntries, _imageUri, block.timestamp)));\r\n        require(es.events[eventId].endTime == 0, \"Event must not exist\");\r\n        LibEventFactory.EventDetail storage newEvent = es.events[eventId];\r\n        newEvent.startTime = _startTime;\r\n        newEvent.endTime = _endTime;\r\n        newEvent.minEntries = _minEntries;\r\n        newEvent.maxEntries = _maxEntries;\r\n        newEvent.imageUri = _imageUri;\r\n        newEvent.status = uint32(block.timestamp) < _startTime\r\n            ? LibEventFactory.EventStatus.Pending\r\n            : LibEventFactory.EventStatus.Active;\r\n\r\n        emit EventDetails(eventId, _startTime, _endTime, _minEntries, _maxEntries, _imageUri, _maxEntriesPerUser, newEvent.status);\r\n\r\n        emit TicketDetails(eventId, _ticketIds);\r\n\r\n        return eventId;\r\n    }\r\n\r\n    function _redeemTickets(uint256 eventId, uint256[] memory ticketIds, uint256[] memory amounts) internal {\r\n        LibEventFactory.EventDetail storage eventDetail = LibEventFactory.getEventDetail(eventId);\r\n        LibEventFactory.EventStatus _status = eventDetail.status;\r\n\r\n        require(block.timestamp >= eventDetail.startTime && block.timestamp <= eventDetail.endTime, \"Event not active\");\r\n        require(ticketIds.length == amounts.length, \"Mismatched ticketIds and amounts lengths\");\r\n\r\n        if (_status == LibEventFactory.EventStatus.Pending) {\r\n            eventDetail.status = LibEventFactory.EventStatus.Active;\r\n            emit EventActivated(eventId);\r\n        }\r\n\r\n        for (uint i = 0; i < ticketIds.length; i++) {\r\n            LibEventFactory.TicketDetail storage ticketDetail = LibEventFactory.getTicketDetail(eventId, ticketIds[i]);\r\n            require(eventDetail.currentEntries + 1 <= eventDetail.maxEntries, \"Exceeding max entries\");\r\n            require(amounts[i] >= ticketDetail.minAmount && amounts[i] <= ticketDetail.maxAmount, \"Invalid ticket amount\");\r\n            console.log(\"address(this)\");\r\n            console.log(address(this));\r\n            // Transfer ERC1155 tokens from user to contract\r\n            _safeTransferFrom(msgSender(), address(this), ticketIds[i], amounts[i], \"\");\r\n\r\n            // Update event and ticket details\r\n            eventDetail.currentEntries += 1;\r\n            eventDetail.ticketsRedeemed[msgSender()][ticketIds[i]] += amounts[i];\r\n        }\r\n        emit TicketRedeemed(eventId, ticketIds, amounts);\r\n    }\r\n\r\n    function _refundTicketsWithProof(\r\n        uint256 eventId,\r\n        uint256[] memory ticketIds,\r\n        address lowerBound,\r\n        address upperBound,\r\n        bytes32[] calldata merkleProof\r\n    ) internal {\r\n        LibEventFactory.EventDetail storage eventDetail = LibEventFactory.getEventDetail(eventId);\r\n\r\n        require(validateNonInclusion(eventId, lowerBound, upperBound, merkleProof), \"Proof was invalid\");\r\n\r\n        for (uint i = 0; i < ticketIds.length; i++) {\r\n            uint256 amountToRefund = eventDetail.ticketsRedeemed[msgSender()][ticketIds[i]];\r\n            require(amountToRefund > 0, \"No tickets to refund for this ID\");\r\n\r\n            // Update event details before transfer to ensure state consistency\r\n            eventDetail.currentEntries -= 1;\r\n            eventDetail.ticketsRedeemed[msgSender()][ticketIds[i]] = 0;\r\n            // Transfer ERC1155 tokens back to the user\r\n            _safeTransferFrom(address(this), msgSender(), ticketIds[i], amountToRefund, \"\");\r\n            emit TicketRefunded(eventId, ticketIds[i], amountToRefund);\r\n        }\r\n    }\r\n\r\n    function validateNonInclusion(\r\n        uint256 eventId,\r\n        address lowerBound,\r\n        address upperBound,\r\n        bytes32[] calldata merkleProof\r\n    ) internal view returns (bool) {\r\n        LibEventFactory.EventDetail storage eventDetail = LibEventFactory.getEventDetail(eventId);\r\n\r\n        // Ensure sender is within bounds\r\n        require(\r\n            uint160(lowerBound) < uint160(msgSender()) && uint160(msgSender()) < uint160(upperBound),\r\n            \"Sender is not within the exclusive bounds\"\r\n        );\r\n\r\n        // Verify non-inclusion by proving\r\n        bytes32 leaf= keccak256(bytes.concat(keccak256(abi.encode(lowerBound, upperBound))));\r\n        // bytes32 leaf = keccak256(abi.encodePacked(lowerBound, upperBound));\r\n        return MerkleProof.verify(merkleProof, eventDetail.merkleRoot, leaf);\r\n    }\r\n}\r\n"
    },
    "contracts/facets/Events/EventFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./_EventFactory.sol\";\r\nimport \"./IEventFactory.sol\";\r\nimport \"./LibEventFactory.sol\"; \r\nimport { LibOwnership } from \"../Ownership/LibOwnership.sol\";\r\n \r\ncontract EventFactory is IEventFactory, iEventFactory { \r\n     function setMerkleRoot(uint256 eventId, bytes32 root) external onlyOwner {\r\n        _setMerkleRoot(eventId, root);\r\n    }\r\n    function setImageUri(uint256 eventId, string memory imageUri) external onlyOwner {\r\n        _setImageUri(eventId, imageUri);\r\n    }\r\n    function createEvent(\r\n        uint32 _startTime,\r\n        uint32 _endTime,\r\n        uint256 _minEntries,\r\n        uint256 _maxEntries,\r\n        string calldata _imageUri, \r\n        uint256[] memory _ticketIds,\r\n        uint256 _maxEntriesPerUser\r\n    ) external returns (uint256) {\r\n         isEcosystemOwnerVerification();\r\n       return _createEvent(_startTime, _endTime, _minEntries, _maxEntries, _imageUri, _ticketIds, _maxEntriesPerUser);\r\n    }\r\n     function deactivateEvent(uint256 eventId, bytes32 root) external {\r\n        isEcosystemOwnerVerification();\r\n        _deactivateEvent(eventId, root);\r\n     }\r\n\r\n    function extendEvent(uint256 eventId, uint32 addedTime) external {\r\n         isEcosystemOwnerVerification();\r\n        _extendEvent(eventId, addedTime);\r\n    }\r\n\r\n    function redeemTickets(uint256 eventId, uint256[] calldata ticketIds, uint256[] calldata amounts) external {\r\n        _redeemTickets(eventId, ticketIds, amounts);\r\n    }\r\n\r\n\r\n    function refundTicketsWithProof(\r\n        uint256 eventId, \r\n        uint256[] memory ticketIds, \r\n        address lowerBound, \r\n        address upperBound, \r\n        bytes32[] calldata merkleProof\r\n    ) external  {\r\n        _refundTicketsWithProof(eventId, ticketIds, lowerBound, upperBound, merkleProof);\r\n    }\r\n}\r\n\r\n/**\r\n    facet per event architecture. \r\n    Would need to generate a new interface object, check for collisions,\r\n    clean up when done (can't pollute 2^32 too much)\r\n */"
    },
    "contracts/facets/Events/IEventFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {LibEventFactory} from \"./LibEventFactory.sol\"; \r\n/// @title IEventFacet\r\n/// @dev Interface for the event management facet\r\ninterface IEventFactory {\r\n    /// @notice Sets the Merkle root for the specified event.\r\n    /// @dev Only callable by the owner or authorized addresses.\r\n    /// @param eventId The ID of the event to set the Merkle root for.\r\n    /// @param merkleRoot The new Merkle root.\r\n    function setMerkleRoot(uint256 eventId, bytes32 merkleRoot) external;\r\n\r\n    /// @notice Sets a new image URI for the specified event.\r\n    /// @dev Only callable by the owner or authorized addresses.\r\n    /// @param eventId The ID of the event to set the image URI for.\r\n    /// @param imageUri The new image URI as a string.\r\n    function setImageUri(uint256 eventId, string memory imageUri) external;\r\n\r\n    /// @notice Deactivates the specified event and optionally updates the Merkle root.\r\n    /// @dev Only callable by the owner or authorized addresses. Can be used to deactivate an event prematurely.\r\n    /// @param eventId The ID of the event to deactivate.\r\n    /// @param root Optionally, a new Merkle root to set. Pass bytes32(0) to not update the Merkle root.\r\n    function deactivateEvent(uint256 eventId, bytes32 root) external;\r\n\r\n    /// @notice Extends the duration of the specified event by the added time.\r\n    /// @dev Only callable by the owner or authorized addresses. The event time extension should respect any set maximum limits.\r\n    /// @param eventId The ID of the event to extend.\r\n    /// @param addedTime The additional time to add to the event's duration, in seconds.\r\n    function extendEvent(uint256 eventId, uint32 addedTime) external;\r\n\r\n    /// @notice Creates a new event\r\n    /// @dev External function that allows for the creation of a new event\r\n    /// @param _startTime The start time of the event\r\n    /// @param _endTime The end time of the event\r\n    /// @param _minEntries The minimum number of entries for the event\r\n    /// @param _maxEntries The maximum number of entries for the event\r\n    /// @param _imageUri The URI for the event's image\r\n    /// @return The ID of the created event\r\n    function createEvent(\r\n        uint32 _startTime,\r\n        uint32 _endTime,\r\n        uint256 _minEntries,\r\n        uint256 _maxEntries,\r\n        string calldata _imageUri, \r\n        uint256[] memory _ticketIds,\r\n        uint256 _maxEntriesPerUser\r\n    ) external returns (uint256);\r\n\r\n    /// @notice Allows the redemption of multiple tickets for an event\r\n    /// @dev Batch process to redeem multiple tickets at once\r\n    /// @param eventId The ID of the event\r\n    /// @param ticketIds The IDs of the tickets to be redeemed\r\n    /// @param amounts The amounts corresponding to each ticket to be redeemed\r\n    function redeemTickets(uint256 eventId, uint256[] calldata ticketIds, uint256[] calldata amounts) external;\r\n\r\n    /// @notice Allows the refund of tickets\r\n    /// @dev Batch process to refund multiple tickets at once. We refund a user\r\n          ///   if they can prove their addre\r\n    /// @param eventId The ID of the event\r\n    /// @param ticketIds The IDs of the tickets to be refunded\r\n    /// @param lowerBound Lower bound address \r\n    /// @param upperBound upper bound address \r\n    /// @param merkleProof Lower bound address \r\n\r\n    function refundTicketsWithProof(uint256 eventId, uint256[] calldata ticketIds, address lowerBound, \r\n        address upperBound, \r\n        bytes32[] calldata merkleProof) external;\r\n}\r\n"
    },
    "contracts/facets/Events/LibEventFactory.sol": {
      "content": "// LibEventStorage.sol\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../Tokens/ERC1155/interfaces/IERC1155Transfer.sol\";  \r\n\r\nlibrary LibEventFactory {\r\n    bytes32 constant STORAGE_POSITION = keccak256(\"diamond.storage.EventFactory\");\r\n\r\n    struct TicketDetail {\r\n        uint256 minAmount;\r\n        uint256 maxAmount;\r\n    }\r\n\r\n    enum EventStatus {\r\n        Pending,\r\n        Active,\r\n        Deactivated,\r\n        Completed\r\n    }\r\n\r\n    struct EventDetail {\r\n        uint32 startTime;\r\n        uint32 endTime;\r\n        uint256 minEntries;\r\n        uint256 maxEntries;\r\n        uint256 currentEntries;\r\n        string imageUri;\r\n        EventStatus status;\r\n        bytes32 merkleRoot;\r\n        mapping(uint256 => TicketDetail) ticketDetails;\r\n        mapping(address => mapping(uint256 => uint256)) ticketsRedeemed;\r\n    }\r\n\r\n    struct EventStorage {\r\n        address owner;\r\n        IERC1155Transfer tokenContract;\r\n        mapping(uint256 => EventDetail) events;\r\n    }\r\n\r\n    function eventStorage() internal pure returns (EventStorage storage es) {\r\n        bytes32 position = STORAGE_POSITION;\r\n        assembly {\r\n            es.slot := position\r\n        }\r\n    }\r\n\r\n    function getEventDetail(uint256 eventId) internal view returns (EventDetail storage) {\r\n        EventStorage storage es = eventStorage();\r\n        require(es.events[eventId].startTime != 0, \"Event does not exist\");\r\n        return es.events[eventId];\r\n    }\r\n\r\n    function getTicketDetail(uint256 eventId, uint256 ticketId) internal view returns (TicketDetail storage) {\r\n        return getEventDetail(eventId).ticketDetails[ticketId];\r\n    }\r\n\r\n    function getRedeemedTickets(uint256 eventId, address user, uint256[] memory ticketId) internal view returns (uint256[] memory) {\r\n        uint256[] memory redeemedTickets = new uint256[](ticketId.length);\r\n        for (uint256 i; i < ticketId.length; i++) {\r\n            redeemedTickets[i] = getEventDetail(eventId).ticketsRedeemed[user][ticketId[i]];\r\n        }\r\n        return redeemedTickets;\r\n    }\r\n\r\n    function getMerkleRoot(uint256 eventId) internal view returns (bytes32) {\r\n        return getEventDetail(eventId).merkleRoot;\r\n    }\r\n\r\n    function getEventTimes(uint256 eventId) internal view returns (uint32 startTime, uint32 endTime) {\r\n        EventDetail storage es = getEventDetail(eventId);\r\n        return (es.startTime, es.endTime);\r\n    }\r\n\r\n    function getEventEntries(uint256 eventId) internal view returns (uint256 minEntries, uint256 maxEntries, uint256 currentEntries) {\r\n        EventDetail storage es = getEventDetail(eventId);\r\n        return (es.minEntries, es.maxEntries, es.currentEntries);\r\n    }\r\n\r\n    function getEventImageUri(uint256 eventId) internal view returns (string memory) {\r\n        EventDetail storage es = getEventDetail(eventId);\r\n        return es.imageUri; \r\n    }\r\n\r\n    function getEventStatus(uint256 eventId) internal view returns (EventStatus) {\r\n        EventDetail storage es = getEventDetail(eventId);\r\n        return es.status;\r\n    }\r\n}\r\n"
    },
    "contracts/facets/ExchangeManage/ExchangeManage.sol": {
      "content": "pragma solidity ^0.8.28;\r\n\r\nimport { LibExchangeManage } from \"./LibExchangeManage.sol\";\r\n/**\r\n * Will remove in the future, \r\n */\r\ncontract ExchangeManage{\r\n        function addExchange( address _exchange ) external{\r\n            LibExchangeManage._addExchange( _exchange );\r\n        }\r\n        function removeExchange( address _exchange ) external{\r\n            LibExchangeManage._removeExchange( _exchange );\r\n        }\r\n        function viewExchanges() external view{\r\n            LibExchangeManage._viewExchanges( ); \r\n        }\r\n}"
    },
    "contracts/facets/ExchangeManage/LibExchangeManage.sol": {
      "content": "pragma solidity ^0.8.28;\r\n\r\nimport { LibMemberLevel } from \"../MemberLevel/LibMemberLevel.sol\";  \r\n/**\r\n    user rank history keys are designed to be unique by following the program of\r\n    using 8 bytes for the total history length ~1E19 for the highest order 8 bytes \r\n    and the lowest order 20 bytes for their address (28 byte total)\r\n\r\n    Why use a key when can just use uint96 for rank history max index?\r\n */\r\nlibrary LibExchangeManage {\r\n    bytes32 constant EXCHANGE_MANAGE_STORAGE_POSITION = keccak256(\"diamond.standard.exchangeManage.storage\");\r\n\r\n    struct ExchangeManageStorage {\r\n        address[] exchanges;\r\n    }\r\n    function memberStorage() internal pure returns (ExchangeManageStorage storage es_) {\r\n        bytes32 position = EXCHANGE_MANAGE_STORAGE_POSITION;\r\n        assembly {\r\n            es_.slot := position\r\n        }\r\n    }\r\n\r\n    function _addExchange(address _exchange) internal {\r\n        ExchangeManageStorage storage ems = memberStorage();\r\n        \r\n        ems.exchanges.push(_exchange);\r\n    }\r\n\r\n    function _viewExchanges() internal view returns (address[] memory) {\r\n        ExchangeManageStorage storage ems = memberStorage();\r\n        return ems.exchanges;\r\n    }\r\n\r\n    // Function to remove an address from the array\r\n    function _removeExchange(address _address) internal {\r\n        ExchangeManageStorage storage ems = memberStorage();\r\n        uint256 length = ems.exchanges.length;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            if (ems.exchanges[i] == _address) {\r\n                // Replace the element to be removed with the last element\r\n                if (i < length - 1) {\r\n                    ems.exchanges[i] = ems.exchanges[length - 1];\r\n                }\r\n                // Remove the last element\r\n                ems.exchanges.pop();\r\n                return; // Exit the function after removal\r\n            }\r\n        }\r\n        // If the address is not found, revert or handle accordingly\r\n        revert(\"Address not found in array\");\r\n    }\r\n}\r\n"
    },
    "contracts/facets/MemberLevel/_Members.sol": {
      "content": "pragma solidity ^0.8.9;\r\n \r\n   \r\nimport \"./LibMemberLevel.sol\";  \r\nimport \"../../libraries/utils/Incrementer.sol\"; \r\nimport \"../Moderator/LibModerator.sol\";  \r\nimport \"../Moderator/ModeratorModifiers.sol\";   \r\nimport {iOwnership} from \"../Ownership/_Ownership.sol\"; \r\nimport { LibMemberLevel} from \"./LibMemberLevel.sol\"; \r\n  \r\ncontract iMembers is iOwnership {   \r\n    event MerkleRootUpdated(bytes32 newRoot);\r\n    event MemberLevelUpdated(LibMemberLevel.Leaf leaf);\r\n    event MemberBanned(address indexed user, uint32 timestamp); \r\n      /**  \r\n     * @dev Updates the Merkle root\r\n     * @param _merkleRoot New Merkle root to be stored\r\n     */\r\n     function updateMemberMerkleRoot(bytes32 _merkleRoot) internal  {\r\n        isEcosystemOwnerVerification();\r\n        LibMemberLevel.MemberLevelStorage storage mrs = LibMemberLevel.memberLevelStorage();\r\n        mrs.merkleRoot = _merkleRoot; \r\n        emit MerkleRootUpdated(_merkleRoot);\r\n    }\r\n        /**\r\n     * @dev Verifies Merkle proof and sets user's level\r\n     * @param _leaf Level to assign to the user\r\n     * @param _merkleProof Array of hashed data to verify proof\r\n     */ \r\n    function _verifyAndSetLevel(LibMemberLevel.Leaf memory _leaf, bytes32[] calldata _merkleProof) internal {\r\n        // Create leaf from msg.sender and level\r\n        LibMemberLevel.MemberLevelStorage storage mrs = LibMemberLevel.memberLevelStorage();\r\n\r\n        bytes32 leaf = keccak256(abi.encodePacked(msg.sender, _leaf.level, _leaf.timestamp));\r\n        \r\n        require(_verifyMerkleProof(_merkleProof, mrs.merkleRoot, leaf), \"Invalid Merkle proof\");\r\n          \r\n        // Set the member level\r\n        mrs.memberLevel[msg.sender] = LibMemberLevel.MemberLevel({\r\n            level: _leaf.level,\r\n            timestamp: _leaf.timestamp\r\n        });\r\n        \r\n        emit MemberLevelUpdated(_leaf);  \r\n    }\r\n\r\n       /**\r\n     * @dev Helper function to verify Merkle proofs\r\n     */\r\n    function _verifyMerkleProof(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\r\n        bytes32 computedHash = leaf;\r\n        \r\n        for (uint256 i = 0; i < proof.length; i++) {\r\n            bytes32 proofElement = proof[i];\r\n            \r\n            if (computedHash <= proofElement) {\r\n                // Hash(current computed hash + current element of the proof)\r\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\r\n            } else {\r\n                // Hash(current element of the proof + current computed hash)\r\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\r\n            }\r\n        }\r\n        \r\n        // Check if the computed hash equals the root of the Merkle tree\r\n        return computedHash == root;\r\n    }\r\n    \r\n    /**\r\n     * @dev Batch set levels for multiple addresses (permissioned function)\r\n     * @param _leaves user resource denoting their membership status\r\n     *   \r\n     */\r\n    function _batchSetLevels( LibMemberLevel.Leaf[] calldata _leaves) internal {\r\n        isEcosystemOwnerVerification();\r\n        LibMemberLevel.MemberLevelStorage storage mrs = LibMemberLevel.memberLevelStorage();\r\n        \r\n        for (uint256 i = 0; i < _leaves.length; i++) {\r\n            LibMemberLevel.Leaf memory _leaf = _leaves[ i ]; \r\n            mrs.memberLevel[ _leaf.memberAddress ] = LibMemberLevel.MemberLevel({\r\n                level: _leaf.level,\r\n                timestamp: _leaf.timestamp\r\n            });\r\n            \r\n            emit MemberLevelUpdated(_leaf);    \r\n        }\r\n    }\r\n\r\n     /**\r\n     * @dev Returns the level info for a given address\r\n     * @param _user Address to query\r\n     * @return level and timestamp of the user\r\n     */\r\n    function _getMemberLevelStruct(address _user) internal view returns (uint32 level, uint32 timestamp) {\r\n        LibMemberLevel.MemberLevelStorage storage mrs = LibMemberLevel.memberLevelStorage();\r\n        LibMemberLevel.MemberLevel storage memberLevelStruct = mrs.memberLevel[ _user ];\r\n        return (memberLevelStruct.level, memberLevelStruct.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the level info for a given address\r\n     * @param _user Address to query \r\n     */\r\n    function _getMemberLevel(address _user) internal view returns (uint32 memberLevel_) {\r\n        LibMemberLevel.MemberLevelStorage storage mrs = LibMemberLevel.memberLevelStorage();\r\n        memberLevel_ = mrs.memberLevel[ _user ].level;  \r\n    }\r\n    \r\n\r\n    /**\r\n     * @dev Bans a user by setting their level to 0\r\n     * @param _user Address of the user to ban\r\n     */\r\n    function _banMember(address _user) internal onlyOwner {\r\n        LibMemberLevel.MemberLevelStorage storage mrs = LibMemberLevel.memberLevelStorage();\r\n        uint32 currentTimestamp = uint32(block.timestamp);\r\n        \r\n        mrs.memberLevel[_user] = LibMemberLevel.MemberLevel({\r\n            level: 0,\r\n            timestamp: currentTimestamp\r\n        });\r\n        \r\n        emit MemberBanned(_user, currentTimestamp);\r\n    }\r\n}\r\n\r\n"
    },
    "contracts/facets/MemberLevel/IMembers.sol": {
      "content": "pragma solidity ^0.8.6;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"./_Members.sol\"; \r\n\r\n/// @title Members Contract Interface\r\n/// @notice This interface provides a set of functions for managing membership ranks and bounties.\r\ninterface IMembers {\r\n \r\n /**\r\n     * @dev Verifies Merkle proof and sets user's level\r\n     * @param _leaf Level to assign to the user\r\n     * @param _merkleProof Array of hashed data to verify proof\r\n     */\r\n    function verifyAndSetLevel(LibMemberLevel.Leaf memory _leaf, bytes32[] calldata _merkleProof) external;\r\n\r\n    /**\r\n     * @dev Batch set levels for multiple addresses (permissioned function)\r\n     * @param _leaves user resource denoting their membership status\r\n     */\r\n    function batchSetLevels(LibMemberLevel.Leaf[] calldata _leaves) external;\r\n\r\n    /**\r\n     * @dev Returns the level info for a given address\r\n     * @param _user Address to query\r\n     * @return level and timestamp of the user\r\n     */\r\n    function getMemberLevelStruct(address _user) external view returns (uint32 level, uint32 timestamp);\r\n\r\n    /**\r\n     * @dev Returns the level info for a given address\r\n     * @param _user Address to query\r\n     */\r\n    function getMemberLevel(address _user) external view returns (uint32 memberLevel_);\r\n\r\n    /**\r\n     * @dev Bans a user by setting their level to 0\r\n     * @param _user Address of the user to ban\r\n     */\r\n    function banMember(address _user) external;\r\n}\r\n"
    },
    "contracts/facets/MemberLevel/LibMemberLevel.sol": {
      "content": "pragma solidity ^0.8.6;\r\n\r\nimport \"../../libraries/utils/Incrementer.sol\"; \r\n\r\n/**\r\n    user level history keys are designed to be unique by following the program of\r\n    using 8 bytes for the total history length ~1E19 for the highest order 8 bytes \r\n    and the lowest order 20 bytes for their address (28 byte total)\r\n\r\n    Why use a key when can just use uint96 for level history max index?\r\n */\r\nlibrary LibMemberLevel {\r\n    using Incrementer for bytes28;\r\n    using Incrementer for bytes8;\r\n    bytes32 constant MEMBER_STORAGE_POSITION = keccak256(\"diamond.standard.members.storage\");\r\n    struct MemberLevelStorage {\r\n        mapping( address => MemberLevel ) memberLevel; // level history \r\n        bytes32 merkleRoot;\r\n    }\r\n\r\n    struct Leaf {\r\n        address memberAddress;\r\n        uint32 level;\r\n        uint32 timestamp;\r\n    }\r\n\r\n    struct MemberLevel{\r\n        uint32 timestamp;\r\n        uint32 level;\r\n    }\r\n    \r\n    type level is uint32;\r\n\r\n    function memberLevelStorage() internal pure returns (MemberLevelStorage storage ms_) { \r\n        bytes32 position = MEMBER_STORAGE_POSITION;\r\n        assembly {\r\n            ms_.slot := position\r\n        }\r\n    }\r\n\r\n    function permissionedChangeLevel( uint32 _level, address member) internal {\r\n        MemberLevelStorage storage ms = memberLevelStorage();\r\n        ms.memberLevel[ member ] = MemberLevel( uint32( block.timestamp ), _level ); \r\n    }\r\n  \r\n \r\n}\r\n"
    },
    "contracts/facets/MemberLevel/Members.sol": {
      "content": "pragma solidity ^0.8.9;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"../Tokens/ERC1155/ERC1155Transfer.sol\";\r\nimport \"./_Members.sol\";   \r\nimport \"../../libraries/merkleVerify/MembersVerify.sol\"; \r\nimport \"./IMembers.sol\";\r\n  \r\ncontract Members is IMembers, iMembers { \r\n\r\n    /**\r\n     * @dev Verifies Merkle proof and sets user's level\r\n     * @param _leaf Level to assign to the user\r\n     * @param _merkleProof Array of hashed data to verify proof\r\n     */\r\n    function verifyAndSetLevel(LibMemberLevel.Leaf memory _leaf, bytes32[] calldata _merkleProof) external {\r\n        _verifyAndSetLevel(_leaf, _merkleProof);\r\n    }\r\n\r\n    /**\r\n     * @dev Batch set levels for multiple addresses (permissioned function)\r\n     * @param _leaves user resource denoting their membership status\r\n     */\r\n    function batchSetLevels(LibMemberLevel.Leaf[] calldata _leaves) external {\r\n        _batchSetLevels(_leaves);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns the level info for a given address\r\n     * @param _user Address to query\r\n     * @return level and timestamp of the user\r\n     */\r\n    function getMemberLevelStruct(address _user) external view returns (uint32 level, uint32 timestamp) {\r\n        return _getMemberLevelStruct(_user);\r\n    }\r\n\r\n  \r\n\r\n    /**\r\n     * @dev Returns the level info for a given address\r\n     * @param _user Address to query\r\n     */\r\n    function getMemberLevel(address _user) external view returns (uint32 memberLevel_) {\r\n        return _getMemberLevel(_user);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @dev Bans a user by setting their level to 0\r\n     * @param _user Address of the user to ban\r\n     */\r\n    function banMember(address _user) external onlyOwner {\r\n        _banMember(_user);\r\n    }\r\n\r\n\r\n \r\n\r\n\r\n}\r\n\r\n"
    },
    "contracts/facets/MemberRegistry/_MemberRegistry.sol": {
      "content": "pragma solidity ^0.8.0;\r\n\r\nimport {iOwnership} from \"../Ownership/_Ownership.sol\";\r\nimport \"./LibMemberRegistry.sol\"; \r\n \r\n\r\ncontract iMemberRegistry is iOwnership { \r\n    uint32 public constant verificationTime = 1209600; //2 weeks\r\n   \r\n    /// @dev Emitted when a recovery action is initiated or finalized\r\n    /// @param username The username associated with the action\r\n    /// @param userAddress The user's address\r\n    /// @param recoveryStatus The status of the recovery action\r\n    event RecoveryAction(string username, address userAddress, LibMemberRegistry.RecoveryStatus recoveryStatus);\r\n\r\n    /// @dev Emitted when a user is successfully registered\r\n    /// @param username The registered username\r\n    /// @param userAddress The user's address\r\n    event UserRegistered(string username, address userAddress);\r\n\r\n\r\n    event UsersRegistered(string[] username, address[] userAddress);\r\n        /**\r\n     * @dev Verifies Merkle proof and sets user's level\r\n     * @param _leaf Level to assign to the user\r\n     * @param _merkleProof Array of hashed data to verify proof\r\n     */  \r\n    function _verifyAndUsername(LibMemberRegistry.Leaf memory _leaf, bytes32[] calldata _merkleProof) internal {\r\n        // Create leaf from msg.sender and level\r\n        LibMemberRegistry.MemberRegistryStorage storage mrs = LibMemberRegistry.memberRegistryStorage(); \r\n\r\n        bytes32 leaf = keccak256(abi.encodePacked( _leaf.username, _leaf.userAddress));\r\n        \r\n        require(_verifyMerkleProof(_merkleProof, mrs.registryMerkleRoot, leaf), \"Invalid Merkle proof\");\r\n          \r\n        //set username address relation \r\n        mrs.addressToUsername[ _leaf.userAddress ] = _leaf.username; \r\n        mrs.usernameToAddress[ _leaf.username ] = _leaf.userAddress;\r\n\r\n        emit UserRegistered( _leaf.username, _leaf.userAddress);\r\n    }\r\n\r\n       /**\r\n     * @dev Helper function to verify Merkle proofs\r\n     */\r\n    function _verifyMerkleProof(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\r\n        bytes32 computedHash = leaf;\r\n        \r\n        for (uint256 i = 0; i < proof.length; i++) {\r\n            bytes32 proofElement = proof[i];\r\n            \r\n            if (computedHash <= proofElement) {\r\n                // Hash(current computed hash + current element of the proof)\r\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\r\n            } else {\r\n                // Hash(current element of the proof + current computed hash)\r\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\r\n            }\r\n        }\r\n        \r\n        // Check if the computed hash equals the root of the Merkle tree\r\n        return computedHash == root;\r\n    }\r\n \r\n\r\n    function _setUsernamePair(string memory username) internal {\r\n        _setUsernameAddressPair(username);\r\n    }\r\n\r\n    function _usernameRecovery(string memory username) internal {\r\n        LibMemberRegistry.MemberRegistryStorage storage ls = LibMemberRegistry.memberRegistryStorage(); \r\n\r\n        LibMemberRegistry.Recovery memory _userVerification = ls.usernameToRecoveryAddress[username];\r\n        if (msgSender() != _userVerification.userNewAddress) {\r\n            ls.usernameToRecoveryAddress[username] = LibMemberRegistry.Recovery(msgSender(), uint96(block.timestamp) + verificationTime);\r\n            emit RecoveryAction(username, msgSender(), LibMemberRegistry.RecoveryStatus.Initiated);\r\n        }\r\n    }\r\n\r\n    function _finalizeRecovery(string memory username) internal {\r\n        LibMemberRegistry.MemberRegistryStorage storage ls = LibMemberRegistry.memberRegistryStorage();\r\n        LibMemberRegistry.Recovery memory _userVerification = ls.usernameToRecoveryAddress[username];\r\n        if (_userVerification.recoveryTimestamp < uint96(block.timestamp) && msgSender() == _userVerification.userNewAddress) {\r\n            _setUsernameAddressPair(username);\r\n            emit RecoveryAction(username, msgSender(), LibMemberRegistry.RecoveryStatus.Finalized);\r\n        }\r\n    }\r\n\r\n    function _cancelVerify(string memory username) internal {\r\n        LibMemberRegistry.MemberRegistryStorage storage ls = LibMemberRegistry.memberRegistryStorage();\r\n        address registeredAddress = ls.usernameToAddress[username];\r\n        if (msgSender() == registeredAddress) {\r\n            ls.usernameToRecoveryAddress[username] = LibMemberRegistry.Recovery(address(0), 0);\r\n            emit RecoveryAction(username, msgSender(), LibMemberRegistry.RecoveryStatus.Cancelled);\r\n        }\r\n    } \r\n\r\n    function _setUsernameAddressPair(string memory username) internal {\r\n        LibMemberRegistry.MemberRegistryStorage storage ls = LibMemberRegistry.memberRegistryStorage();\r\n\r\n        ls.usernameToAddress[username] = msgSender();\r\n        ls.addressToUsername[msgSender()] = username; \r\n        emit UserRegistered(username, msgSender());\r\n    }\r\n\r\n    function _setUsernameOwner( string[] memory username, address[] memory userAddress ) internal {\r\n        LibMemberRegistry.MemberRegistryStorage storage ls = LibMemberRegistry.memberRegistryStorage();\r\n        uint256 length = username.length;\r\n        require(length == userAddress.length,\"Parameters must be of same length.\");\r\n\r\n        for( uint256 userIndex; userIndex < length; userIndex ++ ){\r\n            string memory _username = username[ userIndex ];\r\n            address _userAddress = userAddress[ userIndex ];\r\n \r\n            ls.usernameToAddress[ _username ] = _userAddress; \r\n            ls.addressToUsername[ _userAddress ]= _username;  \r\n        }\r\n        \r\n        emit UsersRegistered( username, userAddress);  \r\n    }\r\n    // need a case in which account is in recovery but current user wants to cancel\r\n}\r\n"
    },
    "contracts/facets/MemberRegistry/IMemberRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./LibMemberRegistry.sol\"; \r\n\r\n/// @title iMemberRegistry Interface\r\n/// @dev Responsible for validating members on a particular platform off-chain\r\n///      to a corresponding address in the ecosystem. A simple recovery mechanism\r\n///      is put in place and is expected to expand in the future. \r\ninterface IMemberRegistry {\r\n\r\n   function verifyAndUsername(LibMemberRegistry.Leaf memory _leaf, bytes32[] calldata _merkleProof) external;\r\n    function setUsernamePair(string memory username) external;\r\n    function usernameRecovery(string memory username) external;\r\n    function finalizeRecovery(string memory username) external;\r\n    function cancelVerify(string memory username) external;\r\n    function setUsernameAddressPair(string memory username) external;\r\n    function setUsernameOwner(string[] memory username, address[] memory userAddress) external;\r\n}"
    },
    "contracts/facets/MemberRegistry/LibMemberRegistry.sol": {
      "content": "pragma solidity ^0.8.6;\r\n\r\nlibrary LibMemberRegistry {\r\n    bytes32 constant MEMBER_REGISTRY_STORAGE_POSITION = keccak256(\"diamond.standard.MemberRegistry.storage\");\r\n\r\n    struct Recovery {\r\n        address userNewAddress;\r\n        uint96 recoveryTimestamp; //times after this timestamp allow for the user to\r\n        //permenantely change.\r\n    }\r\n    struct SignatureVerfication {\r\n        uint256 domain;\r\n        uint256 nonce;\r\n    }\r\n    enum RecoveryStatus {\r\n        Initiated,\r\n        Finalized,\r\n        Cancelled\r\n    }\r\n    struct Leaf {\r\n        string username;\r\n        address userAddress;\r\n    }\r\n\r\n    struct MemberRegistryStorage {\r\n        mapping(address => string) addressToUsername;\r\n        mapping(string => address) usernameToAddress;\r\n        mapping(string => Recovery) usernameToRecoveryAddress;\r\n        mapping(address => uint256) nonces;  \r\n        bytes32 registryMerkleRoot;\r\n    }    \r\n   \r\n    function memberRegistryStorage() internal pure returns (MemberRegistryStorage storage es) {\r\n        bytes32 storagePosition = MEMBER_REGISTRY_STORAGE_POSITION;\r\n        assembly {\r\n            es.slot := storagePosition \r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/facets/MemberRegistry/MemberRegistry.sol": {
      "content": "pragma solidity ^0.8.28;\r\n\r\nimport { iMemberRegistry } from \"./_MemberRegistry.sol\";\r\nimport { LibMemberRegistry } from \"./LibMemberRegistry.sol\";  \r\n\r\ncontract MemberRegistry is iMemberRegistry{\r\n    \r\n    function verifyAndUsername(LibMemberRegistry.Leaf memory _leaf, bytes32[] calldata _merkleProof) external  {\r\n        _verifyAndUsername(_leaf, _merkleProof);\r\n    } \r\n\r\n    function setUsernamePair(string memory username) external  {\r\n        _setUsernamePair(username);\r\n    }\r\n\r\n    function usernameRecovery(string memory username) external  {\r\n        _usernameRecovery(username);\r\n    }\r\n\r\n    function finalizeRecovery(string memory username) external  {\r\n        _finalizeRecovery(username);\r\n    }\r\n\r\n    function cancelVerify(string memory username) external {\r\n        _cancelVerify(username);\r\n    }\r\n\r\n    function setUsernameAddressPair(string memory username) external  {\r\n        _setUsernameAddressPair(username);\r\n    }\r\n\r\n    function setUsernameOwner(string[] memory username, address[] memory userAddress) external  {\r\n        _setUsernameOwner(username, userAddress);\r\n    }\r\n\r\n}"
    },
    "contracts/facets/Moderator/LibModerator.sol": {
      "content": "pragma solidity ^0.8.6;\r\n\r\nlibrary LibModerator{\r\n    bytes32 constant MODERATOR_STORAGE_POSITION = keccak256(\"diamond.standard.Moderator.storage\");\r\n    struct Moderator_Storage{\r\n        mapping( address => uint8 ) moderatorRank;\r\n    }\r\n\r\n    function moderatorStorage() internal pure returns (Moderator_Storage storage es){\r\n        bytes32 Moderator_STORAGE_POSITION = MODERATOR_STORAGE_POSITION;\r\n        assembly{\r\n            es.slot := Moderator_STORAGE_POSITION\r\n        }\r\n    }\r\n\r\n    function setModeratorRank(address _moderator, uint8 rank) internal {\r\n        moderatorStorage().moderatorRank[ _moderator ] = rank;\r\n    }\r\n    function getModeratorRank(address _moderator) internal view returns (uint8 rank_) {\r\n        rank_ = moderatorStorage().moderatorRank[ _moderator ];\r\n    }\r\n}"
    },
    "contracts/facets/Moderator/Moderator.sol": {
      "content": "pragma solidity ^0.8.6;\r\n\r\n/**\r\n * Moderators take on a heightened role in ecosystems and are responsible\r\n * for various priveleged duties. Moderator roles are assigned to a value\r\n * in a well ordered set, where higher ranks contain the more priveleges and\r\n * subsume lower ranks priveleges. \r\n * \r\n * Same system as member rank is used, RankLabel mapped to well ordered set.\r\n */\r\nimport \"./LibModerator.sol\";\r\ncontract Moderator {\r\n    /**\r\n     * Just create a ranked list, address associated with number.\r\n     * Moderators should only need to be referencable via current ecosystem, \r\n     * or directly called by other ecosystems. \r\n     */\r\n \r\n\r\n    //only owner\r\n    function setModeratorRanks(address[] memory _moderators, uint8[] memory _ranks) external {\r\n        require(_moderators.length == _ranks.length, \"Moderators and ranks must be same length.\");\r\n        for( uint256 i; i < _moderators.length; i++){\r\n            LibModerator.setModeratorRank( _moderators[ i ], _ranks[ i ] );\r\n        }\r\n    }\r\n\r\n    function setModeratorRank(address _moderator, uint8 _rank) public {\r\n        LibModerator.setModeratorRank(_moderator, _rank);\r\n    }\r\n    function getModeratorRank(address _moderator) external view returns(uint8 moderatorRank_){\r\n        moderatorRank_ = LibModerator.getModeratorRank( _moderator );\r\n    }\r\n    \r\n}"
    },
    "contracts/facets/Moderator/ModeratorModifiers.sol": {
      "content": "pragma solidity ^0.8.9;\r\n\r\nimport {iERC2771Recipient} from \"../ERC2771Recipient/_ERC2771Recipient.sol\";    \r\nimport \"./ModeratorRankConstants.sol\";\r\nimport \"./LibModerator.sol\"; \r\n\r\ncontract ModeratorModifiers is ModeratorRankConstants, iERC2771Recipient {\r\n    modifier moderatorMemberPermission(){\r\n        require( LibModerator.getModeratorRank( msgSender() ) \r\n                 >= MODERATOR_MEMBER_PERMISSIONED ,\"MS - Insufficient Priveleges.\");\r\n        _;\r\n    }\r\n}"
    },
    "contracts/facets/Moderator/ModeratorRankConstants.sol": {
      "content": "pragma solidity ^0.8.9;\r\n\r\ncontract ModeratorRankConstants {\r\n    uint8 constant MODERATOR_MEMBER_PERMISSIONED = 200;\r\n}"
    },
    "contracts/facets/Ownership/_Ownership.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {LibOwnership} from \"./LibOwnership.sol\";\r\nimport {iERC2771Recipient} from \"../ERC2771Recipient/_ERC2771Recipient.sol\";     \r\n\r\ncontract iOwnership is iERC2771Recipient {\r\n    error MigrationAlreadyInitiated();\r\n    error MigrationAlreadyCompleted();\r\n    error MigrationNotInitiated();\r\n\r\n    event MigrationInitiated(address initiatior, uint32 timeInitiatied);\r\n    event MigrationCancelled(address cancellor, uint32 timeCancelled);\r\n    event OwnershipChanged(address oldOwner, address newOwner); \r\n    modifier onlyOwner(){\r\n        msgSender() == _ecosystemOwner();\r\n        _;\r\n    }\r\n    function _setEcosystemOwner( address _newOwner) internal {\r\n        isEcosystemOwnerVerification();\r\n        LibOwnership._setEcosystemOwner(_newOwner);\r\n    }\r\n\r\n    function _ecosystemOwner() internal view returns (address owner_) {\r\n        owner_ = LibOwnership._ecosystemOwner();\r\n    }\r\n\r\n    function isEcosystemOwnerVerification() internal view {\r\n        require( msgSender() == _ecosystemOwner(), \"Must be the Ecosystem owner\"); \r\n    }\r\n    \r\n\r\n    //Migration related methods\r\n\r\n    /**\r\n     * @dev sole purpose is to restrict user from having access to ecosystem modularity\r\n     * until they initiate a migration. only modular changes are done via registry until\r\n     * then. \r\n     */\r\n    function isEffectiveOwner() internal view {\r\n        LibOwnership.OwnershipStorage storage os = LibOwnership.ownershipStorage();\r\n        LibOwnership.Migration storage _migration = os.migration;\r\n        if( _migration.isMigrating && isMigrationPeriodOver( _migration.initiationTimestamp ) ){\r\n            require( msgSender() == os.ecosystemOwner, \"Sender must be the owner.\");\r\n        }\r\n        else{\r\n            require(msgSender() == os.registry, \"Sender must be from the registry.\");\r\n        }\r\n    }\r\n\r\n    \r\n    /**\r\n     * @dev start the migration \r\n     */\r\n    function _initiateMigration() internal {\r\n        LibOwnership.OwnershipStorage storage os = LibOwnership.ownershipStorage();\r\n        LibOwnership.Migration storage _migration = os.migration;\r\n        if( _migration.isMigrating ){\r\n            revert MigrationAlreadyInitiated();\r\n        }\r\n        else{\r\n            _migration.isMigrating = true;\r\n            _migration.initiationTimestamp = uint32(block.timestamp);\r\n            emit MigrationInitiated(msgSender(), uint32(block.timestamp) );\r\n        } \r\n    }\r\n    function _cancelMigration() internal {\r\n        LibOwnership.OwnershipStorage storage os = LibOwnership.ownershipStorage();\r\n        LibOwnership.Migration storage _migration = os.migration;\r\n        uint32 _initiationTimestamp = _migration.initiationTimestamp;\r\n        if( _migration.isMigrating  ) {\r\n            if(isMigrationPeriodOver( _initiationTimestamp )){\r\n                revert MigrationAlreadyCompleted();\r\n            }\r\n            else{\r\n                _migration.isMigrating = false;\r\n                emit MigrationCancelled(msgSender(), uint32(block.timestamp));\r\n            }\r\n        }\r\n        else {\r\n            revert MigrationNotInitiated();\r\n        }\r\n        \r\n    }\r\n    function isMigrationPeriodOver( uint32 _initiationTimestamp ) internal view returns (bool isOver_){\r\n        isOver_ = uint32(block.timestamp) + LibOwnership.MIGRATION_TRANSITION_LOCK_TIMESPAN > _initiationTimestamp;\r\n    }\r\n}\r\n "
    },
    "contracts/facets/Ownership/IOwnership.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IOwnership {\r\n    function setEcosystemOwner(address _newOwner) external;\r\n\r\n    function ecosystemOwner() external   view returns (address owner_);\r\n\r\n    function isEcosystemOwnerVerify(address _tenativeOwner) external view;\r\n}\r\n"
    },
    "contracts/facets/Ownership/LibOwnership.sol": {
      "content": "pragma solidity ^0.8.0;\r\n\r\n\r\n\r\nlibrary LibOwnership {\r\nbytes32 constant OWNERSHIP_STORAGE_POSITION = keccak256(\"diamond.ownership.storage\");\r\nuint24 constant MIGRATION_TRANSITION_LOCK_TIMESPAN = 259200; // 3 days\r\n\r\nstruct OwnershipStorage{\r\n    address ecosystemOwner;\r\n    address registry;\r\n    Migration migration;\r\n}\r\nstruct Migration{\r\n    bool isMigrating;\r\n    uint32 initiationTimestamp;\r\n}\r\n\r\nfunction ownershipStorage() internal pure returns (OwnershipStorage storage os) {\r\n        bytes32 position = OWNERSHIP_STORAGE_POSITION;\r\n        assembly {\r\n            os.slot := position \r\n        }\r\n    }\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n        Should never be used outside of iOwnership.sol (exception for the initial diamond constructor)\r\n        @notice Sets the owner of this ecosystem\r\n        @param _newEcosystemOwner  new ecosystem owner \r\n     */\r\n    function _setEcosystemOwner(address _newEcosystemOwner) internal {\r\n        OwnershipStorage storage os = ownershipStorage();\r\n        address previousOwner = os.ecosystemOwner;\r\n        os.ecosystemOwner = _newEcosystemOwner;\r\n        emit OwnershipTransferred(previousOwner, _newEcosystemOwner);\r\n    }\r\n\r\n    function _ecosystemOwner() internal view returns (address ecosystemOwner_) {\r\n        ecosystemOwner_ = ownershipStorage().ecosystemOwner;\r\n    }\r\n\r\n    function _setRegistry(address _registry) internal {\r\n        OwnershipStorage storage os = ownershipStorage();\r\n        os.registry = _registry;\r\n    }\r\n    function _getRegistry() internal view returns (address registry_) {\r\n        OwnershipStorage storage os = ownershipStorage();\r\n        registry_ = os.registry;\r\n    }\r\n    \r\n    \r\n} "
    },
    "contracts/facets/Ownership/OwnershipFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {iOwnership} from \"./_Ownership.sol\"; \r\n\r\ncontract OwnershipFacet is iOwnership {\r\n    function setEcosystemOwner(address _newOwner) external {\r\n        _setEcosystemOwner(_newOwner);  \r\n    }\r\n\r\n    function ecosystemOwner() external   view returns (address owner_) {\r\n        owner_ = _ecosystemOwner(); \r\n    }\r\n\r\n    /**\r\n     * @notice this method is used externally to check if it's an owner as well as an ecosystem\r\n     * @param _tenativeOwner user that is being verified as owner\r\n     */\r\n    function isEcosystemOwnerVerify(address _tenativeOwner) external view {\r\n        require( _ecosystemOwner() == _tenativeOwner , \"Must be the ecosystem owner.\");\r\n    }\r\n}\r\n "
    },
    "contracts/facets/Sales/_Sales.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n \r\nimport \"../Ownership/_Ownership.sol\"; \r\nimport \"../Tokens/ERC1155/internals/iERC1155Transfer.sol\";\r\nimport \"./LibSales.sol\";\r\n\r\ncontract iSales is  iOwnership, iERC1155Transfer {\r\n    using LibSales for LibSales.Sale;\r\n\r\n    event SaleCreated(uint256 saleId);\r\n    event ItemPurchased(uint256 saleId, address buyer, uint256 numBundles);\r\n\r\n    function _createTieredSales(LibSales.Sale[] calldata salesData) internal {\r\n        LibSales.SalesStorage storage ss = LibSales.salesStorage();\r\n        for (uint256 i = 0; i < salesData.length; i++) {\r\n            uint256 predecessorSaleId = (i == 0) ? 0 : ss.salesCounter;\r\n            _createSale(ss.salesCounter + 1, salesData[i], predecessorSaleId);\r\n            ss.salesCounter++;\r\n        }\r\n    }\r\n\r\n    function _viewSale(uint256 saleId) internal view returns (LibSales.Sale[] memory) {\r\n        return _retrieveSaleAndPredecessors(saleId);\r\n    }\r\n\r\n    function _buyItems(uint256 saleId, uint256 numBundles) internal {\r\n        _validatePurchase(saleId, numBundles);\r\n\r\n        LibSales.Sale memory sale = LibSales.getSale(saleId);\r\n        uint256 totalPrice = sale.paymentAmount * numBundles;\r\n\r\n        _safeTransferFrom(msg.sender, _ecosystemOwner(), sale.paymentTokenId, totalPrice, \"\");\r\n\r\n        for (uint i = 0; i < sale.itemIds.length; i++) {\r\n            uint256 itemId = sale.itemIds[i];\r\n            uint256 itemAmount = sale.itemAmounts[i] * numBundles;\r\n            _safeTransferFrom( _ecosystemOwner(), msg.sender, itemId, itemAmount, \"\");\r\n        }\r\n\r\n        LibSales.setSaleStats(saleId, msg.sender, numBundles);\r\n\r\n        emit ItemPurchased(saleId, msg.sender, numBundles);\r\n    } \r\n\r\n    function _createSale(uint256 saleId, LibSales.Sale memory saleData, uint256 predecessorSaleId) internal {\r\n        require(saleData.itemIds.length == saleData.itemAmounts.length, \"Mismatched item data\");\r\n        require(saleData.endTime > saleData.startTime, \"Invalid time range\");\r\n        \r\n        saleData.predecessorSaleId = predecessorSaleId;\r\n\r\n        LibSales.setSale(saleId, saleData);\r\n\r\n        emit SaleCreated(saleId);\r\n    }\r\n\r\n    function _retrieveSaleAndPredecessors(uint256 saleId) internal view returns (LibSales.Sale[] memory salesList) {\r\n        LibSales.Sale memory sale = LibSales.getSale(saleId);\r\n\r\n        require(sale.endTime > 0, \"Nonexistent sale\");\r\n\r\n        uint256 maxPredecessors = 100;\r\n        salesList = new LibSales.Sale[](maxPredecessors);\r\n        uint256 count = 0;\r\n\r\n        while (saleId != 0 && count < maxPredecessors) {\r\n            salesList[count] = sale;\r\n            saleId = sale.predecessorSaleId;\r\n            sale = LibSales.getSale(saleId);\r\n            count++;\r\n        }\r\n\r\n        // Resize array to match the actual count\r\n        LibSales.Sale[] memory trimmedSalesList = new LibSales.Sale[](count);\r\n        for (uint256 i = 0; i < count; i++) {\r\n            trimmedSalesList[i] = salesList[i];\r\n        }\r\n\r\n        return trimmedSalesList;\r\n    }\r\n\r\n    function _validatePurchase(uint256 saleId, uint256 numBundles) internal view {\r\n        LibSales.Sale memory sale = LibSales.getSale(saleId);\r\n        uint256 userSaleStats = LibSales.getSaleStats(saleId, msg.sender);\r\n\r\n        require(block.timestamp >= sale.startTime && block.timestamp <= sale.endTime, \"Sale not active\");\r\n        require(LibSales.salesStorage().memberRank[msg.sender] >= sale.rankRequired, \"Insufficient rank\");\r\n        require(userSaleStats + numBundles <= sale.limit, \"Purchase limit exceeded\");\r\n\r\n        if (sale.predecessorSaleId != 0) {\r\n            require(LibSales.getSaleStats(sale.predecessorSaleId, msg.sender) > 0, \"Must purchase from predecessor sale first\");\r\n        }\r\n    }\r\n\r\n    // ... other functions\r\n}\r\n"
    },
    "contracts/facets/Sales/LibSales.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nlibrary LibSales {\r\n    bytes32 constant STORAGE_SALES = keccak256(\"diamond.storage.sales\");\r\n\r\n    struct Sale {\r\n        uint32 startTime;\r\n        uint32 endTime;\r\n        uint256 rankRequired;\r\n        uint256 limit;\r\n        uint256 predecessorSaleId;\r\n        uint256[] itemIds;\r\n        uint256[] itemAmounts;\r\n        uint256 paymentTokenId;\r\n        uint256 paymentAmount;\r\n        bool isEther;\r\n    }\r\n\r\n    struct SalesStorage {\r\n        uint256 salesCounter;\r\n        mapping(address => uint256) memberRank;\r\n        mapping(uint256 => Sale) sales;\r\n        mapping(uint256 => mapping(address => uint256)) saleStats;\r\n    }\r\n\r\n    function salesStorage() internal pure returns (SalesStorage storage ss) {\r\n        bytes32 salesKey = STORAGE_SALES;\r\n        assembly {\r\n            ss.slot := salesKey\r\n        }\r\n    }\r\n\r\n    function setSale(uint256 saleId, Sale memory saleData) internal {\r\n        SalesStorage storage ss = salesStorage();\r\n        ss.sales[saleId] = saleData;\r\n    }\r\n\r\n    function getSale(uint256 saleId) internal view returns (Sale memory) {\r\n        SalesStorage storage ss = salesStorage();\r\n        return ss.sales[saleId];\r\n    }\r\n\r\n    function setSaleStats(uint256 saleId, address buyer, uint256 numBundles) internal {\r\n        SalesStorage storage ss = salesStorage();\r\n        ss.saleStats[saleId][buyer] += numBundles;\r\n    }\r\n\r\n    function getSaleStats(uint256 saleId, address buyer) internal view returns (uint256) {\r\n        SalesStorage storage ss = salesStorage();\r\n        return ss.saleStats[saleId][buyer];\r\n    }\r\n}"
    },
    "contracts/facets/Sales/Sales.sol": {
      "content": "pragma solidity ^0.8.0;\r\n\r\nimport {LibSales} from \"./LibSales.sol\"; \r\nimport {iSales} from \"./_Sales.sol\"; \r\n\r\ncontract Sales is iSales {\r\n    \r\n    function createSale(uint256 saleId, LibSales.Sale memory saleData, uint256 predecessorSaleId) external{\r\n        _createSale(saleId, saleData, predecessorSaleId);\r\n    }\r\n    function retrieveSaleAndPredecessors(uint256 saleId) external view returns (LibSales.Sale[] memory){\r\n        return _retrieveSaleAndPredecessors(saleId);\r\n    }\r\n    function validatePurchase(uint256 saleId, uint256 numBundles) external view{\r\n        _validatePurchase(saleId, numBundles);\r\n    }\r\n    \r\n}   "
    },
    "contracts/facets/Stake/IStake.sol": {
      "content": "pragma solidity ^0.8.9;\r\n\r\ninterface IStake{\r\n\r\n    enum StakeTier {Continious, SevenDay, FourteenDay, TwentyEightDay} \r\n    struct RewardRate{\r\n        uint16 initialRate;\r\n        uint16 rateIncrease;\r\n        uint16 rateIncreaseStopDuration;\r\n    }\r\n\r\n    struct StakePosition{\r\n        address user;\r\n        uint256 amount;\r\n        StakeTier tier;\r\n        uint32 startTime;\r\n    }\r\n    \r\n    function fundStakeAccount(uint256 amount) external;\r\n    function stake( uint256 amount, StakeTier tier, uint256 stakeId) external;\r\n    function stakeContract( address user, uint256 amount, StakeTier tier, uint256 stakeId) external;\r\n    function stakeVirtual(address staker, uint256 amount, StakeTier tier, uint256 stakeId) external;\r\n    function batchStake( address[] memory user, uint256[] memory amount, StakeTier[] memory tier, uint256[] memory stakeIds) external;\r\n    function setRewardRates(StakeTier[] memory _stakeTier, RewardRate[] memory _rewardRate) external;\r\n    function unstake( uint256 amount, uint256 stakeId) external;\r\n    function unstakeContract(address user, uint256 amount, uint256 stakeId) external returns(uint256);\r\n    function unstakeVirtual(address staker, uint256 amount, uint256 stakeId) external;\r\n    function getGasStakeFee() external returns ( uint24, uint24 );\r\n    \r\n}"
    },
    "contracts/facets/Stake/Stake.sol": {
      "content": "pragma solidity ^0.8.9;\r\n\r\n/**\r\n    Enable permitted contracts to allow staking/unstaking, done implicitly through erc20\r\n    transfers function\r\n    Have several tiers \r\n    Create a seperate stake address \r\n */\r\n \r\nimport {iERC1155Transfer} from \"../Tokens/ERC1155/ERC1155Transfer.sol\";  \r\nimport {LibERC20} from \"../Tokens/ERC20/libraries/LibERC20.sol\";  \r\nimport {iOwnership} from \"../Ownership/_Ownership.sol\";\r\nimport {iMembers} from \"../MemberLevel/_Members.sol\"; \r\n\r\ncontract Stake is iERC1155Transfer, iOwnership, iMembers{  \r\n    enum StakeTier {Continious, SevenDay, FourteenDay, TwentyEightDay} \r\n    uint8 constant NUM_STAKE_TIERS = 4;\r\n    struct RewardRate{\r\n        uint16 initialRate;\r\n        uint16 rateIncrease;\r\n        uint16 rateIncreaseStopDuration;\r\n    }\r\n\r\n    address constant STAKE_FUNDING_ADDRESS = 0x2D08BDf3c61834F76Decaf6E85ffAecFeF02E605; //address(this), massDX, and whoever else the owner decides has permissions\r\n    address constant STAKE_DEPOSIT_ADDRESS = 0x2D08BDf3c61834F76Decaf6E85ffAecFeF02E605; //address(this), massDX, and whoever else the owner decides has permissions\r\n\r\n    uint24 constant GAS_STAKE_FEE_SCALE = 1000000;\r\n    uint24 constant GAS_STAKE_FEE = 16000000;\r\n\r\n    struct StakePosition{\r\n        address holder; // if non-zero, implies an app is implicitly staking for a user and holds their currency in turn\r\n        StakeTier tier;\r\n        uint32 startTime;\r\n        bool isVirtual;\r\n        uint256 amount;\r\n    }\r\n    //address, then stakeId\r\n    mapping( address => mapping(uint256 => StakePosition) ) stakePosition;\r\n    mapping( StakeTier => RewardRate) rewardRate;\r\n    mapping( address => bool) approvedContracts;\r\n    event StakeRewardAccountFunded(address funder, uint256 amount);\r\n    event RewardsRetrieved(address user, uint256 amount, uint256 reward, uint256 stakeId);\r\n    event RewardRatesChanged(RewardRate[] _rewardRates);\r\n    \r\n    function stakeContract(address staker, uint256 amount, StakeTier tier, uint256 stakeId) public{\r\n        //require approved contract\r\n        //transfer funds from staker to stake deposit\r\n        _safeTransferFrom(staker, STAKE_DEPOSIT_ADDRESS, LibERC20.PRIMARY_CURRENCY_ID, amount, \"\");\r\n\r\n        //stake\r\n        StakePosition storage _stakePosition = stakePosition[ msgSender() ][ stakeId ];\r\n        require(_stakePosition.startTime == 0 ,\"StakeId already exists, please create a unique stakeId\");\r\n\r\n        stakePosition[ staker ][ stakeId ] = StakePosition( msgSender(), tier, uint32(block.timestamp), false, amount );\r\n    }\r\n\r\n    function stake(uint256 amount, StakeTier tier, uint256 stakeId) public{\r\n        stakeContract(msgSender(), amount, tier, stakeId); \r\n    }\r\n\r\n    /**\r\n     * Swap orders having this ecosystem token as their output can stake the expected \r\n     * outputted tokens and retrieve rewards IF their order is fulfilled. \r\n     */\r\n    function stakeVirtual(address staker, uint256 amount, StakeTier tier, uint256 stakeId) external {\r\n        //stake\r\n        StakePosition storage _stakePosition = stakePosition[ msgSender() ][ stakeId ];\r\n        require(_stakePosition.startTime == 0 ,\"StakeId already exists, please create a unique stakeId\");\r\n\r\n        stakePosition[ staker ][ stakeId ] = StakePosition( msgSender(), tier, uint32(block.timestamp), true, amount );\r\n\r\n    }\r\n\r\n    //batch staking is immune to same block/transaction limitation for a given user\r\n    function batchStake( address[] memory user, uint256[] memory amount, StakeTier[] memory tier, uint256[] memory stakeIds) external{\r\n        for( uint256 stakeIndex; stakeIndex < user.length - 1; stakeIndex++){\r\n            stake( amount[stakeIndex], tier[stakeIndex], stakeIds[stakeIndex]);\r\n        }\r\n    }\r\n\r\n    function setRewardRates(StakeTier[] memory _stakeTier, RewardRate[] memory _rewardRate) external {\r\n        isEcosystemOwnerVerification();\r\n        require(_stakeTier.length == _rewardRate.length, \"Input parameters must have same length\");\r\n        for(uint8 rewardRateIndex; rewardRateIndex < _rewardRate.length - 1; rewardRateIndex ++){\r\n            require( type(uint16).max >= _rewardRate[ rewardRateIndex ].rateIncreaseStopDuration , \"RateIncreaseStopDuration must be a uint16 type.\");\r\n            rewardRate[ _stakeTier[ rewardRateIndex ] ] = _rewardRate[ rewardRateIndex ];\r\n        }\r\n        emit RewardRatesChanged(_rewardRate);\r\n    }\r\n\r\n    function unstakeContract( address staker, uint256 amount, uint256 stakeId) public returns (uint256) {\r\n        StakePosition storage _stakePosition = stakePosition[ staker ][ stakeId ];\r\n        address _holder = _stakePosition.holder;\r\n\r\n        \r\n        uint32 elapsedTime = uint32( block.timestamp ) - _stakePosition.startTime;\r\n        require(elapsedTime >= stakeTierDurations(_stakePosition.tier),\"Can't unstake rewards until the mininmum duration has passed.\");\r\n        \r\n        //update stake amount\r\n        _stakePosition.amount -= amount;\r\n      \r\n\r\n        //calculate rewards\r\n        uint256 reward = calculateReward(amount, _stakePosition.tier, _stakePosition.startTime);\r\n        uint256 totalTransferAmount = reward + amount;\r\n        //send reward to user from STAKE_ACCOUNT\r\n        _safeTransferFrom( STAKE_FUNDING_ADDRESS, staker, LibERC20.PRIMARY_CURRENCY_ID, reward, \"\"); \r\n        //send amount to holding contract\r\n        _safeTransferFrom( STAKE_DEPOSIT_ADDRESS, _holder, LibERC20.PRIMARY_CURRENCY_ID, amount, \"\"); \r\n\r\n        emit RewardsRetrieved( staker, amount, reward, stakeId);\r\n        \r\n        return totalTransferAmount;\r\n    }\r\n    \r\n    function unstake( uint256 amount, uint256 stakeId) external {\r\n        unstakeContract( msgSender(), amount, stakeId);\r\n    }\r\n\r\n    /**\r\n     * @notice Trusted contracts can stake users placing swap orders into this\r\n     * ecosystem's token.\r\n     * @param staker reward transfer address\r\n     * @param amount amount to be virtually unstaked\r\n     * @param stakeId unique staking id\r\n     */\r\n    function unstakeVirtual( address staker, uint256 amount, uint256 stakeId) external {\r\n        //require trusted contract\r\n\r\n        StakePosition storage _stakePosition = stakePosition[ staker ][ stakeId ];\r\n\r\n        _stakePosition.amount -= amount; \r\n        \r\n        uint32 elapsedTime = uint32( block.timestamp ) - _stakePosition.startTime;\r\n        require(elapsedTime >= stakeTierDurations(_stakePosition.tier),\"Can't unstake rewards until the mininmum duration has passed.\");\r\n      \r\n        //calculate rewards\r\n        uint256 reward = calculateReward(amount, _stakePosition.tier, _stakePosition.startTime);\r\n\r\n        //send reward to user from STAKE_ACCOUNT\r\n        _safeTransferFrom( STAKE_FUNDING_ADDRESS, staker, LibERC20.PRIMARY_CURRENCY_ID, reward, \"\"); \r\n\r\n        emit RewardsRetrieved( staker, amount, reward, stakeId);\r\n    }\r\n    /**\r\n        Retrieves current reward amount from a given stake position. \r\n        To retrieve the reward, you must unstake after the minimum stake duration. \r\n     */\r\n    function viewReward(uint256 stakeId) external view returns (uint256 reward_){\r\n        StakePosition storage _stakePosition = stakePosition[ msgSender() ][ stakeId ];\r\n        uint256 _amount = _stakePosition.amount;\r\n        StakeTier _stakeTier = _stakePosition.tier;\r\n        uint32 _startTime = _stakePosition.startTime;\r\n        reward_ = calculateReward(_amount, _stakeTier, _startTime);\r\n    }\r\n\r\n    /**\r\n        Retrieves the remaining time left until the minimum stake duration is completed, zero if already completed. \r\n     */\r\n    function viewMinimumStakeDurationLeft(uint256 stakeId) external view returns (uint32 timeLeft_) {\r\n        StakePosition storage _stakePosition = stakePosition[ msgSender() ][ stakeId ];\r\n        uint32 _startTime = _stakePosition.startTime;\r\n        uint32 _minimumDuration = stakeTierDurations( _stakePosition.tier );\r\n        if(block.timestamp > _startTime + _minimumDuration ){\r\n            timeLeft_ = uint32(block.timestamp) - _startTime;\r\n        }\r\n        else{\r\n            timeLeft_ = 0;            \r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n        Rewards are calculated via a two part function, one function having the domain of 0 to rateIncreaseStopDuration,\r\n        the other from rateIncreaseStopDuration to infinity. \r\n\r\n        The first part is simply a linear increase in reward rate as a function of time with some intial reward rate, r(t). \r\n        The second is a flat reward rate which has the value r( rateIncreaseStopDuration );\r\n     */\r\n    function calculateReward(uint256 _amount, StakeTier _tier, uint32 _startTime ) internal view  returns (uint256 reward_) { \r\n        uint32 elapsedTime = uint32( block.timestamp ) - _startTime;\r\n        if(_tier == StakeTier.Continious){\r\n            reward_ = tierSpecificReward(_amount, elapsedTime, rewardRate[StakeTier.Continious]);      \r\n        }\r\n        else if(_tier == StakeTier.SevenDay){\r\n            reward_ = tierSpecificReward(_amount, elapsedTime, rewardRate[StakeTier.SevenDay]);      \r\n        } \r\n        else if(_tier == StakeTier.FourteenDay){\r\n            reward_ = tierSpecificReward(_amount, elapsedTime, rewardRate[StakeTier.FourteenDay]);      \r\n        }\r\n        else if(_tier == StakeTier.TwentyEightDay){\r\n            reward_ = tierSpecificReward(_amount, elapsedTime, rewardRate[StakeTier.TwentyEightDay]);      \r\n        }\r\n    }\r\n\r\n    function tierSpecificReward(uint256 _amount, uint32 elapsedTime, RewardRate memory _rewardRate) private pure  returns (uint256 reward_){\r\n        if( elapsedTime >= _rewardRate.rateIncreaseStopDuration ){\r\n            reward_ += firstIntervalRewards(_amount, _rewardRate, _rewardRate.rateIncreaseStopDuration);\r\n            uint32 remainingTime = elapsedTime - _rewardRate.rateIncreaseStopDuration;\r\n            reward_ += remainingTime * rateFunction(_rewardRate.initialRate, _rewardRate.rateIncrease, _rewardRate.rateIncreaseStopDuration);\r\n        }\r\n        else{\r\n            reward_ += firstIntervalRewards(_amount, _rewardRate, elapsedTime);\r\n        }\r\n    }\r\n    function rateFunction(uint16 initialRate, uint16 rateIncrease, uint16 time) private pure returns (uint16 rate_){\r\n        rate_ = initialRate + rateIncrease * time; \r\n    }\r\n\r\n    //evaluates the integral of the first part of the reward function at zero and _maxTime\r\n    function firstIntervalRewards(uint256 _amount, RewardRate memory _rewardRate, uint32 _maxTime) private pure returns (uint256 reward_){\r\n        reward_ = ( _rewardRate.rateIncrease * _maxTime ** 2 ) / 2 + _rewardRate.initialRate * _maxTime;\r\n    }\r\n\r\n    function stakeTierDurations(StakeTier _stakeTier ) private pure returns (uint32 duration_ ){\r\n        if(_stakeTier == StakeTier.SevenDay){\r\n            duration_ = 604800; // 7 days \r\n        }\r\n        else if(_stakeTier == StakeTier.FourteenDay){\r\n            duration_ =  1209600;\r\n        }\r\n        else if(_stakeTier == StakeTier.TwentyEightDay){\r\n            duration_ =  2419200;\r\n        }\r\n        else if (_stakeTier == StakeTier.Continious){\r\n            duration_ = 0;\r\n        }\r\n    }\r\n\r\n    //********************************************************************** */\r\n\r\n\r\n    function fundStakeAccount(uint256 amount) external {\r\n        _safeTransferFrom(msgSender(), STAKE_FUNDING_ADDRESS, LibERC20.PRIMARY_CURRENCY_ID, amount, \"\" );\r\n        emit StakeRewardAccountFunded(msgSender(),amount);\r\n    }\r\n\r\n    /**\r\n     * Multiply the target eth by feeScale_. \r\n     * \r\n     */\r\n    function getGasStakeFee() external view returns( uint24 feeScale_, uint24 fee_){\r\n        fee_ = GAS_STAKE_FEE;\r\n        feeScale_ = GAS_STAKE_FEE_SCALE;\r\n    }\r\n}\r\n/**\r\n * \r\n * Change two things.\r\n * 1. Implicit staking via swaps is done virtually, meaning a swap order who's output swap is intended for a target ecosystem\r\n *    will be staked there IF partial or more of the swap is fulfilled. \r\n * 2. Volume rewarded eth swapping to ecosystem token. Ecosystem can set a fee. \r\n *\r\n */"
    },
    "contracts/facets/TicketCreator/TicketCreate.sol": {
      "content": "pragma solidity ^0.8.9;\r\n\r\nimport {LibERC1155TransferConstraints} from \"../Tokens/ERC1155/libraries/LibERC1155TransferConstraints.sol\";\r\nimport { iERC1155 } from \"../Tokens/ERC1155/internals/iERC1155.sol\";\r\nimport { iTransferSetConstraints} from \"../Tokens/ERC1155/internals/iTransferSetConstraints.sol\";\r\nimport {iOwnership} from \"../Ownership/_Ownership.sol\";\r\ncontract TicketCreate is iTransferSetConstraints,  iERC1155 {\r\n\r\n    struct TicketMeta{\r\n        string title;\r\n        string description; \r\n        string imageHash;\r\n    } \r\n\r\n    event TicketsCreated(uint256, uint256, TicketMeta);\r\n    /**\r\n        Owner verification at ticketCreate\r\n     */\r\n    function ticketCreateBatch(uint256[] memory _amount, TicketMeta[] memory _ticketMeta, LibERC1155TransferConstraints.Constraints[] memory  _constraints) external {\r\n        //check equal lengths\r\n        for( uint256 _constraintIndex; _constraintIndex < _constraints.length; _constraintIndex++){\r\n            ticketCreate( _amount[_constraintIndex],  _ticketMeta[ _constraintIndex ], _constraints[ _constraintIndex ] );\r\n        }\r\n    }\r\n \r\n    //The order of the Constraint struct matches the order of the if statements\r\n    //and correspond to the constraint bitmap in ascending order. \r\n    function ticketCreate(uint256 _amount, TicketMeta memory _ticketMeta, LibERC1155TransferConstraints.Constraints memory _constraints) public {\r\n        isEcosystemOwnerVerification(); \r\n        \r\n        uint256 ticketId = ticketConstraintHandler(_constraints);\r\n\r\n        _mint(msgSender(), ticketId, _amount, \"\");\r\n\r\n        emit TicketsCreated(ticketId, _amount, _ticketMeta);\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n    So we need to create ids for each ticket. These ids must be in the appropriate range. This range is determined by the ticket type\r\n    which is defined by iTicketConstraints\r\n */"
    },
    "contracts/facets/TieredPermission/TieredPermission.sol": {
      "content": "pragma solidity ^0.8.28;\r\n\r\n/**\r\n * @title \r\n * @author \r\n * @notice Tier permissions for various functionality on the ecosystem, enabling the \r\n * ecosystem owner to have an easier time with management.  \r\n */\r\ncontract TieredPermission{\r\n    enum PermissionType{ TicketCreator, TokenCreator, EventCreator, SaleCreator, EventDeployer, TicketDeployer, TokenDeployer,\r\n    ModeratorManager, MembershipLevelManager }\r\n\r\n    \r\n}"
    },
    "contracts/facets/Tokens/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./interfaces/IERC1155.sol\";\r\nimport \"./interfaces/IERC1155Receiver.sol\";\r\nimport \"./interfaces/IERC1155MetadataURI.sol\";\r\nimport \"./internals/iERC1155.sol\";\r\nimport \"../../../libraries/utils/Address.sol\";\r\nimport \"../../../libraries/utils/Context.sol\"; \r\nimport \"./libraries/LibERC1155.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\n/**\r\n * @dev Implementation of the basic standard multi-token.\r\n * See https://eips.ethereum.org/EIPS/eip-1155\r\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\r\n *\r\n * _Available since v3.1._\r\n */\r\ncontract ERC1155Ecosystem is  iERC1155, IERC1155, IERC1155MetadataURI {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n    \r\n    event URIChanged( string uri );\r\n    \r\n    /**\r\n     * @dev See {IERC1155MetadataURI-uri}.\r\n     *\r\n     * This implementation returns the same URI for *all* token types. It relies\r\n     * on the token type ID substitution mechanism\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\r\n     *\r\n     * Clients calling this function must replace the `\\{id\\}` substring with the\r\n     * actual token type ID.\r\n     */\r\n    function uri(uint256 tokenId) public view override returns (string memory) {\r\n        LibERC1155.ERC1155Storage storage es = LibERC1155.erc1155Storage();\r\n\r\n        // Convert tokenId to string\r\n        string memory tokenIdStr = tokenId.toString();\r\n\r\n        // Concatenate base URI, tokenId, and .json suffix\r\n        return string(abi.encodePacked(es.uri, tokenIdStr, \".json\"));\r\n    }\r\n\r\n     function setUri(string memory _uri) public  {\r\n        LibERC1155.ERC1155Storage storage es = LibERC1155.erc1155Storage();\r\n        es.uri = _uri;\r\n        emit URIChanged( _uri );\r\n    }\r\n\r\n\r\n    function mint(address to, uint256 id, uint256 amount, bytes memory data) external override {\r\n        _mint(to, id, amount, data);\r\n    }\r\n\r\n    function mintBatch(\r\n            address to,\r\n            uint256[] memory ids,\r\n            uint256[] memory amounts,\r\n            bytes memory data\r\n        ) external override {\r\n        _mintBatch( to, ids, amounts, data);\r\n        }\r\n\r\n    function burn(address from, uint256 id, uint256 amount) external override {\r\n        _burn( from, id, amount); \r\n    }\r\n    function burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) external override {\r\n        _burnBatch(from, ids, amounts);\r\n    }\r\n    /**\r\n     * @dev See {IERC1155-balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) public view  override  returns (uint256) {\r\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\r\n        LibERC1155.ERC1155Storage storage es = LibERC1155.erc1155Storage();        \r\n        return es.balance[id][account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-balanceOfBatch}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(\r\n        address[] memory accounts,\r\n        uint256[] memory ids\r\n    ) public view  override returns (uint256[] memory) {\r\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\r\n\r\n        uint256[] memory batchBalances = new uint256[](accounts.length);\r\n\r\n        for (uint256 i = 0; i < accounts.length; ++i) {\r\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\r\n        }\r\n\r\n        return batchBalances;\r\n    }\r\n}\r\n"
    },
    "contracts/facets/Tokens/ERC1155/ERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./internals/iERC1155Receiver.sol\";\r\nimport \"./interfaces/IERC1155Receiver.sol\";\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\ncontract ERC1155ReceiverEcosystem is  IERC1155Receiver,iERC1155Receiver  {\r\n\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external pure returns (bytes4){\r\n        return _onERC1155Received();\r\n    }\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external pure returns (bytes4){\r\n        return _onERC1155BatchReceived();\r\n    }\r\n}\r\n"
    },
    "contracts/facets/Tokens/ERC1155/ERC1155Transfer.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./interfaces/IERC1155.sol\";\r\nimport \"./interfaces/IERC1155Receiver.sol\";\r\nimport \"./interfaces/IERC1155MetadataURI.sol\";\r\nimport \"./interfaces/IERC1155Transfer.sol\";\r\nimport \"./internals/iERC1155.sol\";\r\nimport \"../../../libraries//utils/Address.sol\";\r\nimport \"../../../libraries/utils/Context.sol\";\r\nimport \"./libraries/LibERC1155.sol\";\r\nimport \"./internals/iERC1155Transfer.sol\";\r\n/**\r\n * @dev Implementation of the basic standard multi-token.\r\n * See https://eips.ethereum.org/EIPS/eip-1155\r\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\r\n *\r\n * _Available since v3.1._\r\n */\r\ncontract ERC1155Transfer is    iERC1155Transfer {\r\n    using Address for address;\r\n    /**\r\n     * @dev See {IERC1155-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to, \r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) public   {\r\n        require(\r\n            from == msgSender() || isApprovedForAll(from, msgSender()),\r\n            \"ERC1155: caller is not token owner or approved\"\r\n        );\r\n        _safeTransferFrom(from, to, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-safeBatchTransferFrom}.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) public  {\r\n        require(\r\n            from == msgSender() || isApprovedForAll(from, msgSender()),\r\n            \"ERC1155: caller is not token owner or approved\"\r\n        );\r\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public  {\r\n        _setApprovalForAll(msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) public view  returns (bool) {\r\n        LibERC1155.ERC1155Storage storage es = LibERC1155.erc1155Storage();\r\n\r\n        return es.operatorApprovals[account][operator];\r\n    }\r\n    \r\n}\r\n"
    },
    "contracts/facets/Tokens/ERC1155/interfaces/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 {\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev See {IERC1155MetadataURI-uri}.\r\n     *\r\n     * This implementation returns the same URI for *all* token types. It relies\r\n     * on the token type ID substitution mechanism\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\r\n     *\r\n     * Clients calling this function must replace the `\\{id\\}` substring with the\r\n     * actual token type ID.\r\n     */\r\n    function mint(address to, uint256 id, uint256 amount, bytes memory data) external;\r\n\r\n    function mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) external;\r\n\r\n    function burn(address from, uint256 id, uint256 amount) external;\r\n\r\n    function burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) external;\r\n}\r\n"
    },
    "contracts/facets/Tokens/ERC1155/interfaces/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\r\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155MetadataURI  {\r\n    /**\r\n     * @dev Returns the URI for token type `id`.\r\n     *\r\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\r\n     * clients with the actual token type ID.\r\n     */\r\n    function uri(uint256 id) external view returns (string memory);\r\n}"
    },
    "contracts/facets/Tokens/ERC1155/interfaces/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\ninterface IERC1155Receiver  {\r\n    /**\r\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\r\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\r\n     *\r\n     * NOTE: To accept the transfer, this must return\r\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n     * (i.e. 0xf23a6e61, or its own function selector).\r\n     *\r\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\r\n     * @param from The address which previously owned the token\r\n     * @param id The ID of the token being transferred\r\n     * @param value The amount of tokens being transferred\r\n     * @param data Additional data with no specified format\r\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n     */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n\r\n    /**\r\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\r\n     * been updated.\r\n     *\r\n     * NOTE: To accept the transfer(s), this must return\r\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n     * (i.e. 0xbc197c81, or its own function selector).\r\n     *\r\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n     * @param from The address which previously owned the token\r\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n     * @param data Additional data with no specified format\r\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n     */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n"
    },
    "contracts/facets/Tokens/ERC1155/interfaces/IERC1155TokenReceiver.sol": {
      "content": "pragma solidity ^0.8.6;\r\n\r\n/**\r\n    Note: The ERC-165 identifier for this interface is 0x4e2312e0.\r\n*/\r\ninterface ERC1155TokenReceiver {\r\n    /**\r\n        @notice Handle the receipt of a single ERC1155 token type.\r\n        @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.\r\n        This function MUST return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61) if it accepts the transfer.\r\n        This function MUST revert if it rejects the transfer.\r\n        Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\r\n        @param _operator  The address which initiated the transfer (i.e. msg.sender)\r\n        @param _from      The address which previously owned the token\r\n        @param _id        The ID of the token being transferred\r\n        @param _value     The amount of tokens being transferred\r\n        @param _data      Additional data with no specified format\r\n        @return           `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n    */\r\n    function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _value, bytes calldata _data) external returns(bytes4);\r\n\r\n    /**\r\n        @notice Handle the receipt of multiple ERC1155 token types.\r\n        @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated.\r\n        This function MUST return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81) if it accepts the transfer(s).\r\n        This function MUST revert if it rejects the transfer(s).\r\n        Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\r\n        @param _operator  The address which initiated the batch transfer (i.e. msg.sender)\r\n        @param _from      The address which previously owned the token\r\n        @param _ids       An array containing ids of each token being transferred (order and length must match _values array)\r\n        @param _values    An array containing amounts of each token being transferred (order and length must match _ids array)\r\n        @param _data      Additional data with no specified format\r\n        @return           `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n    */\r\n    function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external returns(bytes4);\r\n}"
    },
    "contracts/facets/Tokens/ERC1155/interfaces/IERC1155Transfer.sol": {
      "content": "pragma solidity ^0.8.0;\r\n\r\n\r\ninterface IERC1155Transfer{\r\n\r\n\r\n /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\r\n    \r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata amounts,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n      /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n}"
    },
    "contracts/facets/Tokens/ERC1155/internals/iERC1155.sol": {
      "content": "pragma solidity ^0.8.0;\r\n\r\nimport \"../libraries/LibERC1155.sol\";\r\nimport \"./iERC1155ContractTransfer.sol\";\r\nimport \"../interfaces/IERC1155Transfer.sol\";\r\nimport \"../interfaces/IERC1155Receiver.sol\";\r\nimport \"../../../../libraries/utils/Address.sol\";\r\n\r\nimport {iOwnership} from \"../../../Ownership/_Ownership.sol\";\r\n\r\n\r\ncontract iERC1155 is iERC1155ContractTransfer, iOwnership {\r\n    using Address for address;\r\n\r\n    /**\r\n     * @dev Sets a new URI for all token types, by relying on the token type ID\r\n     * substitution mechanism\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\r\n     *\r\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\r\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\r\n     * clients with the token type ID.\r\n     *\r\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\r\n     * interpreted by clients as\r\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\r\n     * for token type ID 0x4cce0.\r\n     *\r\n     * See {uri}.\r\n     *\r\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\r\n     * this function emits no events.\r\n     */\r\n    function _setURI(string memory newuri) internal {\r\n        LibERC1155.ERC1155Storage storage es = LibERC1155.erc1155Storage();\r\n        es.uri = newuri;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal {\r\n        require(to != address(0), \"ERC1155: mint to the zero address\");\r\n\r\n        LibERC1155.ERC1155Storage storage es = LibERC1155.erc1155Storage();\r\n        address operator = msgSender();\r\n        uint256[] memory ids = LibERC1155._asSingletonArray(id);\r\n        uint256[] memory amounts = LibERC1155._asSingletonArray(amount);\r\n\r\n        es.balance[id][to] += amount;\r\n        es.totalSupply += amount;\r\n        emit TransferSingle(operator, address(0), to, id, amount);\r\n\r\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal {\r\n        require(to != address(0), \"ERC1155: mint to the zero address\");\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n        uint256 _totalSupply;\r\n        LibERC1155.ERC1155Storage storage es = LibERC1155.erc1155Storage();\r\n\r\n        address operator = msgSender();\r\n\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n            es.balance[ids[i]][to] += amounts[i];\r\n            _totalSupply += amounts[i];\r\n        }\r\n        es.totalSupply = _totalSupply;\r\n        emit TransferBatch(operator, address(0), to, ids, amounts);\r\n\r\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens of token type `id` from `from`\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `from` must have at least `amount` tokens of token type `id`.\r\n     */\r\n    function _burn(address from, uint256 id, uint256 amount) internal {\r\n        require(from != address(0), \"ERC1155: burn from the zero address\");\r\n\r\n        LibERC1155.ERC1155Storage storage es = LibERC1155.erc1155Storage();\r\n\r\n        address operator = msgSender();\r\n        uint256[] memory ids = LibERC1155._asSingletonArray(id);\r\n        uint256[] memory amounts = LibERC1155._asSingletonArray(amount);\r\n\r\n        uint256 fromBalance = es.balance[id][from];\r\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\r\n        require(es.totalSupply >= amount, \"Exceeds total supply.\");\r\n        unchecked {\r\n            es.balance[id][from] = fromBalance - amount;\r\n            es.totalSupply -= amount;\r\n        }\r\n\r\n        emit TransferSingle(operator, from, address(0), id, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     */\r\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) internal {\r\n        require(from != address(0), \"ERC1155: burn from the zero address\");\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n\r\n        LibERC1155.ERC1155Storage storage es = LibERC1155.erc1155Storage();\r\n        address operator = msgSender();\r\n\r\n        uint256 _totalAmount;\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n            uint256 id = ids[i];\r\n            uint256 amount = amounts[i];\r\n            _totalAmount += amount;\r\n\r\n            uint256 fromBalance = es.balance[id][from];\r\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\r\n            require(es.totalSupply >= _totalAmount, \"Exceeds total supply.\");\r\n            unchecked {\r\n                es.balance[id][from] = fromBalance - amount;\r\n            }\r\n        }\r\n        es.totalSupply -= _totalAmount;\r\n\r\n        emit TransferBatch(operator, from, address(0), ids, amounts);\r\n    }\r\n\r\n    \r\n}\r\n"
    },
    "contracts/facets/Tokens/ERC1155/internals/iERC1155ContractTransfer.sol": {
      "content": "pragma solidity ^0.8.0;\r\n\r\nimport \"../interfaces/IERC1155Receiver.sol\";\r\nimport \"../../../../libraries/utils/Address.sol\";\r\nimport \"./iERC1155Receiver.sol\";\r\n\r\n//Safety check for transfers to contracts\r\ncontract iERC1155ContractTransfer is iERC1155Receiver {\r\n    \r\n    using Address for address;\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n   /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256[] ids,\r\n        uint256[] values\r\n    );\r\n\r\n     function _doSafeTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) internal {\r\n        if (to.isContract()) {\r\n            if( to == address(this)){\r\n               return;\r\n            }\r\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\r\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\r\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\r\n                }\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function _doSafeBatchTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal {\r\n        if (to.isContract()) {\r\n            if( to == address(this)){\r\n               return;\r\n            }\r\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\r\n                bytes4 response\r\n            ) {\r\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\r\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\r\n                }\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\r\n            }\r\n        }\r\n    }\r\n\r\n}"
    },
    "contracts/facets/Tokens/ERC1155/internals/iERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\ncontract iERC1155Receiver   {\r\n\r\n    function _onERC1155Received(\r\n    ) internal pure returns (bytes4){\r\n        return 0xf23a6e61;\r\n    }\r\n    function _onERC1155BatchReceived(\r\n    ) internal pure returns (bytes4){\r\n        return 0xbc197c81;\r\n    }\r\n}\r\n"
    },
    "contracts/facets/Tokens/ERC1155/internals/iERC1155Transfer.sol": {
      "content": "pragma solidity ^0.8.0;\r\n\r\nimport {iERC2771Recipient} from \"../../../ERC2771Recipient/_ERC2771Recipient.sol\";    \r\nimport \"../libraries/LibERC1155.sol\";\r\nimport \"./iERC1155ContractTransfer.sol\";\r\nimport \"../interfaces/IERC1155Transfer.sol\";\r\n\r\ncontract iERC1155Transfer is iERC1155ContractTransfer, iERC2771Recipient {\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n\r\n    function _safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes memory data) internal {\r\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n        LibERC1155.ERC1155Storage storage es = LibERC1155.erc1155Storage();\r\n        address operator = msgSender(); \r\n        uint256[] memory ids = LibERC1155._asSingletonArray(id);\r\n        uint256[] memory amounts = LibERC1155._asSingletonArray(amount);\r\n\r\n        uint256 fromBalance = es.balance[id][from];\r\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\r\n        unchecked {\r\n            es.balance[id][from] = fromBalance - amount;\r\n        }\r\n        es.balance[id][to] += amount;\r\n        emit TransferSingle(operator, from, to, id, amount);\r\n\r\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _safeBatchTransferFrom(address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal {\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n        LibERC1155.ERC1155Storage storage es = LibERC1155.erc1155Storage();\r\n        address operator = msgSender();\r\n\r\n        for (uint256 i = 0; i < ids.length; ++i) {\r\n            uint256 id = ids[i];\r\n            uint256 amount = amounts[i];\r\n\r\n            uint256 fromBalance = es.balance[id][from];\r\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\r\n            unchecked {\r\n                es.balance[id][from] = fromBalance - amount;\r\n            }\r\n            es.balance[id][to] += amount;\r\n        }\r\n\r\n        emit TransferBatch(operator, from, to, ids, amounts);\r\n\r\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `operator` to operate on all of `owner` tokens\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function _setApprovalForAll(address owner, address operator, bool approved) internal {\r\n        require(owner != operator, \"ERC1155: setting approval status for self\");\r\n\r\n        LibERC1155.ERC1155Storage storage es = LibERC1155.erc1155Storage();\r\n        es.operatorApprovals[owner][operator] = approved;\r\n        emit ApprovalForAll(owner, operator, approved);\r\n    }\r\n\r\n    \r\n}\r\n\r\n"
    },
    "contracts/facets/Tokens/ERC1155/internals/iTransferSetConstraints.sol": {
      "content": "pragma solidity ^0.8.9;\r\n\r\nimport {LibERC1155TransferConstraints} from \"../libraries/LibERC1155TransferConstraints.sol\";\r\nimport { iOwnership } from \"../../../Ownership/_Ownership.sol\";\r\nimport { iMembers } from \"../../../MemberLevel/_Members.sol\" ;   \r\n/**\r\n * @title  \r\n * @author \r\n * @notice Future update will enable these constraints to have different addresess other than owner \r\n */\r\ncontract  iTransferSetConstraints is iOwnership, iMembers {\r\n    error NonTransferableError(address from, address to, uint256 ticketId);\r\n    //Transfer limit only applies to when from is non-zero and not creator and to is not the consumer address\r\n    function nonTransferable( address from, address to, uint256 ticketId) internal view {\r\n        address _ecosystemOwner = _ecosystemOwner();\r\n        if( from == address(0) || from == _ecosystemOwner ){\r\n            //pass\r\n        }\r\n        else if( to == _ecosystemOwner ){  \r\n            //pass\r\n        }\r\n        else{\r\n            revert NonTransferableError(from, to, ticketId);    \r\n        }\r\n        \r\n    }\r\n    function minimumMembershipLevel(uint256 ticketId, address to) internal view {\r\n        LibERC1155TransferConstraints.ConstraintStorage storage cs = \r\n        LibERC1155TransferConstraints.erc1155ConstraintStorage();\r\n        uint32 _memberLevel = _getMemberLevel( to ); \r\n \r\n        if( cs.minimumMemberLevel[ ticketId ] > _memberLevel){   \r\n            revert(\"Member level not sufficient enough for transfer.\");\r\n        }\r\n        return; \r\n    }\r\n    function expireable(uint256 ticketId) external view{\r\n        LibERC1155TransferConstraints.ConstraintStorage storage cs = \r\n        LibERC1155TransferConstraints.erc1155ConstraintStorage();\r\n        uint32 _expireTime = cs.expireTime[ ticketId ];\r\n        require(block.timestamp > _expireTime, \"Expired: Deadline for ticket consumption has passed.\");\r\n    }\r\n\r\n\r\n\r\n   function constraintsEnforce(address from, address to, uint256 _tokenId) internal view {\r\n    // Decode bitMap and nonce from tokenId\r\n    uint128 bitMap = uint128(_tokenId >> 128);\r\n    // uint192 nonce = uint192(_tokenId & type(uint192).max); // Not needed unless used elsewhere\r\n\r\n    LibERC1155TransferConstraints.ConstraintStorage storage cs = \r\n        LibERC1155TransferConstraints.erc1155ConstraintStorage();\r\n\r\n    // Check Transfer Limit (bit 0)\r\n    if ((bitMap & (1 << 0)) != 0) {\r\n        uint256 maxTransfers = cs.tranfserLimit[_tokenId]; // Fix typo: tranfserLimit → transferLimit\r\n        nonTransferable(from, to, _tokenId); // Implement this \r\n    }\r\n \r\n    // Check Minimum Membership Level (bit 1)\r\n    if ((bitMap & (1 << 1)) != 0) {\r\n        uint256 minRank = cs.minimumMemberLevel[_tokenId];\r\n        uint256 senderRank = _getMemberLevel( msgSender() ); // Implement this \r\n        require(senderRank >= minRank, \"Insufficient membership level\");\r\n    }\r\n\r\n    // Check Expiration Time (bit 2)\r\n    if ((bitMap & (1 << 2)) != 0) {\r\n        uint256 expireTime = cs.expireTime[_tokenId];\r\n        require(block.timestamp < expireTime, \"Token expired\");\r\n    }\r\n\r\n   \r\n}\r\n/**\r\nWould like to clean this function up at some point.\r\n */\r\n    function ticketConstraintHandler(LibERC1155TransferConstraints.Constraints memory _constraints) internal returns (uint256){\r\n        LibERC1155TransferConstraints.ConstraintStorage storage cs = LibERC1155TransferConstraints.erc1155ConstraintStorage();\r\n        //check isActive to determine which ticketId interval it's in \r\n        uint128 bitMap; \r\n        uint128 nonce;\r\n        uint128 incrementedNonce;\r\n        uint256 ticketId;\r\n        if(_constraints.transferLimit.isActive){\r\n            //transferLimitConditions set\r\n            bitMap ^= (1 << 1);\r\n        }\r\n        if(_constraints.minimumMembershipLevel.isActive){\r\n            //memberRankDependency set\r\n            bitMap ^= (1 << 2); \r\n        } \r\n        if(_constraints.expireable.isActive){ \r\n            //expireable set\r\n            bitMap ^= (1 << 3);\r\n        }\r\n        if(_constraints.royaltyFee.isActive){ \r\n            //expireable set\r\n            bitMap ^= (1 << 4);\r\n        }\r\n      \r\n        \r\n        //get nonce\r\n        nonce = cs.ticketIntervalNonce[ bitMap ];  \r\n        incrementedNonce = nonce + 1;\r\n        \r\n        //generate ticket id \r\n        ticketId = ( nonce ) +  bitMap * LibERC1155TransferConstraints.INTERVAL_SIZE;\r\n         \r\n       \r\n        cs.ticketIntervalNonce[bitMap] = incrementedNonce;\r\n        \r\n\r\n        //store ticket constraints\r\n        if(_constraints.transferLimit.isActive){\r\n            cs.tranfserLimit[ticketId] = _constraints.transferLimit.maxTransfers;\r\n        }\r\n        if(_constraints.minimumMembershipLevel.isActive){ \r\n            cs.minimumMemberLevel[ticketId] = _constraints.minimumMembershipLevel.minimumLevel;\r\n        }   \r\n        if(_constraints.expireable.isActive){   \r\n            cs.expireTime[ticketId] = _constraints.expireable.expireTime;\r\n        } \r\n        if(_constraints.expireable.isActive){   \r\n            cs.royaltyFee[ticketId] = _constraints.royaltyFee.fee;\r\n        } \r\n        \r\n\r\n        return ticketId;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n */"
    },
    "contracts/facets/Tokens/ERC1155/libraries/LibERC1155.sol": {
      "content": "pragma solidity ^0.8.0;\r\n\r\nlibrary LibERC1155 {\r\n    bytes32 constant STORAGE_ERC1155 = \"diamond.storage.erc1155\";\r\n\r\n    struct ERC1155Storage {\r\n        // Mapping from token ID to account balances\r\n        mapping(uint256 => mapping(address => uint256)) balance;\r\n        // Mapping from account to operator approvals\r\n        mapping(address => mapping(address => bool)) operatorApprovals;\r\n        // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\r\n        string uri;\r\n        uint256 totalSupply;\r\n    }\r\n\r\n    function erc1155Storage() internal pure returns (ERC1155Storage storage es_) {\r\n        bytes32 erc1155_key = STORAGE_ERC1155;\r\n        assembly {\r\n            es_.slot := erc1155_key\r\n        }\r\n    }\r\n\r\n    function getBalance(uint256 tokenId, address user) internal view returns (uint256 balance_) {\r\n        ERC1155Storage storage es = erc1155Storage();\r\n        balance_ = es.balance[tokenId][user];\r\n    }\r\n\r\n    function getOperatorApproval(address user, address operator) internal view returns (bool approved_) {\r\n        ERC1155Storage storage es = erc1155Storage();\r\n        approved_ = es.operatorApprovals[user][operator];\r\n    }\r\n    function _asSingletonArray(uint256 element) internal pure  returns (uint256[] memory) {\r\n        uint256[] memory array = new uint256[](1);\r\n        array[0] = element;\r\n\r\n        return array;\r\n    }\r\n}\r\n"
    },
    "contracts/facets/Tokens/ERC1155/libraries/LibERC1155TransferConstraints.sol": {
      "content": "pragma solidity ^0.8.9; \r\n\r\nimport {LibMemberLevel } from \"../../../MemberLevel/LibMemberLevel.sol\"; \r\nlibrary LibERC1155TransferConstraints{\r\n    bytes32 constant ERC1155_CONSTRAINT_STORAGE_POSITION = keccak256(\"diamond.erc1155constraints\");\r\n\r\nstruct ConstraintStorage{\r\n    mapping(uint256 => uint256) tranfserLimit; \r\n    mapping(uint256 => uint32) minimumMemberLevel; \r\n    mapping(uint256 => uint32) expireTime;\r\n    mapping(uint256 => uint24) royaltyFee;\r\n    mapping(uint128  => uint128) ticketIntervalNonce;\r\n} \r\n \r\nfunction erc1155ConstraintStorage() internal pure returns (ConstraintStorage storage cs) {\r\n        bytes32 position = ERC1155_CONSTRAINT_STORAGE_POSITION;\r\n        assembly {\r\n            cs.slot := position \r\n        }  \r\n    }\r\n    uint256 constant INTERVAL_SIZE = 2**128; \r\n    uint256 constant NUMBER_INTERVALS = 2**128; // max 60 constraints\r\n    uint8 constant CURRENT_MAX_INTERVALS = 8;\r\n    struct Constraints{\r\n        TransferLimit transferLimit;\r\n        MemberLevelDependency minimumMembershipLevel;\r\n        Expireable expireable;\r\n        RoyaltyFee royaltyFee;\r\n    }\r\n    struct MaxAmount{\r\n        uint256 maxAmount;\r\n        bool isActive;\r\n    }\r\n    struct RoyaltyFee{\r\n        uint24 fee;\r\n        bool isActive;\r\n    }\r\n    struct TransferLimit{\r\n        uint256 maxTransfers;\r\n        bool isActive;\r\n    }\r\n \r\n    struct MemberLevelDependency{\r\n        uint32 minimumLevel;\r\n        bool isActive;\r\n    }\r\n\r\n    //Blacklist contained in MemberRankDependency, rank 0 is blacklist, \r\n    //set min rank as 1 or greater\r\n    struct Expireable{\r\n        uint32 expireTime;\r\n        bool isActive;\r\n    }\r\n\r\n    // struct MemberRankTieredDelay{\r\n    //     LibMembers.rank minimumRank;\r\n    // }\r\n}"
    },
    "contracts/facets/Tokens/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../../../libraries/utils/Context.sol\";\r\nimport \"../../../libraries/utils/Ownable.sol\"; \r\nimport \"./libraries/LibERC20.sol\"; \r\nimport \"../../Ownership/LibOwnership.sol\";  \r\nimport \"../ERC1155/libraries/LibERC1155.sol\";\r\nimport \"../ERC1155/internals/iERC1155Transfer.sol\";\r\n \r\nimport {iOwnership} from \"../../Ownership/_Ownership.sol\";\r\n\r\nevent CurrencyNameChanged(string name);\r\nevent CurrencySymbolChanged(string name);\r\n\r\ncontract ERC20Ecosystem is iOwnership, iERC1155Transfer {\r\n\r\n    function setCurrencyNames( string memory _currencyName, string memory _currencySymbol)\r\n    external {\r\n        isEcosystemOwnerVerification(); \r\n        if( bytes(_currencyName).length != 0){\r\n            LibERC20._setName(_currencyName);\r\n            emit CurrencyNameChanged( _currencyName );\r\n        }\r\n        if( bytes(_currencySymbol).length != 0){ \r\n            LibERC20._setSymbol(_currencySymbol);\r\n            emit CurrencySymbolChanged( _currencySymbol );\r\n        }\r\n    }\r\n\r\n\r\n    //ERC20\r\n    function name() external view returns (string memory) {\r\n        return LibERC20.getName();\r\n    }\r\n\r\n    function symbol() external view returns (string memory) {\r\n      return LibERC20.getSymbol();\r\n    }\r\n\r\n    function decimals() external pure returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        // Assuming the ERC1155 contract implements a function to get the total supply for a token ID\r\n        // If not, this function will need to be removed or modified\r\n        // return erc1155.totalSupply(tokenId);\r\n        return 0; // Replace with appropriate total supply logic\r\n    }\r\n\r\n    function balanceOf(address account) external view returns (uint256) {\r\n        return LibERC1155.getBalance(LibERC20.PRIMARY_CURRENCY_ID, account);\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256) {\r\n        bool approvalStatus = LibERC1155.getOperatorApproval(owner, spender);\r\n        return approvalStatus ? type(uint256).max : type(uint256).min; // Replace with appropriate allowance logic\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool) {\r\n        _safeTransferFrom(msgSender(), recipient, LibERC20.PRIMARY_CURRENCY_ID, amount, \"\");\r\n        return true;\r\n    }\r\n   \r\n    function approve(address spender, uint256 amount) external  returns (bool) {\r\n        _setApprovalForAll(msgSender(), spender, amount != 0);\r\n        return true; \r\n    }\r\n\r\n    function approvePermit(address owner, address spender, uint256 amount) internal returns (bool){\r\n        _setApprovalForAll(owner, spender, amount != 0);\r\n    }\r\n    function transferFrom(address sender, address recipient, uint256 amount) external  returns (bool) {\r\n        _safeTransferFrom(sender, recipient, LibERC20.PRIMARY_CURRENCY_ID, amount, \"\");\r\n        return false; // Replace with appropriate transferFrom logic\r\n    }\r\n}\r\n"
    },
    "contracts/facets/Tokens/ERC20/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n"
    },
    "contracts/facets/Tokens/ERC20/libraries/LibERC20.sol": {
      "content": "pragma solidity ^0.8.6;\r\n\r\nlibrary LibERC20{\r\n    uint256 public constant PRIMARY_CURRENCY_ID = 0; \r\n    bytes32 constant ERC20_STORAGE_POSITION = keccak256(\"diamond.standard.erc20.storage\");\r\n    struct ERC20_Storage{\r\n        uint256 totalSupply;\r\n        string name;\r\n        string symbol;\r\n    }\r\n\r\n    function erc20Storage() internal pure returns (ERC20_Storage storage es){\r\n        bytes32 ERC20_STORAGE_POSITION = ERC20_STORAGE_POSITION;\r\n        assembly{\r\n            es.slot := ERC20_STORAGE_POSITION\r\n        }\r\n    }\r\n\r\n    function _setName(string memory _name) internal{\r\n        ERC20_Storage storage es = erc20Storage();\r\n        es.name = _name;\r\n    }\r\n    function _setSymbol(string memory _symbol) internal{\r\n        ERC20_Storage storage es = erc20Storage();\r\n        es.symbol = _symbol;\r\n    }\r\n    function getName() internal view returns(string memory name_) {\r\n        name_ = erc20Storage().name;\r\n    }\r\n    function getSymbol() internal view returns(string memory name_) {\r\n        name_ = erc20Storage().symbol;\r\n    }\r\n\r\n}"
    },
    "contracts/facets/Version/IVersion.sol": {
      "content": "pragma solidity ^0.8.9;\r\n\r\n\r\ninterface IVersion{\r\n    function getVersion()external;\r\n    function isEcosystem() external pure returns (bool);\r\n}"
    },
    "contracts/facets/Version/VersionFacet.sol": {
      "content": "pragma solidity ^0.8.6;\r\n\r\n/**\r\n * Version assignment for both main and optimization version\r\n * \r\n * Main version is canonical upgrades software version, where there is one\r\n * set of software that is upgraded. \r\n * Optimization version is a hardcoded insertion into a particular function\r\n * such that it eventually is cost effective. \r\n * \r\n * How upgrades work in ecosystems is each main version must be upgradable to \r\n * the next immediete upgrade, which also implies optimization versions are \r\n * succesfully upgradable as well. \r\n * \r\n * Upgrades follow a chain in which ...\r\n \r\n * Facet registry util which maps bytecode of facet to hash, which\r\n acts as an id such that on-chain registration can exist. \r\n\r\n**Think about on-chain optimization**\r\n\r\nFor now we deploy \r\n\r\nHave a version check function, which iterates through all facet addresses\r\nto determine main version \r\n\r\n\r\nThis is a tool for owners/devs to use. In no way is this a definitive version of the \r\necossytem version. Can't be determined on-chain. \r\n\r\n\r\nWhen user wants to create an optimization, deploys it through facet registry. \r\n\r\nOptimization versions are a type {byte32 mainVersion, bytes32 signature}\r\nWhere signature is the keccack256(OPTIMIZED_FACET_BYTECODE)\r\n\r\nRegistry offers an on-chain way to verify what's going to be added to an ecosystem\r\n */\r\n\r\n\r\ncontract VersionFacet {\r\n    uint32 mainVersion; \r\n    uint32 optimizationVersion;\r\n\r\n    /**\r\n     * Returns array of structs {address,bytes32} which corresponds to a facet's\r\n     * address and bytecode signature respectively. This enables enable dev's to\r\n     * easily verify diamond state. \r\n     */\r\n    function getVersion()external{}\r\n    function isEcosystem() external pure returns (bool) { return true;}\r\n\r\n}"
    },
    "contracts/IEcosystem.sol": {
      "content": "pragma solidity ^0.8.9;\r\n\r\ninterface IEcosystem{\r\n    \r\n}"
    },
    "contracts/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC165 {\r\n    /// @notice Query if a contract implements an interface\r\n    /// @param interfaceId The interface identifier, as specified in ERC-165\r\n    /// @dev Interface identification is specified in ERC-165. This function\r\n    ///  uses less than 30,000 gas.\r\n    /// @return `true` if the contract implements `interfaceID` and\r\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n"
    },
    "contracts/IERC173.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/// @title ERC-173 Contract Ownership Standard\r\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\r\n/* is ERC165 */\r\ninterface IERC173 {\r\n    /// @dev This emits when ownership of a contract changes.\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /// @notice Get the address of the owner\r\n    /// @return owner_ The address of the owner.\r\n    function owner() external view returns (address owner_);\r\n\r\n    /// @notice Set the address of the new owner of the contract\r\n    /// @dev Set _newOwner to address(0) to renounce any ownership.\r\n    /// @param _newOwner The address of the new owner of the contract\r\n    function transferOwnership(address _newOwner) external;\r\n}\r\n"
    },
    "contracts/libraries/LibEIP712Base.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.6;\r\n\r\nabstract contract EIP712Base {\r\n\r\n    struct EIP712Domain {\r\n        string name;\r\n        string version;\r\n        address verifyingContract;\r\n        bytes32 salt;\r\n    }\r\n\r\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH = keccak256(bytes(\"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\"));\r\n\r\n    bytes32 internal immutable domainSeparator;\r\n\r\n    constructor(string memory name, string memory version)  {\r\n        domainSeparator = keccak256(abi.encode(\r\n            EIP712_DOMAIN_TYPEHASH,\r\n            keccak256(bytes(name)),\r\n            keccak256(bytes(version)),\r\n            address(this),\r\n            bytes32(block.chainid)\r\n        ));\r\n    }\r\n\r\n   \r\n\r\n    function getDomainSeparator() private view returns(bytes32) {\r\n        return domainSeparator;\r\n    }\r\n\r\n    /**\r\n    * Accept message hash and returns hash message in EIP712 compatible form\r\n    * So that it can be used to recover signer from signature signed using EIP712 formatted data\r\n    * https://eips.ethereum.org/EIPS/eip-712\r\n    * \"\\\\x19\" makes the encoding deterministic\r\n    * \"\\\\x01\" is the version byte to make it compatible to EIP-191\r\n    */\r\n    function toTypedMessageHash(bytes32 messageHash) internal view returns(bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", getDomainSeparator(), messageHash));\r\n    }\r\n\r\n}"
    },
    "contracts/libraries/merkleVerify/MembersVerify.sol": {
      "content": "// pragma solidity ^0.8.6;\r\n\r\n// import \"../utils/MerkleProof.sol\";\r\n// import \"../LibMembers.sol\";\r\n\r\n\r\n// library MembersVerify {\r\n\r\n//     function verify(bytes32[] memory proof, address addr, uint256 amount) public view{\r\n//         LibMembers.MembersStorage storage ms = LibMembers.memberStorage();\r\n//         bytes32 root = ms.MembersMerkleRoot;\r\n//         // (2)\r\n//         bytes32 leaf = keccak256(bytes.concat(keccak256(abi.encode(addr, amount))));\r\n//         // (3)\r\n//         require(MerkleProof.verify(proof, root, leaf), \"Invalid proof\");\r\n//         // (4)\r\n//         // ...\r\n//     }\r\n\r\n//     function multiProofVerify(bytes32[] memory proof, bool[] memory proofFlags, LibMembers.Leaf[] memory leaves) internal view {\r\n//         LibMembers.MembersStorage storage ms = LibMembers.memberStorage();\r\n//         bytes32 root = ms.MembersMerkleRoot;\r\n//         bytes32[] memory hashedLeaves = new bytes32[](leaves.length);\r\n//         for (uint32 i; i < leaves.length; i++) {\r\n//             bytes32 hashedLeaf = keccak256(\r\n//                 bytes.concat(keccak256(abi.encode(leaves[i].memberAddress, leaves[i].memberRank.timestamp, leaves[i].memberRank.rank)))\r\n//             );\r\n//             hashedLeaves[i] = hashedLeaf;\r\n//         }\r\n//         // (2)\r\n//         //bytes32 leaf = keccak256(bytes.concat(keccak256(abi.encode(addr, amount))));\r\n//         // (3)\r\n//         require(MerkleProof.multiProofVerify(proof, proofFlags, root, hashedLeaves), \"Invalid Multiproof\");\r\n//         // (4)\r\n//         // ...\r\n//     }\r\n// }\r\n"
    },
    "contracts/libraries/merkleVerify/RedeemTicketVerify.sol": {
      "content": "pragma solidity ^0.8.6;\r\n\r\nimport \"../utils/MerkleProof.sol\";\r\n\r\n\r\n\r\nlibrary RedeemTicketVerify {\r\n\r\n    struct Leaf{\r\n        address userAddress;\r\n        address successor;\r\n    }\r\n\r\n    function verify(bytes32[] memory proof, bytes32 leaf , bytes32 root) internal pure{\r\n        require(MerkleProof.verify(proof, root, leaf), \"Invalid proof\");\r\n    }\r\n\r\n    \r\n}\r\n"
    },
    "contracts/libraries/utils/Address.sol": {
      "content": "library Address {\r\n\r\n    /**\r\n     * Returns whether the target address is a contract\r\n     * @dev This function will return false if invoked during the constructor of a contract,\r\n     * as the code is not actually created until after the constructor finishes.\r\n     * @param account address of the account to check\r\n     * @return whether the target address is a contract\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // XXX Currently there is no better way to check if there is a contract in an address\r\n        // than to check the size of the code at that address.\r\n        // See https://ethereum.stackexchange.com/a/14016/36603\r\n        // for more details about how this works.\r\n        // TODO Check this again before the Serenity release, because all addresses will be\r\n        // contracts then.\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n}"
    },
    "contracts/libraries/utils/ArrayUtil.sol": {
      "content": "library ArrayUtil{\r\n\r\n\r\n    function slice(bytes4[] memory _array, uint16 _startIndex, uint16 _endIndex) external returns (bytes4[] memory arr_){\r\n        \r\n    }\r\n}"
    },
    "contracts/libraries/utils/Common.sol": {
      "content": "\r\npragma solidity ^0.8.6;\r\n\r\n/**\r\n    Note: Simple contract to use as base for const vals\r\n*/\r\ncontract CommonConstants {\r\n\r\n    bytes4 constant internal ERC1155_ACCEPTED = 0xf23a6e61; // bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))\r\n    bytes4 constant internal ERC1155_BATCH_ACCEPTED = 0xbc197c81; // bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))\r\n}"
    },
    "contracts/libraries/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n    function msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n"
    },
    "contracts/libraries/utils/Incrementer.sol": {
      "content": "pragma solidity ^0.8.6;\r\n\r\nlibrary Incrementer {\r\n\r\n     function decrementKey(bytes28 self) internal pure returns( bytes28 ){\r\n        if( bytes8(self)  == bytes8(0) ) {\r\n            return self;\r\n        }\r\n        bytes8 decrementedIndex = bytes8( uint64( bytes8( self ) ) - 1 );\r\n        bytes28 decrementedKey = bytes28( abi.encodePacked(decrementedIndex, bytes20( self << 64) ) );\r\n        return decrementedKey ;\r\n    }\r\n    \r\n     function incrementKey(bytes28 self) internal pure returns( bytes28 ){\r\n        bytes8 decrementedIndex = bytes8( uint64( bytes8( self ) ) + 1 );\r\n        bytes28 decrementedKey = bytes28( abi.encodePacked(decrementedIndex, bytes20( self << 64) ) );\r\n        return decrementedKey ;\r\n    }\r\n    function decrementIndex(bytes8 self) internal returns( bytes8 decrementMaxIndex_ ){\r\n        decrementMaxIndex_ = bytes8( uint64( self ) - 1 );\r\n    }\r\n    function incrementIndex(bytes8 self) internal returns( bytes8 incrementMaxIndex_ ){\r\n        incrementMaxIndex_ = bytes8( uint64( self ) + 1 );\r\n    }\r\n}"
    },
    "contracts/libraries/utils/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev These functions deal with verification of Merkle Tree proofs.\r\n *\r\n * The tree and the proofs can be generated using our\r\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\r\n * You will find a quickstart guide in the readme.\r\n *\r\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\r\n * hashing, or use a hash function other than keccak256 for hashing leaves.\r\n * This is because the concatenation of a sorted pair of internal nodes in\r\n * the merkle tree could be reinterpreted as a leaf value.\r\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\r\n * against this attack out of the box.\r\n */\r\nlibrary MerkleProof {\r\n    /**\r\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\r\n     * defined by `root`. For this, a `proof` must be provided, containing\r\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\r\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\r\n     */\r\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\r\n        return processProof(proof, leaf) == root;\r\n    }\r\n\r\n    /**\r\n     * @dev Calldata version of {verify}\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\r\n        return processProofCalldata(proof, leaf) == root;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\r\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\r\n     * hash matches the root of the tree. When processing the proof, the pairs\r\n     * of leafs & pre-images are assumed to be sorted.\r\n     *\r\n     * _Available since v4.4._\r\n     */\r\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\r\n        bytes32 computedHash = leaf;\r\n        for (uint256 i = 0; i < proof.length; i++) {\r\n            computedHash = _hashPair(computedHash, proof[i]);\r\n        }\r\n        return computedHash;\r\n    }\r\n\r\n    /**\r\n     * @dev Calldata version of {processProof}\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\r\n        bytes32 computedHash = leaf;\r\n        for (uint256 i = 0; i < proof.length; i++) {\r\n            computedHash = _hashPair(computedHash, proof[i]);\r\n        }\r\n        return computedHash;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\r\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\r\n     *\r\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function multiProofVerify(\r\n        bytes32[] memory proof,\r\n        bool[] memory proofFlags,\r\n        bytes32 root,\r\n        bytes32[] memory leaves\r\n    ) internal pure returns (bool) {\r\n        return processMultiProof(proof, proofFlags, leaves) == root;\r\n    }\r\n\r\n    /**\r\n     * @dev Calldata version of {multiProofVerify}\r\n     *\r\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function multiProofVerifyCalldata(\r\n        bytes32[] calldata proof,\r\n        bool[] calldata proofFlags,\r\n        bytes32 root,\r\n        bytes32[] memory leaves\r\n    ) internal pure returns (bool) {\r\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\r\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\r\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\r\n     * respectively.\r\n     *\r\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\r\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\r\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function processMultiProof(\r\n        bytes32[] memory proof,\r\n        bool[] memory proofFlags,\r\n        bytes32[] memory leaves\r\n    ) internal pure returns (bytes32 merkleRoot) {\r\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\r\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\r\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\r\n        // the merkle tree.\r\n        uint256 leavesLen = leaves.length;\r\n        uint256 totalHashes = proofFlags.length;\r\n\r\n        // Check proof validity.\r\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\r\n\r\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\r\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\r\n        bytes32[] memory hashes = new bytes32[](totalHashes);\r\n        uint256 leafPos = 0;\r\n        uint256 hashPos = 0;\r\n        uint256 proofPos = 0;\r\n        // At each step, we compute the next hash using two values:\r\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\r\n        //   get the next hash.\r\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\r\n        //   `proof` array.\r\n        for (uint256 i = 0; i < totalHashes; i++) {\r\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\r\n            bytes32 b = proofFlags[i]\r\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\r\n                : proof[proofPos++];\r\n            hashes[i] = _hashPair(a, b);\r\n        }\r\n\r\n        if (totalHashes > 0) {\r\n            unchecked {\r\n                return hashes[totalHashes - 1];\r\n            }\r\n        } else if (leavesLen > 0) {\r\n            return leaves[0];\r\n        } else {\r\n            return proof[0];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Calldata version of {processMultiProof}.\r\n     *\r\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function processMultiProofCalldata(\r\n        bytes32[] calldata proof,\r\n        bool[] calldata proofFlags,\r\n        bytes32[] memory leaves\r\n    ) internal pure returns (bytes32 merkleRoot) {\r\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\r\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\r\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\r\n        // the merkle tree.\r\n        uint256 leavesLen = leaves.length;\r\n        uint256 totalHashes = proofFlags.length;\r\n\r\n        // Check proof validity.\r\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\r\n\r\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\r\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\r\n        bytes32[] memory hashes = new bytes32[](totalHashes);\r\n        uint256 leafPos = 0;\r\n        uint256 hashPos = 0;\r\n        uint256 proofPos = 0;\r\n        // At each step, we compute the next hash using two values:\r\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\r\n        //   get the next hash.\r\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\r\n        //   `proof` array.\r\n        for (uint256 i = 0; i < totalHashes; i++) {\r\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\r\n            bytes32 b = proofFlags[i]\r\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\r\n                : proof[proofPos++];\r\n            hashes[i] = _hashPair(a, b);\r\n        }\r\n\r\n        if (totalHashes > 0) {\r\n            unchecked {\r\n                return hashes[totalHashes - 1];\r\n            }\r\n        } else if (leavesLen > 0) {\r\n            return leaves[0];\r\n        } else {\r\n            return proof[0];\r\n        }\r\n    }\r\n\r\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\r\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\r\n    }\r\n\r\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x00, a)\r\n            mstore(0x20, b)\r\n            value := keccak256(0x00, 0x40)\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/libraries/utils/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n"
    },
    "contracts/newExchange/exchange.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.28;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\r\n\r\n// Interface for the ecosystem contract to check membership levels\r\ninterface IEcosystem {\r\n    function getMembershipLevel(address user) external view returns (uint16);\r\n}\r\n\r\n// Exchange Rewards Token Contract\r\ncontract ExchangeRewardsToken is ERC1155Supply, Ownable {\r\n    constructor() ERC1155(\"https://exchange.example.com/rewards/{id}.json\") Ownable() {}\r\n\r\n    function mint(address account, uint256 id, uint256 amount) external onlyOwner {\r\n        _mint(account, id, amount, \"\");\r\n    }\r\n\r\n    function mintBatch(address to, uint256[] memory ids, uint256[] memory amounts) external onlyOwner {\r\n        _mintBatch(to, ids, amounts, \"\");\r\n    }\r\n}\r\n\r\n// Staking contract for rewards\r\ncontract ExchangeRewardsStaking is ERC1155Holder, Ownable, ReentrancyGuard {\r\n    ExchangeRewardsToken public rewardsToken;\r\n    \r\n    // Staking parameters\r\n    uint256 public constant MAX_STAKE_DURATION = 30 days;\r\n    uint256 public constant BASE_RATE = 100; // Base rate multiplier\r\n    \r\n    // Staking data structures\r\n    struct StakeInfo {\r\n        uint256 amount;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        uint256 lastUpdateTime;\r\n        uint256 rewardDebt;\r\n    }\r\n    \r\n    // Mapping from token ID to user address to stake info\r\n    mapping(uint256 => mapping(address => StakeInfo)) public stakes;\r\n    \r\n    // Accumulated reward per token, stored as token ID => reward per token\r\n    mapping(uint256 => uint256) public accRewardPerToken;\r\n    \r\n    // Total staked amount per token ID\r\n    mapping(uint256 => uint256) public totalStakedPerToken;\r\n    \r\n    // Last update time for each token's rewards\r\n    mapping(uint256 => uint256) public lastUpdateTimePerToken;\r\n    \r\n    // Token rewards distribution rate (how much reward per second)\r\n    mapping(uint256 => uint256) public rewardRatePerToken;\r\n    \r\n    event Staked(address indexed user, uint256 indexed tokenId, uint256 amount, uint256 endTime);\r\n    event Unstaked(address indexed user, uint256 indexed tokenId, uint256 amount);\r\n    event RewardClaimed(address indexed user, uint256 indexed tokenId, uint256 amount);\r\n    \r\n    constructor(address _rewardsTokenAddress) Ownable() {\r\n        rewardsToken = ExchangeRewardsToken(_rewardsTokenAddress);\r\n    }\r\n    \r\n    // Set reward rate for a specific token\r\n    function setRewardRate(uint256 tokenId, uint256 rate) external onlyOwner {\r\n        updateReward(tokenId);\r\n        rewardRatePerToken[tokenId] = rate;\r\n    }\r\n    \r\n    // Update accumulated rewards for a token\r\n    function updateReward(uint256 tokenId) public {\r\n        if (totalStakedPerToken[tokenId] == 0) {\r\n            lastUpdateTimePerToken[tokenId] = block.timestamp;\r\n            return;\r\n        }\r\n        \r\n        uint256 timeElapsed = block.timestamp - lastUpdateTimePerToken[tokenId];\r\n        if (timeElapsed > 0) {\r\n            uint256 reward = timeElapsed * rewardRatePerToken[tokenId];\r\n            accRewardPerToken[tokenId] += (reward * 1e18) / totalStakedPerToken[tokenId];\r\n            lastUpdateTimePerToken[tokenId] = block.timestamp;\r\n        }\r\n    }\r\n    \r\n    // Update rewards for multiple tokens\r\n    function updateRewards(uint256[] memory tokenIds) public {\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            updateReward(tokenIds[i]);\r\n        }\r\n    }\r\n    \r\n    // Stake tokens for a specific duration\r\n    function stake(uint256 tokenId, uint256 amount, uint256 duration) external nonReentrant {\r\n        require(duration <= MAX_STAKE_DURATION, \"Duration exceeds maximum\");\r\n        require(amount > 0, \"Cannot stake 0\");\r\n        \r\n        updateReward(tokenId);\r\n        \r\n        StakeInfo storage userStake = stakes[tokenId][msg.sender];\r\n        \r\n        // If user already has a stake, we need to claim rewards first\r\n        if (userStake.amount > 0) {\r\n            uint256 pending = pendingRewards(tokenId, msg.sender);\r\n            if (pending > 0) {\r\n                userStake.rewardDebt = userStake.amount * accRewardPerToken[tokenId] / 1e18;\r\n                rewardsToken.mint(msg.sender, tokenId, pending);\r\n                emit RewardClaimed(msg.sender, tokenId, pending);\r\n            }\r\n        }\r\n        \r\n        // Transfer tokens from user\r\n        rewardsToken.safeTransferFrom(msg.sender, address(this), tokenId, amount, \"\");\r\n        \r\n        // Update stake info\r\n        userStake.amount += amount;\r\n        userStake.startTime = block.timestamp;\r\n        userStake.endTime = block.timestamp + duration;\r\n        userStake.lastUpdateTime = block.timestamp;\r\n        userStake.rewardDebt = userStake.amount * accRewardPerToken[tokenId] / 1e18;\r\n        \r\n        // Update total staked\r\n        totalStakedPerToken[tokenId] += amount;\r\n        \r\n        emit Staked(msg.sender, tokenId, amount, userStake.endTime);\r\n    }\r\n    \r\n    // Unstake tokens\r\n    function unstake(uint256 tokenId, uint256 amount) external nonReentrant {\r\n        StakeInfo storage userStake = stakes[tokenId][msg.sender];\r\n        require(amount > 0 && amount <= userStake.amount, \"Invalid amount\");\r\n        require(block.timestamp >= userStake.endTime, \"Stake period not ended\");\r\n        \r\n        updateReward(tokenId);\r\n        \r\n        // Calculate rewards\r\n        uint256 pending = pendingRewards(tokenId, msg.sender);\r\n        \r\n        // Update user stake\r\n        userStake.amount -= amount;\r\n        userStake.rewardDebt = userStake.amount * accRewardPerToken[tokenId] / 1e18;\r\n        \r\n        // Update total staked\r\n        totalStakedPerToken[tokenId] -= amount;\r\n        \r\n        // Transfer tokens and rewards\r\n        rewardsToken.safeTransferFrom(address(this), msg.sender, tokenId, amount, \"\");\r\n        \r\n        if (pending > 0) {\r\n            rewardsToken.mint(msg.sender, tokenId, pending);\r\n            emit RewardClaimed(msg.sender, tokenId, pending);\r\n        }\r\n        \r\n        emit Unstaked(msg.sender, tokenId, amount);\r\n    }\r\n    \r\n    // Claim rewards without unstaking\r\n    function claimRewards(uint256[] memory tokenIds) external nonReentrant {\r\n        uint256 totalRewards = 0;\r\n        \r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            uint256 tokenId = tokenIds[i];\r\n            StakeInfo storage userStake = stakes[tokenId][msg.sender];\r\n            \r\n            if (userStake.amount == 0) continue;\r\n            \r\n            updateReward(tokenId);\r\n            \r\n            uint256 pending = pendingRewards(tokenId, msg.sender);\r\n            if (pending > 0) {\r\n                userStake.rewardDebt = userStake.amount * accRewardPerToken[tokenId] / 1e18;\r\n                rewardsToken.mint(msg.sender, tokenId, pending);\r\n                totalRewards += pending;\r\n                emit RewardClaimed(msg.sender, tokenId, pending);\r\n            }\r\n        }\r\n        \r\n        require(totalRewards > 0, \"No rewards to claim\");\r\n    }\r\n    \r\n    // Calculate pending rewards for a user for a specific token\r\n    function pendingRewards(uint256 tokenId, address user) public view returns (uint256) {\r\n        StakeInfo storage userStake = stakes[tokenId][user];\r\n        if (userStake.amount == 0) {\r\n            return 0;\r\n        }\r\n        \r\n        uint256 accRPT = accRewardPerToken[tokenId];\r\n        \r\n        if (block.timestamp > lastUpdateTimePerToken[tokenId] && totalStakedPerToken[tokenId] != 0) {\r\n            uint256 timeElapsed = block.timestamp - lastUpdateTimePerToken[tokenId];\r\n            uint256 reward = timeElapsed * rewardRatePerToken[tokenId];\r\n            accRPT += (reward * 1e18) / totalStakedPerToken[tokenId];\r\n        }\r\n        \r\n        return (userStake.amount * accRPT / 1e18) - userStake.rewardDebt;\r\n    }\r\n    \r\n    // Calculate pending rewards for a user for multiple tokens\r\n    function pendingRewardsMultiple(uint256[] memory tokenIds, address user) external view returns (uint256[] memory) {\r\n        uint256[] memory rewards = new uint256[](tokenIds.length);\r\n        \r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            rewards[i] = pendingRewards(tokenIds[i], user);\r\n        }\r\n        \r\n        return rewards;\r\n    }\r\n    \r\n    // Get stake boost based on duration (linear increase up to MAX_STAKE_DURATION)\r\n    function getStakeBoost(uint256 duration) public pure returns (uint256) {\r\n        if (duration >= MAX_STAKE_DURATION) {\r\n            return BASE_RATE * 2; // Double rate at max duration\r\n        }\r\n        \r\n        return BASE_RATE + ((BASE_RATE * duration) / MAX_STAKE_DURATION);\r\n    }\r\n    \r\n    // Get user's stake info for multiple tokens\r\n    function getUserStakes(address user, uint256[] memory tokenIds) external view returns (StakeInfo[] memory) {\r\n        StakeInfo[] memory userStakes = new StakeInfo[](tokenIds.length);\r\n        \r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            userStakes[i] = stakes[tokenIds[i]][user];\r\n        }\r\n        \r\n        return userStakes;\r\n    }\r\n}\r\n\r\n// Main Ticket Exchange Contract\r\ncontract TicketExchange is ERC1155, Ownable, ReentrancyGuard {\r\n    // Exchange fee structure\r\n    uint256 public constant EXCHANGE_FEE = 10; // 1.0%\r\n    uint256 public constant STAKERS_FEE = 3;   // 0.3%\r\n    uint256 public constant FEE_DENOMINATOR = 1000;\r\n    bool transient b;     \r\n    // Sale structure as per requirements\r\n    struct Sale { \r\n        uint32 startTime;\r\n        uint32 endTime;\r\n        uint16 membershipLevel;\r\n        address paymentTokenAddress;\r\n        uint256 limit;\r\n        uint256 predecessorSaleId;\r\n        uint256[] itemIds;\r\n        uint256[] itemAmounts;\r\n        uint256 paymentAmount;\r\n        bool active;\r\n    }\r\n    \r\n    // Ticket listing structure\r\n    struct TicketListing {\r\n        address seller;\r\n        uint256 ticketId;\r\n        uint256 amount;\r\n        uint256 price;\r\n        address paymentToken;\r\n        bool active;\r\n    }\r\n    \r\n    // Contracts\r\n    IEcosystem public ecosystem;\r\n    ExchangeRewardsToken public rewardsToken;\r\n    ExchangeRewardsStaking public rewardsStaking;\r\n    \r\n    // State variables\r\n    uint256 public nextSaleId = 1;\r\n    uint256 public nextListingId = 1;\r\n    mapping(uint256 => Sale) public sales;\r\n    mapping(uint256 => TicketListing) public listings;\r\n    mapping(uint256 => mapping(address => uint256)) public userPurchases; // Track purchases per sale\r\n    mapping(address => bool) public paymentTokensWhitelist;\r\n    \r\n    // Exchange fee recipient\r\n    address public feeRecipient;\r\n    \r\n    // Events\r\n    event SaleCreated(uint256 indexed saleId, uint32 startTime, uint32 endTime);\r\n    event SalePurchase(uint256 indexed saleId, address indexed buyer, uint256[] itemIds, uint256[] amounts);\r\n    event TicketListed(uint256 indexed listingId, address indexed seller, uint256 ticketId, uint256 amount, uint256 price);\r\n    event TicketPurchased(uint256 indexed listingId, address indexed buyer, address indexed seller, uint256 ticketId, uint256 amount);\r\n    event TicketListingCancelled(uint256 indexed listingId);\r\n    event RewardsDistributed(address indexed token, uint256 exchangeAmount, uint256 stakersAmount);\r\n    \r\n    constructor(\r\n        address _ecosystemAddress, \r\n        address _rewardsTokenAddress, \r\n        address _rewardsStakingAddress,\r\n        address _feeRecipient\r\n    ) ERC1155(\"https://tickets.example.com/metadata/{id}.json\") Ownable() {\r\n        ecosystem = IEcosystem(_ecosystemAddress);\r\n        rewardsToken = ExchangeRewardsToken(_rewardsTokenAddress);\r\n        rewardsStaking = ExchangeRewardsStaking(_rewardsStakingAddress);\r\n        feeRecipient = _feeRecipient;\r\n    }\r\n    \r\n    // Set a new fee recipient\r\n    function setFeeRecipient(address _feeRecipient) external onlyOwner {\r\n        require(_feeRecipient != address(0), \"Invalid address\");\r\n        feeRecipient = _feeRecipient;\r\n    }\r\n    \r\n    // Add or remove payment tokens from whitelist\r\n    function setPaymentTokenWhitelist(address tokenAddress, bool allowed) external onlyOwner {\r\n        paymentTokensWhitelist[tokenAddress] = allowed;\r\n    }\r\n    \r\n    // Create a new sale\r\n    function createSale(\r\n        uint32 startTime,\r\n        uint32 endTime, \r\n        uint16 membershipLevel,\r\n        address paymentTokenAddress,\r\n        uint256 limit,\r\n        uint256 predecessorSaleId,\r\n        uint256[] memory itemIds,\r\n        uint256[] memory itemAmounts,\r\n        uint256 paymentAmount\r\n    ) external onlyOwner {\r\n        require(itemIds.length == itemAmounts.length, \"Arrays length mismatch\");\r\n        require(startTime < endTime, \"Invalid time period\");\r\n        require(paymentTokensWhitelist[paymentTokenAddress], \"Payment token not whitelisted\");\r\n        \r\n        if (predecessorSaleId > 0) {\r\n            require(sales[predecessorSaleId].active, \"Predecessor sale doesn't exist\");\r\n        }\r\n        \r\n        Sale storage newSale = sales[nextSaleId];\r\n        newSale.startTime = startTime;\r\n        newSale.endTime = endTime;\r\n        newSale.membershipLevel = membershipLevel;\r\n        newSale.paymentTokenAddress = paymentTokenAddress;\r\n        newSale.limit = limit;\r\n        newSale.predecessorSaleId = predecessorSaleId;\r\n        newSale.itemIds = itemIds;\r\n        newSale.itemAmounts = itemAmounts;\r\n        newSale.paymentAmount = paymentAmount;\r\n        newSale.active = true;\r\n        \r\n        emit SaleCreated(nextSaleId, startTime, endTime);\r\n        nextSaleId++;\r\n    }\r\n    \r\n    // Allow users to purchase from a sale\r\n    function purchaseFromSale(uint256 saleId) external nonReentrant {\r\n        \r\n        Sale storage sale = sales[saleId];\r\n        require(sale.active, \"Sale not active\");\r\n        require(block.timestamp >= sale.startTime && block.timestamp <= sale.endTime, \"Sale not open\");\r\n        require(userPurchases[saleId][msg.sender] < sale.limit, \"Purchase limit reached\");\r\n        \r\n        // Check membership level\r\n        uint16 userLevel = ecosystem.getMembershipLevel(msg.sender);\r\n        require(userLevel >= sale.membershipLevel, \"Insufficient membership level\");\r\n        \r\n        // Check predecessor sale purchase if needed\r\n        if (sale.predecessorSaleId > 0) {\r\n            require(userPurchases[sale.predecessorSaleId][msg.sender] > 0, \"Must purchase from predecessor sale first\");\r\n        }\r\n        \r\n        // Transfer payment tokens with fees\r\n        IERC20 paymentToken = IERC20(sale.paymentTokenAddress);\r\n        uint256 paymentAmount = sale.paymentAmount;\r\n        \r\n        uint256 exchangeFee = (paymentAmount * EXCHANGE_FEE) / FEE_DENOMINATOR;\r\n        uint256 stakersFee = (paymentAmount * STAKERS_FEE) / FEE_DENOMINATOR;\r\n        uint256 sellerAmount = paymentAmount - exchangeFee - stakersFee;\r\n        \r\n        require(paymentToken.transferFrom(msg.sender, address(this), paymentAmount), \"Payment failed\");\r\n        \r\n        // Transfer fees\r\n        require(paymentToken.transfer(feeRecipient, exchangeFee), \"Exchange fee transfer failed\");\r\n        \r\n        // Update accumulated rewards for stakers of this token\r\n        distributeStakingRewards(sale.paymentTokenAddress, stakersFee);\r\n        \r\n        // Mint reward tokens to buyer based on payment amount\r\n        uint256 rewardTokenId = uint256(uint160(sale.paymentTokenAddress));\r\n        rewardsToken.mint(msg.sender, rewardTokenId, paymentAmount / 100); // 1% of payment as rewards\r\n        \r\n        // Mint tickets to buyer\r\n        _mintBatch(msg.sender, sale.itemIds, sale.itemAmounts, \"\");\r\n        \r\n        // Update user purchase record\r\n        userPurchases[saleId][msg.sender]++;\r\n        \r\n        emit SalePurchase(saleId, msg.sender, sale.itemIds, sale.itemAmounts);\r\n    }\r\n    \r\n    // List a ticket for sale\r\n    function listTicket(uint256 ticketId, uint256 amount, uint256 price, address paymentToken) external nonReentrant {\r\n        require(amount > 0, \"Cannot list 0 tickets\");\r\n        require(price > 0, \"Price must be > 0\");\r\n        require(paymentTokensWhitelist[paymentToken], \"Payment token not whitelisted\");\r\n        require(balanceOf(msg.sender, ticketId) >= amount, \"Insufficient ticket balance\");\r\n        \r\n        // Transfer tickets to contract\r\n        safeTransferFrom(msg.sender, address(this), ticketId, amount, \"\");\r\n        \r\n        // Create listing\r\n        TicketListing storage listing = listings[nextListingId];\r\n        listing.seller = msg.sender;\r\n        listing.ticketId = ticketId;\r\n        listing.amount = amount;\r\n        listing.price = price;\r\n        listing.paymentToken = paymentToken;\r\n        listing.active = true;\r\n        \r\n        emit TicketListed(nextListingId, msg.sender, ticketId, amount, price);\r\n        nextListingId++;\r\n    }\r\n    \r\n    // Purchase a listed ticket\r\n    function purchaseTicket(uint256 listingId, uint256 amount) external nonReentrant {\r\n        TicketListing storage listing = listings[listingId];\r\n        require(listing.active, \"Listing not active\");\r\n        require(amount > 0 && amount <= listing.amount, \"Invalid amount\");\r\n        \r\n        uint256 totalPrice = (listing.price * amount) / listing.amount;\r\n        IERC20 paymentToken = IERC20(listing.paymentToken);\r\n        \r\n        // Calculate fees\r\n        uint256 exchangeFee = (totalPrice * EXCHANGE_FEE) / FEE_DENOMINATOR;\r\n        uint256 stakersFee = (totalPrice * STAKERS_FEE) / FEE_DENOMINATOR;\r\n        uint256 sellerAmount = totalPrice - exchangeFee - stakersFee;\r\n        \r\n        // Transfer payment\r\n        require(paymentToken.transferFrom(msg.sender, address(this), totalPrice), \"Payment failed\");\r\n        require(paymentToken.transfer(listing.seller, sellerAmount), \"Seller payment failed\");\r\n        require(paymentToken.transfer(feeRecipient, exchangeFee), \"Exchange fee transfer failed\");\r\n        \r\n        // Distribute rewards to stakers\r\n        distributeStakingRewards(listing.paymentToken, stakersFee);\r\n        \r\n        // Mint reward tokens to both buyer and seller\r\n        uint256 rewardTokenId = uint256(uint160(listing.paymentToken));\r\n        uint256 buyerRewards = totalPrice / 200; // 0.5% of payment as rewards\r\n        uint256 sellerRewards = totalPrice / 200; // 0.5% of payment as rewards\r\n        \r\n        rewardsToken.mint(msg.sender, rewardTokenId, buyerRewards);\r\n        rewardsToken.mint(listing.seller, rewardTokenId, sellerRewards);\r\n        \r\n        // Transfer tickets to buyer\r\n        _safeTransferFrom(address(this), msg.sender, listing.ticketId, amount, \"\");\r\n        \r\n        // Update listing\r\n        listing.amount -= amount;\r\n        if (listing.amount == 0) {\r\n            listing.active = false;\r\n        }\r\n        \r\n        emit TicketPurchased(listingId, msg.sender, listing.seller, listing.ticketId, amount);\r\n    }\r\n    \r\n    // Cancel a listing\r\n    function cancelListing(uint256 listingId) external nonReentrant {\r\n        TicketListing storage listing = listings[listingId];\r\n        require(listing.active, \"Listing not active\");\r\n        require(listing.seller == msg.sender, \"Not the seller\");\r\n        \r\n        // Return tickets to seller\r\n        _safeTransferFrom(address(this), listing.seller, listing.ticketId, listing.amount, \"\");\r\n        \r\n        listing.active = false;\r\n        \r\n        emit TicketListingCancelled(listingId);\r\n    }\r\n    \r\n    // Distribute staking rewards\r\n    function distributeStakingRewards(address tokenAddress, uint256 amount) internal {\r\n        uint256 rewardTokenId = uint256(uint160(tokenAddress));\r\n        \r\n        // Update rewards for this token\r\n        rewardsStaking.updateReward(rewardTokenId);\r\n        \r\n        emit RewardsDistributed(tokenAddress, 0, amount);\r\n    }\r\n    \r\n    // Mint new tickets (admin function)\r\n    function mintTickets(address to, uint256[] memory ids, uint256[] memory amounts) external onlyOwner {\r\n        _mintBatch(to, ids, amounts, \"\");\r\n    }\r\n    \r\n    // Override transfer hook to trigger rewards for direct transfers\r\n    function _beforeTokenTransfer(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal override {\r\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n        \r\n        // If it's a direct transfer between users (not involving the contract)\r\n        if (from != address(0) && from != address(this) && to != address(0) && to != address(this)) {\r\n            // We could add direct transfer rewards here if desired\r\n        }\r\n    }\r\n}\r\n\r\n// Factory to deploy the entire ecosystem\r\ncontract TicketExchangeFactory {\r\n    function deployExchangeSystem(address ecosystemAddress, address feeRecipient) external returns (\r\n        address ticketExchange,\r\n        address rewardsToken,\r\n        address rewardsStaking\r\n    ) {\r\n        // Deploy rewards token\r\n        ExchangeRewardsToken rewardsTokenContract = new ExchangeRewardsToken();\r\n        \r\n        // Deploy staking contract\r\n        ExchangeRewardsStaking stakingContract = new ExchangeRewardsStaking(address(rewardsTokenContract));\r\n        \r\n        // Transfer ownership of rewards token to staking contract\r\n        rewardsTokenContract.transferOwnership(address(stakingContract));\r\n        \r\n        // Deploy ticket exchange\r\n        TicketExchange exchangeContract = new TicketExchange(\r\n            ecosystemAddress,\r\n            address(rewardsTokenContract),\r\n            address(stakingContract),\r\n            feeRecipient\r\n        );\r\n        \r\n        return (\r\n            address(exchangeContract),\r\n            address(rewardsTokenContract),\r\n            address(stakingContract)\r\n        );\r\n    }\r\n}"
    },
    "contracts/ReentrancyGuard.sol": {
      "content": "pragma solidity ^0.8.28;\r\n\r\n\r\ncontract ReentrancyGuardContract{\r\n    bool transient isLocked;\r\n    modifier ReentrancyGuard{\r\n        isLocked = true;\r\n        _;\r\n        isLocked = false;\r\n    }\r\n}"
    },
    "contracts/registry/Registry.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../deploy/IDiamondDeploy.sol\"; \r\nimport \"../facets/Diamond/IDiamondCut.sol\"; \r\n\r\nimport \"hardhat/console.sol\";\r\nimport \"../facets/Ownership/_Ownership.sol\";\r\n\r\n/**\r\nTODO\r\nNeed to add Owner/Global freeze logic as inherited contract\r\nNeed to hardcoded facet <--> constructor dependencies and types\r\nWould be accomplished better with Diamond\r\n\r\nUltimately have a diamond where the owner can only implement new versions.\r\nWould need to add new versions, but have logic in main diamond. \r\nUpgrades - Get first version (earlier). Step up version upgrades\r\nWhat changes do we need to watch out for? Forget localized optimizations for now.\r\n    1. Consistent constructor inputs as prior. \r\n    2. Changing/Adding/Removing relevant facets\r\n\r\nFor 2, we loop starting at version i + 1  (i is starting version) and go to N (target version)\r\nWe should create an array of DiamondCuts. DiamondCuts must have constructor information too. \r\n\r\n */ \r\ncontract EcosystemRegistry is iOwnership {\r\n    // State Variables\r\n    address public owner;\r\n    mapping(bytes32 => Version) public versions;\r\n    mapping(address => Ecosystem[]) userEcosystems;\r\n    //mapping(uint240 => mapping(bytes32 => address)) optimizedFacet;\r\n\r\n    // Structs\r\n    struct Version {\r\n        bool exists;\r\n        uint32 uploadedTimestamp;\r\n        address diamondDeployAddress; \r\n        IDiamondCut.FacetCut[] facetCuts;\r\n    }\r\n    \r\n\r\n    struct Ecosystem {\r\n        string name;\r\n        address ecosytemAddress;\r\n        bytes32 versionNumber;\r\n    }\r\n\r\n    // Events\r\n    event VersionUploaded(bytes32 versionNumber);\r\n    event EcosystemDeployed(address user, address ecosystem, bytes32 versionNumber, string name);\r\n    event VersionUpgraded(bytes32 newVersion, bytes32 oldVersion, address ecosystemOwner);\r\n    //event OptimizedFacets(uint240 versionNumber, bytes30 optimizationId, uint256 optimizationIndex, bytes[] bytecode, bytes[] params);\r\n\r\n\r\n    // Constructor\r\n    constructor() {\r\n        owner = msgSender();\r\n    }\r\n\r\n    // Owner-Only Functions\r\n    function uploadVersion(\r\n        bytes32 versionNumber,\r\n        address diamondDeployAddress, \r\n        IDiamondCut.FacetCut[] memory facetCuts\r\n    ) public onlyOwner {\r\n        require(msgSender() == owner, \"Only the owner may upload new ecosystem versions.\");\r\n        require(! versions[versionNumber].exists, \"Version already exists\");\r\n\r\n        Version storage newVersion = versions[versionNumber];\r\n        newVersion.uploadedTimestamp = uint32(block.timestamp);\r\n        newVersion.exists = true;\r\n        newVersion.diamondDeployAddress = diamondDeployAddress;\r\n\r\n        for (uint i = 0; i < facetCuts.length; i++) {\r\n            \r\n            newVersion.facetCuts.push(facetCuts[i]);\r\n        }\r\n\r\n        emit VersionUploaded(versionNumber);\r\n    }\r\n\r\n    // Public Functions\r\n    function getVersion(bytes32 versionNumber) external view returns (Version memory) {\r\n        return versions[versionNumber];\r\n    }\r\n\r\n    function getUserEcosystems(address ecosystemsOwner) external view returns (Ecosystem[] memory ecosystems_) {\r\n        ecosystems_ = userEcosystems[ecosystemsOwner];\r\n    }\r\n\r\n    // Placeholder for future optimization related functions\r\n    function registerOptimizationFacet(uint240 mainVersion, bytes2 optimizationType, bytes memory bytecode, bytes memory params) external {\r\n        // Placeholder\r\n    }\r\n\r\n    //change to \r\n    function deployVersion(bytes32 versionNumber, string memory name, uint256 salt, bytes calldata diamondBytecode) public returns (address ecosystemAddress_) {\r\n        Version storage _version = versions[versionNumber];\r\n        // Step 1: Check version number validity\r\n        require(_version.exists, \"Version is not valid or not active\");\r\n         \r\n        console.log(1); \r\n        ecosystemAddress_ = IDiamondDeploy(_version.diamondDeployAddress).deploy(msgSender(), salt, diamondBytecode, _version.facetCuts);\r\n        console.log(2);\r\n        // Step 4: Update the user's ecosystems\r\n        Ecosystem memory newEcosystem = Ecosystem(name, ecosystemAddress_, versionNumber);\r\n        userEcosystems[msg.sender].push(newEcosystem);\r\n  \r\n        // Emit Event\r\n        emit EcosystemDeployed(msg.sender, ecosystemAddress_, versionNumber, name);\r\n    }\r\n\r\n    // function upgradeVersion(uint240 mainVersion, uint256 ecosystemIndex) external {\r\n    //     // Check if user has a version, if not, reject\r\n    //     Ecosystem[] storage ecosystems = userEcosystems[msg.sender];\r\n    //     require(ecosystems.length > 0, \"You do not have any ecosystem deployed\");\r\n    //     require(ecosystemIndex < ecosystems.length, \"No ecosystem exists for this index.\");\r\n\r\n    //     Ecosystem memory currentEcosystem = ecosystems[ecosystemIndex];\r\n\r\n    //     // Check mainVersion greater than current version\r\n    //     require(mainVersion > currentEcosystem.versionNumber, \"New version should be greater than current version\");\r\n\r\n    //     // Get current and new version details\r\n    //     Version storage oldVersion = versions[currentEcosystem.versionNumber];\r\n    //     Version storage newVersion = versions[mainVersion];\r\n    //     require(newVersion.isActive, \"The new version is not valid or active\");\r\n\r\n    //     // Take current facets and remove via diamondCut\r\n    //     IDiamondCut.FacetCut[] memory removals = new IDiamondCut.FacetCut[](oldVersion.facets.length);\r\n    //     for (uint256 i = 0; i < oldVersion.facets.length; i++) {\r\n    //         removals[i] = IDiamondCut.FacetCut({\r\n    //             facetAddress: address(0), // Removing\r\n    //             action: IDiamondCut.FacetCutAction.Remove,\r\n    //             functionSelectors: oldVersion.facets[i].functionSelectors\r\n    //         });\r\n    //     }\r\n    //     IDiamondCut(currentEcosystem.ecosytemAddress).diamondCut(removals, address(0), \"\");\r\n\r\n    //     // Add facets of new version via diamondCut\r\n    //     IDiamondCut.FacetCut[] memory additions = new IDiamondCut.FacetCut[](newVersion.facets.length);\r\n    //     for (uint256 i = 0; i < newVersion.facets.length; i++) {\r\n    //         additions[i] = IDiamondCut.FacetCut({\r\n    //             facetAddress: newVersion.facets[i].facetAddress,\r\n    //             action: IDiamondCut.FacetCutAction.Add,\r\n    //             functionSelectors: newVersion.facets[i].functionSelectors\r\n    //         });\r\n    //     }\r\n    //     IDiamondCut(currentEcosystem.ecosytemAddress).diamondCut(additions, address(0), \"\");\r\n    //     emit VersionUpgraded(mainVersion, currentEcosystem.versionNumber, msg.sender);\r\n    //     // Update the current ecosystem's version number\r\n    //     ecosystems[ecosystemIndex].versionNumber = mainVersion;\r\n    //     // Emit Event\r\n        \r\n    // }\r\n}\r\n"
    },
    "contracts/relayNew/entry.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport { ReentrancyGuardContract } from \"../ReentrancyGuard.sol\";\r\nimport {IUniswapPaymaster} from \"./IPaymaster.sol\";\r\nimport \"./ImetaTxVerifier.sol\";\r\n\r\n\r\n\r\ncontract EntryPoint is ReentrancyGuardContract {\r\n    address public immutable trustedForwarder;\r\n    address public immutable paymasterAddress;\r\n\r\n    event RelayExecuted(\r\n        address indexed signer,\r\n        address indexed target,\r\n        bool success,\r\n        uint256 gasUsed,\r\n        uint256 totalGasUsed\r\n    );\r\n    \r\n    constructor(address _trustedForwarder, address _paymasterAddress) {\r\n        trustedForwarder = _trustedForwarder;\r\n        paymasterAddress = _paymasterAddress;\r\n    }\r\n    \r\n    /**\r\n     * @dev Main entry point for the relay\r\n \r\n     * @param req The forwarding request \r\n     * @param signature signature of the message \r\n     */\r\n    function relay(\r\n        IMetaTransactionVerifier.MetaTransaction memory req,\r\n        bytes calldata signature\r\n            ) external ReentrancyGuard {\r\n        // Start gas measurement \r\n        uint256 startGas = gasleft();\r\n        \r\n        // Call the trusted forwarder to execute the transaction\r\n        (bool success, bytes memory result) = trustedForwarder.call(\r\n            abi.encodeWithSelector(\r\n                IMetaTransactionVerifier.executeMetaTransaction.selector,\r\n                req, \r\n                signature \r\n            )\r\n        );\r\n        \r\n        // Calculate gas used for the forwarded call\r\n        uint256 gasUsed = startGas - gasleft();\r\n        \r\n        // Add the additional gas estimate\r\n        uint256 totalGasUsed = gasUsed;  \r\n        req.paymasterData.amountOut += gasUsed;    \r\n        \r\n        IUniswapPaymaster( paymasterAddress ).swapAndUnwrap( req.paymasterData, req.txInitiator );  \r\n        // Ensure the call was successful\r\n        require(success, \"EntryPoint: Forwarded call failed\");\r\n        \r\n        // Emit event with gas metrics\r\n        emit RelayExecuted(\r\n            req.signer,\r\n            req.target,\r\n            success,\r\n            gasUsed,\r\n            totalGasUsed\r\n        );\r\n    }\r\n}"
    },
    "contracts/relayNew/entryNOPM.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport {ReentrancyGuardContract} from \"../ReentrancyGuard.sol\";\r\nimport {IUniswapPaymaster} from \"./IPaymaster.sol\";\r\nimport \"./ImetaTxVerifier.sol\";\r\n\r\ncontract EntryPointNOPM is ReentrancyGuardContract {\r\n    address public immutable trustedForwarder;\r\n\r\n    event RelayExecuted(address indexed signer, address indexed target,  uint256 gasUsed, uint256 totalGasUsed);\r\n\r\n    error TrustedForwarder(bytes error);\r\n\r\n    constructor(address _trustedForwarder) {\r\n        trustedForwarder = _trustedForwarder;\r\n    }\r\n    /**\r\n     * @dev Main entry point for the relay\r\n \r\n     * @param req The forwarding request \r\n     * @param signature signature of the message \r\n     */\r\n    function relay(IMetaTransactionVerifier.MetaTransaction memory req, bytes calldata signature) external ReentrancyGuard {\r\n        // Start gas measurement\r\n        uint256 startGas = gasleft();\r\n\r\n        try IMetaTransactionVerifier(trustedForwarder).executeMetaTransaction(req, signature) returns (bool ) {\r\n            // Handle successful execution (if needed)\r\n        } catch (bytes memory errorData) {\r\n            revert TrustedForwarder(errorData); \r\n        }\r\n        // // Call the trusted forwarder to execute the transaction\r\n        // (bool success, bytes memory result) = trustedForwarder.call(\r\n        //     abi.encodeWithSelector(IMetaTransactionVerifier.executeMetaTransaction.selector, req, signature)\r\n        // );\r\n        // if (!success) {\r\n        //     revert TrustedForwarder(result);\r\n        // }\r\n        // Calculate gas used for the forwarded call\r\n        uint256 gasUsed = startGas - gasleft();\r\n\r\n        // Add the additional gas estimate\r\n        uint256 totalGasUsed = gasUsed;\r\n        req.paymasterData.amountOut += gasUsed;\r\n\r\n        // Ensure the call was successful\r\n\r\n        // Emit event with gas metrics\r\n        emit RelayExecuted(req.signer, req.target, gasUsed, totalGasUsed);\r\n    }\r\n}\r\n"
    },
    "contracts/relayNew/ImetaTxVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\nimport {ISwapRouter} from \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\";\r\n\r\ninterface IMetaTransactionVerifier {\r\n    // Struct for the meta transaction\r\n    struct MetaTransaction {\r\n        address signer;      // Address initiating the transaction\r\n        address target;     // Prevents replay attacks\r\n        address txInitiator;\r\n        ISwapRouter.ExactOutputSingleParams paymasterData;        // Arbitrary transaction data\r\n        bytes targetData;\r\n        uint256 gasLimit;\r\n        uint256 nonce;\r\n        uint32 deadline;\r\n    }\r\n \r\n\r\n    // Event emitted when a meta transaction is executed\r\n    event MetaTransactionExecuted(address indexed from);\r\n\r\n    // Function to execute a meta transaction\r\n    function executeMetaTransaction(\r\n        MetaTransaction calldata metaTx,\r\n        bytes calldata signature\r\n    ) external returns (bool);\r\n\r\n    // Function to get the hash of a meta transaction according to EIP-712\r\n    function getMetaTransactionHash(MetaTransaction calldata metaTx) external view returns (bytes32);\r\n\r\n    // Function to recover the signer from a signature and meta transaction\r\n    function recoverSigner(\r\n        MetaTransaction calldata metaTx,\r\n        bytes calldata signature\r\n    ) external view returns (address);\r\n\r\n    // Function to get the nonce for a user\r\n    function nonces(address user) external view returns (uint256);\r\n}"
    },
    "contracts/relayNew/IPaymaster.sol": {
      "content": "import {ISwapRouter} from \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\";\r\n\r\ninterface IUniswapPaymaster {\r\n    function setEntryPoint(address _relayEntryPoint) external;\r\n    function swapAndUnwrap(ISwapRouter.ExactOutputSingleParams memory params, address txInitiator) external;\r\n    function stakeAndPool(address tokenAddress, uint256 amount, uint256 ethAmount, uint256 deadline) external payable;\r\n     \r\n    event Swapped(address indexed user, address tokenIn, uint256 amountIn, uint256 amountOut);\r\n    event StakedAndPooled(address indexed user, address indexed token, uint256 amount, uint256 apy, uint256 tokenId, uint256 liquidityAdded);\r\n    event Withdrawn(address indexed user, address indexed token, uint256 amount, uint256 reward);\r\n    event Deposited(address indexed user, address indexed token, uint256 amount, uint256 additionalLiquidity);\r\n    event RelayEntryPointSet(address relayEntryPoint);\r\n    \r\n    \r\n    struct DepositDetials {\r\n        address tokenAddress;\r\n        uint256 amount;\r\n        uint256 ethAmount;\r\n        uint256 deadline;\r\n    }\r\n    \r\n    struct TransferAmounts {\r\n        uint256 tokenAmount;\r\n        uint256 wethAmount;\r\n    }\r\n}"
    },
    "contracts/relayNew/metaTxVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\nimport {ISwapRouter} from \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\";\r\n\r\ncontract MetaTransactionVerifier {\r\n    // Struct for our meta transaction\r\n    struct MetaTransaction {\r\n        address signer;      // Address initiating the transaction\r\n        address target;     // Prevents replay attacks\r\n        address txInitiator;\r\n        ISwapRouter.ExactOutputSingleParams paymasterData;        // Arbitrary transaction data\r\n        bytes targetData;\r\n        uint256 gasLimit;\r\n        uint256 nonce;\r\n        uint32 deadline;\r\n    }\r\n\r\n\r\n    // Mapping to track nonces for each user\r\n    mapping(address => uint256) public nonces;\r\n\r\n    // Domain separator for EIP-712\r\n    bytes32 private immutable DOMAIN_SEPARATOR;\r\n    \r\n    // Type hash constants\r\n    bytes32 private constant EIP712_DOMAIN_TYPEHASH = keccak256(\r\n        \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\r\n    );\r\n    \r\n    bytes32 private constant META_TRANSACTION_TYPEHASH = keccak256(\r\n        \"MetaTransaction(address signer,address target,address txInitiator,ExactOutputSingleParams paymasterData,bytes targetData,uint256 gasLimit,uint256 nonce,uint32 deadline)ExactOutputSingleParams(address tokenIn,address tokenOut,uint24 fee,address recipient,uint256 deadline,uint256 amountOut,uint256 amountInMaximum,uint160 sqrtPriceLimitX96)\"\r\n    );\r\n    bytes32 private constant PAYMASTER_TYPEHASH =     \r\n        keccak256(\"ExactOutputSingleParams(address tokenIn,address tokenOut,uint24 fee,address recipient,uint256 deadline,uint256 amountOut,uint256 amountInMaximum,uint160 sqrtPriceLimitX96)\");\r\n    event MetaTransactionExecuted(address indexed from);\r\n    error TargetError( bytes error);\r\n    constructor() {\r\n        DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(\r\n                EIP712_DOMAIN_TYPEHASH,\r\n                keccak256(\"MetaTransactionVerifier\"),  // name\r\n                keccak256(\"1\"),                        // version\r\n                block.chainid,                         // chainId\r\n                address(this)                          // verifyingContract\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Execute a meta transaction\r\n     * @param metaTx The meta transaction struct\r\n     * @param signature The signature to verify\r\n     */\r\n    function executeMetaTransaction(\r\n        MetaTransaction calldata metaTx,\r\n        bytes calldata signature\r\n    ) external returns (bool) {\r\n        // Verify the signer is valid\r\n        address signer = recoverSigner(metaTx, signature);\r\n        \r\n        // Ensure the signer matches the from address in the meta transaction\r\n        require(signer == metaTx.signer, \"Signer and from address mismatch\");\r\n         \r\n        // Verify and increment nonce to prevent replay attacks\r\n        require(nonces[metaTx.signer] == metaTx.nonce, \"Invalid nonce\");\r\n\r\n        require(block.timestamp <= metaTx.deadline, \"Transaction expired\");\r\n        nonces[metaTx.signer]++;\r\n        \r\n\r\n        //modify call data\r\n        bytes memory modifiedCallData = abi.encodePacked(metaTx.targetData, abi.encode(metaTx.signer));\r\n        // Execute transaction logic here\r\n        // This is where you would handle the actual transaction data\r\n        (bool success,bytes memory returnData) = metaTx.target.call(modifiedCallData);\r\n      \r\n        \r\n        emit MetaTransactionExecuted(metaTx.signer); \r\n        \r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the hash of a meta transaction according to EIP-712\r\n     * @param metaTx The meta transaction struct\r\n     * @return The typed data hash\r\n     */\r\n    function getMetaTransactionHash(MetaTransaction calldata metaTx) public view returns (bytes32) {\r\n        return keccak256(\r\n            abi.encodePacked(\r\n                \"\\x19\\x01\",\r\n                DOMAIN_SEPARATOR,\r\n                hashMetaTransaction(metaTx)\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Hash the meta transaction struct\r\n     * @param metaTx The meta transaction struct\r\n     * @return The hash of the struct\r\n     */\r\n    function hashMetaTransaction(MetaTransaction calldata metaTx) internal pure returns (bytes32) {\r\n        return keccak256(\r\n            abi.encode(\r\n                META_TRANSACTION_TYPEHASH,\r\n                metaTx.signer,\r\n                metaTx.target,\r\n                metaTx.txInitiator,\r\n                hashPaymaster(metaTx.paymasterData),  \r\n                keccak256(metaTx.targetData),\r\n                metaTx.gasLimit,\r\n                metaTx.nonce,  \r\n                metaTx.deadline\r\n            )\r\n        );\r\n    }\r\n\r\n    function hashPaymaster(ISwapRouter.ExactOutputSingleParams calldata paymaster) internal pure returns (bytes32) {\r\n        return\r\n            keccak256(\r\n                abi.encode(\r\n                    PAYMASTER_TYPEHASH,\r\n                    paymaster.tokenIn,\r\n                    paymaster.tokenOut,\r\n                    paymaster.fee,\r\n                    paymaster.recipient,\r\n                    paymaster.deadline,\r\n                    paymaster.amountOut,\r\n                    paymaster.amountInMaximum,\r\n                    paymaster.sqrtPriceLimitX96\r\n                    )\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Recover the signer from a signature and meta transaction\r\n     * @param metaTx The meta transaction struct\r\n     * @param signature The signature bytes\r\n     * @return The address of the signer\r\n     */\r\n    function recoverSigner(\r\n        MetaTransaction calldata metaTx,\r\n        bytes calldata signature\r\n    ) public view returns (address) {\r\n        require(signature.length == 65, \"Invalid signature length\");\r\n        \r\n        bytes32 hash = getMetaTransactionHash(metaTx);\r\n        \r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n        \r\n        // Extract r, s, v from the signature\r\n        assembly {\r\n            r := calldataload(signature.offset)\r\n            s := calldataload(add(signature.offset, 32))\r\n            v := byte(0, calldataload(add(signature.offset, 64)))\r\n        }\r\n        \r\n        // v adjustment for Ethereum signed message\r\n        if (v < 27) {\r\n            v += 27;\r\n        }\r\n        \r\n        return ecrecover(hash, v, r, s);\r\n    }\r\n\r\n    function getNonce(\r\n        address user\r\n    ) public view returns (uint256 nonce_){\r\n        nonce_ = nonces[ user ];\r\n    }\r\n}"
    },
    "contracts/relayNew/paymaster.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport { ReentrancyGuardContract } from \"../ReentrancyGuard.sol\";\r\nimport { IUniswapPaymaster } from \"./IPaymaster.sol\";\r\nimport {ISwapRouter} from \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\";\r\n\r\n\r\ninterface IUniswapV3PositionManager {\r\n    struct MintParams {\r\n        address token0;\r\n        address token1;\r\n        uint24 fee;\r\n        int24 tickLower;\r\n        int24 tickUpper;\r\n        uint256 amount0Desired;\r\n        uint256 amount1Desired;\r\n        uint256 amount0Min;\r\n        uint256 amount1Min;\r\n        address recipient;\r\n        uint256 deadline;\r\n    }\r\n    \r\n    function mint(MintParams calldata params) external returns (\r\n        uint256 tokenId,\r\n        uint128 liquidity,\r\n        uint256 amount0,\r\n        uint256 amount1\r\n    );\r\n    \r\n    function positions(uint256 tokenId) external view returns (\r\n        uint96 nonce,\r\n        address operator,\r\n        address token0,\r\n        address token1,\r\n        uint24 fee,\r\n        int24 tickLower,\r\n        int24 tickUpper,\r\n        uint128 liquidity,\r\n        uint256 feeGrowthInside0LastX128,\r\n        uint256 feeGrowthInside1LastX128,\r\n        uint128 tokensOwed0,\r\n        uint128 tokensOwed1\r\n    );\r\n    \r\n    function decreaseLiquidity(\r\n        uint256 tokenId,\r\n        uint128 liquidity,\r\n        uint256 amount0Min,\r\n        uint256 amount1Min,\r\n        uint256 deadline\r\n    ) external returns (uint256 amount0, uint256 amount1);\r\n    \r\n    function collect(\r\n        uint256 tokenId,\r\n        address recipient,\r\n        uint128 amount0Max,\r\n        uint128 amount1Max\r\n    ) external returns (uint256 amount0, uint256 amount1);\r\n}\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function withdraw(uint256) external;\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function balanceOf(address owner) external view returns (uint256);\r\n}\r\n\r\ninterface IStake {\r\n    function stake(address outputToken) external returns (uint256 apy);\r\n}\r\n\r\ncontract UniswapPaymaster is IUniswapPaymaster, Ownable, ReentrancyGuardContract {\r\n    using SafeERC20 for IERC20;\r\n    \r\n    address public uniswapRouter;\r\n    address public wethAddress;\r\n    address public nftPositionManagerAddress;\r\n    address public relayEntryPoint;\r\n\r\n    // Standard fee tiers in Uniswap V3\r\n    uint24 public constant POOL_FEE = 3000; // 0.3%\r\n    \r\n    // Default tick range for adding liquidity (can be made configurable)\r\n    int24 public lowerTick = -887220;\r\n    int24 public upperTick = 887220;\r\n    \r\n    // Staking variables\r\n    mapping(address => mapping(address => uint256)) public stakedAmount; // user => token => amount\r\n    mapping(address => mapping(address => uint256)) public stakingStartTime; // user => token => timestamp\r\n    mapping(address => mapping(address => uint256)) public apyRate; // user => token => APY rate\r\n    mapping(address => mapping(address => uint256)) public lpTokenIds; // user => token => NFT position ID\r\n    \r\n\r\n    constructor(address _uniswapRouter, address _weth, address _nftPositionManager) {\r\n        uniswapRouter = _uniswapRouter;\r\n        wethAddress = _weth;\r\n        nftPositionManagerAddress = _nftPositionManager;\r\n    }\r\n\r\n\r\n    //Prevents any unsuspecting individuals to use this without relay\r\n    function setEntryPoint( address _relayEntryPoint) external onlyOwner {\r\n        relayEntryPoint = _relayEntryPoint;\r\n        emit RelayEntryPointSet ( _relayEntryPoint );\r\n    }\r\n\r\n    function swapAndUnwrap(ISwapRouter.ExactOutputSingleParams memory params, address txInitiator) external ReentrancyGuard {\r\n        require(params.tokenOut == wethAddress, \"TokenOut must be WETH\");\r\n        require(params.recipient != address(0), \"Invalid recipient\");\r\n        \r\n        // Transfer tokens from sender to this contract\r\n        IERC20(params.tokenIn).safeTransferFrom(msg.sender, address(this), params.amountInMaximum);\r\n        \r\n        // Approve router to spend tokens\r\n        IERC20(params.tokenIn).safeApprove(uniswapRouter, params.amountInMaximum);\r\n        \r\n        // Execute swap\r\n        ISwapRouter.ExactOutputSingleParams memory swapParams = \r\n            ISwapRouter.ExactOutputSingleParams({\r\n                tokenIn: params.tokenIn,\r\n                tokenOut: params.tokenOut,\r\n                fee: params.fee,\r\n                recipient: address(this), // Contract receives WETH first\r\n                amountOut: params.amountOut,\r\n                amountInMaximum: params.amountInMaximum,\r\n                sqrtPriceLimitX96: params.sqrtPriceLimitX96,\r\n                deadline: params.deadline\r\n            });\r\n        \r\n        uint256 amountIn = ISwapRouter(uniswapRouter).exactOutputSingle(swapParams);\r\n        \r\n        // Return unused tokens to the user\r\n        if (amountIn < params.amountInMaximum) {\r\n            IERC20(params.tokenIn).safeTransfer(msg.sender, params.amountInMaximum - amountIn);\r\n        }\r\n        \r\n        // Unwrap WETH\r\n        IWETH(wethAddress).withdraw(params.amountOut);\r\n        \r\n        // Send ETH to recipient\r\n        (bool success, ) = params.recipient.call{value: params.amountOut}(\"\");\r\n        require(success, \"ETH transfer failed\");\r\n        \r\n        emit Swapped(params.recipient, params.tokenIn, amountIn, params.amountOut);\r\n    }\r\n    \r\n    // Combined staking and pooling functionality\r\n    function stakeAndPool(address tokenAddress, uint256 amount, uint256 ethAmount, uint256 deadline) external payable ReentrancyGuard {\r\n        require(amount > 0, \"Cannot stake 0 tokens\");\r\n        require(ethAmount > 0 || msg.value > 0, \"ETH amount must be positive\");\r\n        \r\n        uint256 wethToUse = ethAmount;\r\n        if (msg.value > 0) {\r\n            wethToUse = msg.value;\r\n            // Convert ETH to WETH\r\n            IWETH(wethAddress).deposit{value: msg.value}();\r\n        } else {\r\n            // Transfer WETH from user if they didn't send ETH\r\n            IERC20(wethAddress).safeTransferFrom(msg.sender, address(this), ethAmount);\r\n        }\r\n        \r\n        // Transfer tokens from user\r\n        IERC20(tokenAddress).safeTransferFrom(msg.sender, address(this), amount);\r\n        \r\n        // Get APY rate from IStake interface\r\n        uint256 stakeApy = IStake(tokenAddress).stake(wethAddress);\r\n        \r\n        // Sort tokens (Uniswap V3 requires token0 < token1)\r\n        (address token0, address token1, uint256 amount0, uint256 amount1) = _sortTokens(\r\n            tokenAddress, wethAddress, amount, wethToUse\r\n        );\r\n        \r\n        // Approve NFT position manager to use tokens\r\n        IERC20(token0).safeApprove(nftPositionManagerAddress, amount0);\r\n        IERC20(token1).safeApprove(nftPositionManagerAddress, amount1);\r\n        \r\n        // Add liquidity to Uniswap V3 pool\r\n        IUniswapV3PositionManager.MintParams memory params = IUniswapV3PositionManager.MintParams({\r\n            token0: token0,\r\n            token1: token1,\r\n            fee: POOL_FEE,\r\n            tickLower: lowerTick,\r\n            tickUpper: upperTick,\r\n            amount0Desired: amount0,\r\n            amount1Desired: amount1,\r\n            amount0Min: 0, // Allow for slippage\r\n            amount1Min: 0, // Allow for slippage\r\n            recipient: address(this), // Contract holds the NFT\r\n            deadline: deadline\r\n        });\r\n        \r\n        (uint256 tokenId, uint128 liquidity, , ) = IUniswapV3PositionManager(nftPositionManagerAddress).mint(params);\r\n        \r\n        // Record staking and LP position information\r\n        stakedAmount[msg.sender][tokenAddress] += amount;\r\n        stakingStartTime[msg.sender][tokenAddress] = block.timestamp;\r\n        apyRate[msg.sender][tokenAddress] = stakeApy;\r\n        lpTokenIds[msg.sender][tokenAddress] = tokenId;\r\n        \r\n        emit StakedAndPooled(msg.sender, tokenAddress, amount, stakeApy, tokenId, uint256(liquidity));\r\n    }\r\n    \r\n\r\nstruct WithdrawInputs {\r\n    address tokenAddress;\r\n    uint256 amount;\r\n    uint256 deadline;\r\n}\r\nfunction withdrawStake(address tokenAddress, uint256 amount, uint256 deadline) external ReentrancyGuard {\r\n    require(amount > 0, \"Cannot withdraw 0 tokens\");\r\n    require(stakedAmount[msg.sender][tokenAddress] >= amount, \"Insufficient staked amount\");\r\n    \r\n    uint256 tokenId = lpTokenIds[msg.sender][tokenAddress];\r\n    require(tokenId != 0, \"No LP position found\");\r\n    \r\n    PositionInfo memory pos = unpackPositionManager( tokenId );\r\n    \r\n    uint128 liquidityToRemove = uint128((uint256( pos.liquidity) * amount) / stakedAmount[msg.sender][tokenAddress]);\r\n    uint256 reward = calculateReward(msg.sender, tokenAddress);\r\n    \r\n    // Remove and collect liquidity in a single operation\r\n    (uint256 amount0, uint256 amount1) = IUniswapV3PositionManager(nftPositionManagerAddress).decreaseLiquidity(\r\n        tokenId, liquidityToRemove, 0, 0, deadline\r\n    );\r\n    \r\n    IUniswapV3PositionManager(nftPositionManagerAddress).collect(\r\n        tokenId, address(this), type(uint128).max, type(uint128).max\r\n    );\r\n    \r\n    // Update staking information\r\n    stakedAmount[msg.sender][tokenAddress] -= amount;\r\n    stakingStartTime[msg.sender][tokenAddress] = block.timestamp;\r\n    \r\n    // Determine token and weth amounts based on token ordering\r\n    (uint256 tokenAmount, uint256 wethAmount) = pos.token0 == tokenAddress ? \r\n        (amount0, amount1) : (amount1, amount0);\r\n    \r\n    // Transfer tokens and ETH\r\n    IERC20(tokenAddress).safeTransfer(msg.sender, tokenAmount);\r\n    IWETH(wethAddress).withdraw(wethAmount + reward);\r\n    \r\n    (bool success, ) = msg.sender.call{value: wethAmount + reward}(\"\");\r\n    require(success, \"ETH transfer failed\");\r\n    \r\n    emit Withdrawn(msg.sender, tokenAddress, amount, reward);\r\n}\r\nstruct PositionInfo {\r\n    address token0;\r\n    address token1;\r\n    uint128 liquidity;\r\n}\r\nfunction unpackPositionManager(uint256 tokenId) private returns (PositionInfo memory pos) {\r\n    // Prepare the call data for positions(uint256)\r\n    bytes memory data = abi.encodeWithSignature(\"positions(uint256)\", tokenId);\r\n    \r\n    // Perform a low-level call to the position manager\r\n    (bool success, bytes memory returnData) = nftPositionManagerAddress.call(data);\r\n    require(success, \"positions call failed\");\r\n    \r\n    // The positions function returns:\r\n    // (uint96, address, address, address, uint24, int24, int24, uint128, uint256, uint256, uint128, uint128)\r\n    // We only need token0, token1, and liquidity.\r\n    (\r\n        ,              // skip nonce (uint96)\r\n        ,              // skip operator (address)\r\n        pos.token0,    // token0 (address)\r\n        pos.token1,    // token1 (address)\r\n        ,              // skip fee (uint24)\r\n        ,              // skip tickLower (int24)\r\n        ,              // skip tickUpper (int24)\r\n        pos.liquidity, // liquidity (uint128)\r\n        ,              // skip feeGrowthInside0LastX128 (uint256)\r\n        ,              // skip feeGrowthInside1LastX128 (uint256)\r\n        ,              // skip tokensOwed0 (uint128)\r\n        ) = abi.decode(\r\n            returnData,\r\n            (uint96, address, address, address, uint24, int24, int24, uint128, uint256, uint256, uint128, uint128)\r\n        );\r\n        \r\n}\r\n\r\n\r\nfunction removeLiquidityAndCollect(\r\n    uint256 tokenId,\r\n    address token0,\r\n    address tokenAddress,\r\n    uint128 liquidityToRemove,\r\n    uint256 deadline\r\n) internal returns (TransferAmounts memory transferAmounts) {\r\n    (uint256 amount0, uint256 amount1) = IUniswapV3PositionManager(nftPositionManagerAddress).decreaseLiquidity(\r\n        tokenId,\r\n        liquidityToRemove,\r\n        0,\r\n        0,\r\n        deadline\r\n    );\r\n\r\n    IUniswapV3PositionManager(nftPositionManagerAddress).collect(\r\n        tokenId,\r\n        address(this),\r\n        type(uint128).max,\r\n        type(uint128).max\r\n    );\r\n\r\n    if (token0 == tokenAddress) {\r\n        transferAmounts.tokenAmount = amount0;\r\n        transferAmounts.wethAmount = amount1;\r\n    } else {\r\n        transferAmounts.tokenAmount = amount1;\r\n        transferAmounts.wethAmount = amount0;\r\n    }\r\n}\r\n\r\n    function depositAdditional(\r\n       DepositDetials memory _depositDetails \r\n    ) external payable ReentrancyGuard {\r\n        require(_depositDetails.amount > 0, \"Cannot deposit 0 tokens\");\r\n        require(_depositDetails.ethAmount > 0 || msg.value > 0, \"ETH amount must be positive\");\r\n        require(stakedAmount[msg.sender][_depositDetails.tokenAddress] > 0, \"No existing stake found\");\r\n        \r\n        uint256 wethToUse = _depositDetails.ethAmount;\r\n        if (msg.value > 0) {\r\n            wethToUse = msg.value;\r\n            // Convert ETH to WETH\r\n            IWETH(wethAddress).deposit{value: msg.value}();\r\n        } else {\r\n            // Transfer WETH from user if they didn't send ETH\r\n            IERC20(wethAddress).safeTransferFrom(msg.sender, address(this), _depositDetails.ethAmount);\r\n        }\r\n        \r\n        // Transfer additional tokens from user\r\n        IERC20(_depositDetails.tokenAddress).safeTransferFrom(msg.sender, address(this), _depositDetails.amount);\r\n        \r\n        uint256 tokenId = lpTokenIds[msg.sender][_depositDetails.tokenAddress];\r\n        require(tokenId != 0, \"No LP position found\");\r\n        \r\n        // Sort tokens\r\n        (address token0, address token1, uint256 amount0, uint256 amount1) = _sortTokens(\r\n            _depositDetails.tokenAddress, wethAddress, _depositDetails.amount, wethToUse\r\n        );\r\n        \r\n        // Approve NFT position manager to use tokens\r\n        IERC20(token0).safeApprove(nftPositionManagerAddress, amount0);\r\n        IERC20(token1).safeApprove(nftPositionManagerAddress, amount1);\r\n        \r\n        // Calculate current rewards before adding to stake\r\n        uint256 reward = calculateReward(msg.sender, _depositDetails.tokenAddress);\r\n        uint256 currentApyRate = apyRate[msg.sender][_depositDetails.tokenAddress];\r\n        \r\n        // TODO: Implement adding liquidity to existing position\r\n        // For simplicity in this example, we'll just assume creating a new position\r\n        // In a production implementation, you would use the increaseLiquidity function\r\n        \r\n        IUniswapV3PositionManager.MintParams memory params = IUniswapV3PositionManager.MintParams({\r\n            token0: token0,\r\n            token1: token1,\r\n            fee: POOL_FEE,\r\n            tickLower: lowerTick,\r\n            tickUpper: upperTick,\r\n            amount0Desired: amount0,\r\n            amount1Desired: amount1,\r\n            amount0Min: 0, // Allow for slippage\r\n            amount1Min: 0, // Allow for slippage\r\n            recipient: address(this), // Contract holds the NFT\r\n            deadline: _depositDetails.deadline\r\n        });\r\n        \r\n        (uint256 newTokenId, uint128 liquidityAdded, , ) = IUniswapV3PositionManager(nftPositionManagerAddress).mint(params);\r\n        \r\n        // Update staking information\r\n        stakedAmount[msg.sender][_depositDetails.tokenAddress] += _depositDetails.amount;\r\n        stakingStartTime[msg.sender][_depositDetails.tokenAddress] = block.timestamp; // Reset staking time\r\n        \r\n        // Keep the same APY rate\r\n        apyRate[msg.sender][_depositDetails.tokenAddress] = currentApyRate;\r\n        \r\n        // Update token ID (this is a simplification - in production, you'd track multiple positions)\r\n        lpTokenIds[msg.sender][_depositDetails.tokenAddress] = newTokenId;\r\n        \r\n        emit Deposited(msg.sender, _depositDetails.tokenAddress, _depositDetails.amount, uint256(liquidityAdded));\r\n    }\r\n    \r\n    function calculateReward(address user, address tokenAddress) public view returns (uint256) {\r\n        if (stakedAmount[user][tokenAddress] == 0) {\r\n            return 0;\r\n        }\r\n        \r\n        uint256 stakeDuration = block.timestamp - stakingStartTime[user][tokenAddress];\r\n        uint256 userApyRate = apyRate[user][tokenAddress];\r\n        \r\n        // Calculate reward: (amount * APY * duration) / (100000 * 365 days)\r\n        // APY is represented as: 100000 = 100% APY, 20000 = 20% APY\r\n        uint256 reward = (stakedAmount[user][tokenAddress] * userApyRate * stakeDuration) / (100000 * 365 days);\r\n        \r\n        return reward;\r\n    }\r\n    \r\n    function getCurrentEarnings(address user, address tokenAddress) external view returns (uint256) {\r\n        return calculateReward(user, tokenAddress);\r\n    }\r\n    \r\n    function _sortTokens(\r\n        address tokenA, \r\n        address tokenB, \r\n        uint256 amountA, \r\n        uint256 amountB\r\n    ) internal pure returns (\r\n        address token0, \r\n        address token1, \r\n        uint256 amount0, \r\n        uint256 amount1\r\n    ) {\r\n        if (tokenA < tokenB) {\r\n            token0 = tokenA;\r\n            token1 = tokenB;\r\n            amount0 = amountA;\r\n            amount1 = amountB;\r\n        } else {\r\n            token0 = tokenB;\r\n            token1 = tokenA;\r\n            amount0 = amountB;\r\n            amount1 = amountA;\r\n        }\r\n    }\r\n    \r\n    // Allow contract to receive ETH for rewards and deposits\r\n    receive() external payable {}\r\n    \r\n    // Allow owner to update Uniswap router address if needed\r\n    function setUniswapRouter(address _uniswapRouter) external onlyOwner {\r\n        uniswapRouter = _uniswapRouter;\r\n    }\r\n    \r\n    // Allow owner to update WETH address if needed\r\n    function setWethAddress(address _weth) external onlyOwner {\r\n        wethAddress = _weth;\r\n    }\r\n    \r\n    // Allow owner to update NFT position manager address if needed\r\n    function setPositionManager(address _nftPositionManager) external onlyOwner {\r\n        nftPositionManagerAddress = _nftPositionManager;\r\n    }\r\n    \r\n    // Allow owner to update tick range for adding liquidity\r\n    function setTickRange(int24 _lowerTick, int24 _upperTick) external onlyOwner {\r\n        lowerTick = _lowerTick;\r\n        upperTick = _upperTick;\r\n    }\r\n}"
    },
    "contracts/swap/interfaces/IStake.sol": {
      "content": "pragma solidity ^0.8.9;\r\n\r\ninterface IStake{\r\n\r\n    enum StakeTier {Continious, SevenDay, FourteenDay, TwentyEightDay} \r\n    struct RewardRate{\r\n        uint16 initialRate;\r\n        uint16 rateIncrease;\r\n        uint16 rateIncreaseStopDuration;\r\n    }\r\n\r\n    struct StakePosition{\r\n        address user;\r\n        uint256 amount;\r\n        StakeTier tier;\r\n        uint32 startTime;\r\n    }\r\n    function fundStakeAccount(uint256 amount) external;\r\n    function stake(uint256 amount, StakeTier tier, uint256 stakeId) external;\r\n    function stakeContract( address user, uint256 amount, StakeTier tier, uint256 stakeId) external;\r\n\r\n    function batchStake( address[] memory user, uint256[] memory amount, StakeTier[] memory tier, uint256[] memory stakeIds) external;\r\n    function setRewardRates(StakeTier[] memory _stakeTier, RewardRate[] memory _rewardRate) external;\r\n    function unstake(address user, uint256 amount, uint256 stakeId) external returns (uint256);\r\n}"
    },
    "contracts/swap/interfaces/ISwap.sol": {
      "content": "pragma solidity ^0.8.9;\r\n\r\nimport \"../Swap.sol\";\r\n\r\ninterface IMassDXSwap {\r\n    function swap(MassDXSwap.Swap memory inputSwap, MassDXSwap.Swap memory outputSwap, uint256[] memory targetOrders, uint256 _stakeId, bool isOrder) payable external;\r\n}"
    },
    "contracts/swap/interfaces/IVersion.sol": {
      "content": "pragma solidity ^0.8.9;\r\n\r\n\r\ninterface IVersion{\r\n    function getVersion()external;\r\n    function isEcosystem() external pure returns (bool);\r\n}"
    },
    "contracts/swap/IPO.sol": {
      "content": "pragma solidity ^0.8.9;\r\n\r\nimport { MerkleProof } from  \"../libraries/utils/MerkleProof.sol\";\r\nimport { iOwnership } from \"../facets/Ownership/_Ownership.sol\";\r\nimport {IOwnership} from \"../facets/Ownership/IOwnership.sol\";\r\nimport {IERC20} from \"../facets/Tokens/ERC20/interfaces/IERC20.sol\";\r\nimport {ERC1155ReceiverEcosystem} from \"../facets/Tokens/ERC1155/ERC1155Receiver.sol\"; \r\n/**\r\n    A contract that enables users to purchase the owner's token directly via some set ratio between\r\n    owner token and a stable token of sorts. \r\n    \r\n    Another feature is allowing users to pay the owner off-chain, the owner then collects these payments\r\n    and creates a merkle root with leaves containing information on user payment and address. User then \r\n    uses the getFunds method which extracts all funds for their given payment and transfers the owner token\r\n    to their \r\n */\r\n \r\n /**\r\n This must be in an external contract from the ecosystem, so we'll host on the exchange.\r\n Also need to seperate out what needs to be linked together on the exchange.\r\n  */ \r\ncontract IPOCreate is iOwnership, ERC1155ReceiverEcosystem {\r\n \r\n    struct IPO{\r\n        Ecosystem ecosystem;\r\n        bytes32 merkleRoot;\r\n        uint256 ratio;\r\n        address inputTokenAddress;\r\n        uint32 deadline;\r\n        uint256 maxAmountPerUser; // on-chain purchases\r\n        uint256 totalAmount; //total amount for purchase on chain\r\n        mapping(address => UserReward ) userReward;\r\n    }\r\n\r\n\r\n    struct Ecosystem{\r\n        address payable ownerAddress;\r\n        address ecosystemAddress;\r\n        address IPOFundAddress;\r\n    }\r\n    struct UserReward{  \r\n        mapping( uint256 => OffChainPurchase) offChainPurchase;\r\n        uint256 userTotalAmount; //this is only deducted from on-chain swaps\r\n    }\r\n\r\n    struct OffChainPurchase{ \r\n        address user;\r\n        uint256 purchaseId;\r\n        uint256 amount;\r\n        bool isCollected;\r\n    }\r\n    \r\n    mapping( uint256 => IPO) ipo;\r\n\r\n    event IPOCreated(uint256 totalAmount, uint256 maxAmountPerUser, uint256 ratio);\r\n    event IPOPurchaseConsumed( address tokenReceiver, uint256 amount, bool isOnChainPurchase);\r\n\r\n    function setIPO(uint256 IPOid, bytes32 _merkleRoot, uint256 _totalAmount, uint256 _maxAmountPerUser, uint256 _ratio, uint32 _deadline, Ecosystem memory _ecosystem, address _inputTokenAddress) external {\r\n        IPO storage _ipo = ipo[ IPOid ];\r\n\r\n        require( _ipo.deadline != uint32(0), \"An IPO already exists for this id.\");\r\n        require( _deadline > uint32(block.timestamp),\"Deadline must be set in the future\");\r\n\r\n        _ipo.ecosystem = _ecosystem;\r\n        _ipo.merkleRoot = _merkleRoot;\r\n        _ipo.ratio = _ratio;\r\n        _ipo.inputTokenAddress = _inputTokenAddress; \r\n        _ipo.deadline = _deadline;\r\n        _ipo.maxAmountPerUser = _maxAmountPerUser;\r\n        _ipo.totalAmount = _totalAmount;\r\n\r\n        emit IPOCreated(_totalAmount, _maxAmountPerUser, _ratio); \r\n    }\r\n\r\n    function getOffchainPurchaseOwner(uint256 IPOid, address[] memory fundedUsers, uint256[] memory offChainPurchaseId) external {\r\n        IPO storage _ipo = ipo[ IPOid ];\r\n        address _ipoFundAddress = _ipo.ecosystem.IPOFundAddress;\r\n        address _ecosystemAddress = _ipo.ecosystem.ecosystemAddress;\r\n        //assert \r\n        IOwnership( _ecosystemAddress ).isEcosystemOwnerVerify( msgSender() );\r\n\r\n        for( uint256 fundUserIndex; fundUserIndex < fundedUsers.length - 1; fundUserIndex ++ ){\r\n            address _currentUser = fundedUsers[ fundUserIndex ];\r\n            uint256 _offChainPurchaseId = offChainPurchaseId[ fundUserIndex ];\r\n            OffChainPurchase storage _offChainPurchase = _ipo.userReward[ _currentUser ].offChainPurchase[ _offChainPurchaseId ];\r\n            uint256 _amount =  _offChainPurchase.amount;\r\n            _offChainPurchase.isCollected = true;\r\n            //assert user is registered?\r\n            IERC20( _ecosystemAddress ).transferFrom(_ipoFundAddress, _currentUser, _amount);\r\n            emit IPOPurchaseConsumed(_currentUser , _amount, false);\r\n        }\r\n    }\r\n\r\n    function getOffchainPurchase(uint256  IPOid, bytes32[] memory proof, OffChainPurchase memory leaf ) external {\r\n        IPO storage _ipo = ipo[ IPOid ];\r\n        bytes32 _merkleRoot = _ipo.merkleRoot;\r\n        bytes32 encodedLeaf = keccak256(abi.encode(leaf));\r\n\r\n        require(leaf.user == msgSender(), \"Leaf user address doesn't match the sender address\");\r\n        require( MerkleProof.verify(proof, _merkleRoot, encodedLeaf) , \"Invalid Proof\");\r\n\r\n        //transfer to user\r\n        address _ecosystemAddress = _ipo.ecosystem.ecosystemAddress; \r\n        address _IPOFundAddress = _ipo.ecosystem.IPOFundAddress;\r\n        IERC20(_ecosystemAddress).transferFrom(_IPOFundAddress, msgSender(), leaf.amount);\r\n        \r\n        //clear user reward for that \r\n        _ipo.userReward[ msgSender() ].offChainPurchase[ leaf.purchaseId ].isCollected = true;\r\n        emit IPOPurchaseConsumed(msgSender(), leaf.amount, false);\r\n    }\r\n\r\n    ///@param amount amount of target currency desired. \r\n    function getOnChainPurchase(uint256 amount, uint256 IPOid) external {\r\n        IPO storage _ipo = ipo[ IPOid ];\r\n        \r\n        //convert to IPO's currency of choice\r\n        uint256 totalSpend = amount * _ipo.ratio;\r\n        //transfer totalSpend to ecosystem owner\r\n        address payable _ownerAddress = _ipo.ecosystem.ownerAddress; \r\n\r\n        IERC20(_ipo.inputTokenAddress).transferFrom(msgSender(), _ownerAddress, totalSpend);\r\n        \r\n\r\n        uint256 currentUserTotal = _ipo.userReward[ msgSender() ].userTotalAmount;\r\n        require( _ipo.maxAmountPerUser >= currentUserTotal + amount,\"Cannot exceed the max amount of tokens permitted per user.\");\r\n        \r\n        address _ecosystemAddress = _ipo.ecosystem.ecosystemAddress; \r\n        address _IPOFundAddress = _ipo.ecosystem.IPOFundAddress;\r\n\r\n        //transfer tokens to user and update\r\n        IERC20(_ecosystemAddress).transferFrom(_IPOFundAddress, msgSender(), amount);\r\n        _ipo.userReward[ msgSender() ].userTotalAmount += amount; \r\n\r\n        emit IPOPurchaseConsumed(msgSender(), amount, false);\r\n    }\r\n    function uploadIPOMerkleRoot( uint256 IPOid, bytes32 _merkleRoot) external{\r\n        //isEcosystemOwner\r\n        IPO storage _ipo = ipo[ IPOid ];\r\n        _ipo.merkleRoot = _merkleRoot;\r\n    }\r\n\r\n    \r\n}"
    },
    "contracts/swap/MathCommon.sol": {
      "content": "// SPDX-License-Identifier: WTFPL\r\npragma solidity >=0.8.0;\r\n\r\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\r\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\r\n// representation. When it does not, it is annonated in the function's NatSpec documentation.\r\nlibrary PRBMathCommon {\r\n    /// @dev How many trailing decimals can be represented.\r\n    uint256 internal constant SCALE = 1e18;\r\n\r\n    /// @dev Largest power of two divisor of SCALE.\r\n    uint256 internal constant SCALE_LPOTD = 262144;\r\n\r\n    /// @dev SCALE inverted mod 2^256.\r\n    uint256 internal constant SCALE_INVERSE = 78156646155174841979727994598816262306175212592076161876661508869554232690281;\r\n\r\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\r\n    /// @dev Uses 128.128-bit fixed-point numbers - it is the most efficient way.\r\n    /// @param x The exponent as an unsigned 128.128-bit fixed-point number.\r\n    /// @return result The result as an unsigned 60x18 decimal fixed-point number.\r\n    function exp2(uint256 x) internal pure returns (uint256 result) {\r\n        unchecked {\r\n            // Start from 0.5 in the 128.128-bit fixed-point format. We need to use uint256 because the intermediary\r\n            // may get very close to 2^256, which doesn't fit in int256.\r\n            result = 0x80000000000000000000000000000000;\r\n\r\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\r\n            // because the initial result is 2^127 and all magic factors are less than 2^129.\r\n            if (x & 0x80000000000000000000000000000000 > 0) result = (result * 0x16A09E667F3BCC908B2FB1366EA957D3E) >> 128;\r\n            if (x & 0x40000000000000000000000000000000 > 0) result = (result * 0x1306FE0A31B7152DE8D5A46305C85EDED) >> 128;\r\n            if (x & 0x20000000000000000000000000000000 > 0) result = (result * 0x1172B83C7D517ADCDF7C8C50EB14A7920) >> 128;\r\n            if (x & 0x10000000000000000000000000000000 > 0) result = (result * 0x10B5586CF9890F6298B92B71842A98364) >> 128;\r\n            if (x & 0x8000000000000000000000000000000 > 0) result = (result * 0x1059B0D31585743AE7C548EB68CA417FE) >> 128;\r\n            if (x & 0x4000000000000000000000000000000 > 0) result = (result * 0x102C9A3E778060EE6F7CACA4F7A29BDE9) >> 128;\r\n            if (x & 0x2000000000000000000000000000000 > 0) result = (result * 0x10163DA9FB33356D84A66AE336DCDFA40) >> 128;\r\n            if (x & 0x1000000000000000000000000000000 > 0) result = (result * 0x100B1AFA5ABCBED6129AB13EC11DC9544) >> 128;\r\n            if (x & 0x800000000000000000000000000000 > 0) result = (result * 0x10058C86DA1C09EA1FF19D294CF2F679C) >> 128;\r\n            if (x & 0x400000000000000000000000000000 > 0) result = (result * 0x1002C605E2E8CEC506D21BFC89A23A011) >> 128;\r\n            if (x & 0x200000000000000000000000000000 > 0) result = (result * 0x100162F3904051FA128BCA9C55C31E5E0) >> 128;\r\n            if (x & 0x100000000000000000000000000000 > 0) result = (result * 0x1000B175EFFDC76BA38E31671CA939726) >> 128;\r\n            if (x & 0x80000000000000000000000000000 > 0) result = (result * 0x100058BA01FB9F96D6CACD4B180917C3E) >> 128;\r\n            if (x & 0x40000000000000000000000000000 > 0) result = (result * 0x10002C5CC37DA9491D0985C348C68E7B4) >> 128;\r\n            if (x & 0x20000000000000000000000000000 > 0) result = (result * 0x1000162E525EE054754457D5995292027) >> 128;\r\n            if (x & 0x10000000000000000000000000000 > 0) result = (result * 0x10000B17255775C040618BF4A4ADE83FD) >> 128;\r\n            if (x & 0x8000000000000000000000000000 > 0) result = (result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAC) >> 128;\r\n            if (x & 0x4000000000000000000000000000 > 0) result = (result * 0x100002C5C89D5EC6CA4D7C8ACC017B7CA) >> 128;\r\n            if (x & 0x2000000000000000000000000000 > 0) result = (result * 0x10000162E43F4F831060E02D839A9D16D) >> 128;\r\n            if (x & 0x1000000000000000000000000000 > 0) result = (result * 0x100000B1721BCFC99D9F890EA06911763) >> 128;\r\n            if (x & 0x800000000000000000000000000 > 0) result = (result * 0x10000058B90CF1E6D97F9CA14DBCC1629) >> 128;\r\n            if (x & 0x400000000000000000000000000 > 0) result = (result * 0x1000002C5C863B73F016468F6BAC5CA2C) >> 128;\r\n            if (x & 0x200000000000000000000000000 > 0) result = (result * 0x100000162E430E5A18F6119E3C02282A6) >> 128;\r\n            if (x & 0x100000000000000000000000000 > 0) result = (result * 0x1000000B1721835514B86E6D96EFD1BFF) >> 128;\r\n            if (x & 0x80000000000000000000000000 > 0) result = (result * 0x100000058B90C0B48C6BE5DF846C5B2F0) >> 128;\r\n            if (x & 0x40000000000000000000000000 > 0) result = (result * 0x10000002C5C8601CC6B9E94213C72737B) >> 128;\r\n            if (x & 0x20000000000000000000000000 > 0) result = (result * 0x1000000162E42FFF037DF38AA2B219F07) >> 128;\r\n            if (x & 0x10000000000000000000000000 > 0) result = (result * 0x10000000B17217FBA9C739AA5819F44FA) >> 128;\r\n            if (x & 0x8000000000000000000000000 > 0) result = (result * 0x1000000058B90BFCDEE5ACD3C1CEDC824) >> 128;\r\n            if (x & 0x4000000000000000000000000 > 0) result = (result * 0x100000002C5C85FE31F35A6A30DA1BE51) >> 128;\r\n            if (x & 0x2000000000000000000000000 > 0) result = (result * 0x10000000162E42FF0999CE3541B9FFFD0) >> 128;\r\n            if (x & 0x1000000000000000000000000 > 0) result = (result * 0x100000000B17217F80F4EF5AADDA45554) >> 128;\r\n            if (x & 0x800000000000000000000000 > 0) result = (result * 0x10000000058B90BFBF8479BD5A81B51AE) >> 128;\r\n            if (x & 0x400000000000000000000000 > 0) result = (result * 0x1000000002C5C85FDF84BD62AE30A74CD) >> 128;\r\n            if (x & 0x200000000000000000000000 > 0) result = (result * 0x100000000162E42FEFB2FED257559BDAA) >> 128;\r\n            if (x & 0x100000000000000000000000 > 0) result = (result * 0x1000000000B17217F7D5A7716BBA4A9AF) >> 128;\r\n            if (x & 0x80000000000000000000000 > 0) result = (result * 0x100000000058B90BFBE9DDBAC5E109CCF) >> 128;\r\n            if (x & 0x40000000000000000000000 > 0) result = (result * 0x10000000002C5C85FDF4B15DE6F17EB0E) >> 128;\r\n            if (x & 0x20000000000000000000000 > 0) result = (result * 0x1000000000162E42FEFA494F1478FDE05) >> 128;\r\n            if (x & 0x10000000000000000000000 > 0) result = (result * 0x10000000000B17217F7D20CF927C8E94D) >> 128;\r\n            if (x & 0x8000000000000000000000 > 0) result = (result * 0x1000000000058B90BFBE8F71CB4E4B33E) >> 128;\r\n            if (x & 0x4000000000000000000000 > 0) result = (result * 0x100000000002C5C85FDF477B662B26946) >> 128;\r\n            if (x & 0x2000000000000000000000 > 0) result = (result * 0x10000000000162E42FEFA3AE53369388D) >> 128;\r\n            if (x & 0x1000000000000000000000 > 0) result = (result * 0x100000000000B17217F7D1D351A389D41) >> 128;\r\n            if (x & 0x800000000000000000000 > 0) result = (result * 0x10000000000058B90BFBE8E8B2D3D4EDF) >> 128;\r\n            if (x & 0x400000000000000000000 > 0) result = (result * 0x1000000000002C5C85FDF4741BEA6E77F) >> 128;\r\n            if (x & 0x200000000000000000000 > 0) result = (result * 0x100000000000162E42FEFA39FE95583C3) >> 128;\r\n            if (x & 0x100000000000000000000 > 0) result = (result * 0x1000000000000B17217F7D1CFB72B45E3) >> 128;\r\n            if (x & 0x80000000000000000000 > 0) result = (result * 0x100000000000058B90BFBE8E7CC35C3F2) >> 128;\r\n            if (x & 0x40000000000000000000 > 0) result = (result * 0x10000000000002C5C85FDF473E242EA39) >> 128;\r\n            if (x & 0x20000000000000000000 > 0) result = (result * 0x1000000000000162E42FEFA39F02B772C) >> 128;\r\n            if (x & 0x10000000000000000000 > 0) result = (result * 0x10000000000000B17217F7D1CF7D83C1A) >> 128;\r\n            if (x & 0x8000000000000000000 > 0) result = (result * 0x1000000000000058B90BFBE8E7BDCBE2E) >> 128;\r\n            if (x & 0x4000000000000000000 > 0) result = (result * 0x100000000000002C5C85FDF473DEA871F) >> 128;\r\n            if (x & 0x2000000000000000000 > 0) result = (result * 0x10000000000000162E42FEFA39EF44D92) >> 128;\r\n            if (x & 0x1000000000000000000 > 0) result = (result * 0x100000000000000B17217F7D1CF79E949) >> 128;\r\n            if (x & 0x800000000000000000 > 0) result = (result * 0x10000000000000058B90BFBE8E7BCE545) >> 128;\r\n            if (x & 0x400000000000000000 > 0) result = (result * 0x1000000000000002C5C85FDF473DE6ECA) >> 128;\r\n            if (x & 0x200000000000000000 > 0) result = (result * 0x100000000000000162E42FEFA39EF366F) >> 128;\r\n            if (x & 0x100000000000000000 > 0) result = (result * 0x1000000000000000B17217F7D1CF79AFA) >> 128;\r\n            if (x & 0x80000000000000000 > 0) result = (result * 0x100000000000000058B90BFBE8E7BCD6E) >> 128;\r\n            if (x & 0x40000000000000000 > 0) result = (result * 0x10000000000000002C5C85FDF473DE6B3) >> 128;\r\n            if (x & 0x20000000000000000 > 0) result = (result * 0x1000000000000000162E42FEFA39EF359) >> 128;\r\n            if (x & 0x10000000000000000 > 0) result = (result * 0x10000000000000000B17217F7D1CF79AC) >> 128;\r\n\r\n            // Multiply the result by the integer part 2^n + 1. We have to shift by one bit extra because we have already divided\r\n            // by two when we set the result equal to 0.5 above.\r\n            result = result << ((x >> 128) + 1);\r\n\r\n            // Convert the result to the signed 60.18-decimal fixed-point format.\r\n            result = PRBMathCommon.mulDiv(result, 1e18, 2**128);\r\n        }\r\n    }\r\n\r\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\r\n    /// @dev See the note on msb in the \"Find First Set\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\r\n    /// @param x The uint256 number for which to find the index of the most significant bit.\r\n    /// @return msb The index of the most significant bit as an uint256.\r\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\r\n        if (x >= 2**128) {\r\n            x >>= 128;\r\n            msb += 128;\r\n        }\r\n        if (x >= 2**64) {\r\n            x >>= 64;\r\n            msb += 64;\r\n        }\r\n        if (x >= 2**32) {\r\n            x >>= 32;\r\n            msb += 32;\r\n        }\r\n        if (x >= 2**16) {\r\n            x >>= 16;\r\n            msb += 16;\r\n        }\r\n        if (x >= 2**8) {\r\n            x >>= 8;\r\n            msb += 8;\r\n        }\r\n        if (x >= 2**4) {\r\n            x >>= 4;\r\n            msb += 4;\r\n        }\r\n        if (x >= 2**2) {\r\n            x >>= 2;\r\n            msb += 2;\r\n        }\r\n        if (x >= 2**1) {\r\n            // No need to shift x any more.\r\n            msb += 1;\r\n        }\r\n    }\r\n\r\n    /// @notice Calculates floor(x*y÷denominator) with full precision.\r\n    ///\r\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\r\n    ///\r\n    /// Requirements:\r\n    /// - The denominator cannot be zero.\r\n    /// - The result must fit within uint256.\r\n    ///\r\n    /// Caveats:\r\n    /// - This function does not work with fixed-point numbers.\r\n    ///\r\n    /// @param x The multiplicand as an uint256.\r\n    /// @param y The multiplier as an uint256.\r\n    /// @param denominator The divisor as an uint256.\r\n    /// @return result The result as an uint256.\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 denominator\r\n    ) internal pure returns (uint256 result) {\r\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2**256 and mod 2**256 - 1, then use\r\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\r\n        // variables such that product = prod1 * 2**256 + prod0.\r\n        uint256 prod0; // Least significant 256 bits of the product\r\n        uint256 prod1; // Most significant 256 bits of the product\r\n        assembly {\r\n            let mm := mulmod(x, y, not(0))\r\n            prod0 := mul(x, y)\r\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n        }\r\n\r\n        // Handle non-overflow cases, 256 by 256 division\r\n        if (prod1 == 0) {\r\n            require(denominator > 0);\r\n            assembly {\r\n                result := div(prod0, denominator)\r\n            }\r\n            return result;\r\n        }\r\n\r\n        // Make sure the result is less than 2**256. Also prevents denominator == 0.\r\n        require(denominator > prod1);\r\n\r\n        ///////////////////////////////////////////////\r\n        // 512 by 256 division.\r\n        ///////////////////////////////////////////////\r\n\r\n        // Make division exact by subtracting the remainder from [prod1 prod0].\r\n        uint256 remainder;\r\n        assembly {\r\n            // Compute remainder using mulmod.\r\n            remainder := mulmod(x, y, denominator)\r\n\r\n            // Subtract 256 bit number from 512 bit number\r\n            prod1 := sub(prod1, gt(remainder, prod0))\r\n            prod0 := sub(prod0, remainder)\r\n        }\r\n\r\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\r\n        // See https://cs.stackexchange.com/q/138556/92363.\r\n        unchecked {\r\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\r\n            uint256 lpotdod = denominator & (~denominator + 1);\r\n            assembly {\r\n                // Divide denominator by lpotdod.\r\n                denominator := div(denominator, lpotdod)\r\n\r\n                // Divide [prod1 prod0] by lpotdod.\r\n                prod0 := div(prod0, lpotdod)\r\n\r\n                // Flip lpotdod such that it is 2**256 / lpotdod. If lpotdod is zero, then it becomes one.\r\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\r\n            }\r\n\r\n            // Shift in bits from prod1 into prod0.\r\n            prod0 |= prod1 * lpotdod;\r\n\r\n            // Invert denominator mod 2**256. Now that denominator is an odd number, it has an inverse modulo 2**256 such\r\n            // that denominator * inv = 1 mod 2**256. Compute the inverse by starting with a seed that is correct for\r\n            // four bits. That is, denominator * inv = 1 mod 2**4\r\n            uint256 inverse = (3 * denominator) ^ 2;\r\n\r\n            // Now use Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\r\n            // in modular arithmetic, doubling the correct bits in each step.\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2**8\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2**16\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2**32\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2**64\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2**128\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2**256\r\n\r\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\r\n            // This will give us the correct result modulo 2**256. Since the precoditions guarantee that the outcome is\r\n            // less than 2**256, this is the final result. We don't need to compute the high bits of the result and prod1\r\n            // is no longer required.\r\n            result = prod0 * inverse;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /// @notice Calculates floor(x*y÷1e18) with full precision.\r\n    ///\r\n    /// @dev Variant of \"mulDiv\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\r\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\r\n    /// being rounded to 1e-18.  See \"Listing 6\" and text above it at https://accu.org/index.php/journals/1717.\r\n    ///\r\n    /// Requirements:\r\n    /// - The result must fit within uint256.\r\n    ///\r\n    /// Caveats:\r\n    /// - The body is purposely left uncommented; see the NatSpec comments in \"PRBMathCommon.mulDiv\" to understand how this works.\r\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two queations:\r\n    ///     1) x * y = type(uint256).max * SCALE\r\n    ///     2) (x * y) % SCALE >= SCALE / 2\r\n    ///\r\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\r\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\r\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\r\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\r\n        uint256 prod0;\r\n        uint256 prod1;\r\n        assembly {\r\n            let mm := mulmod(x, y, not(0))\r\n            prod0 := mul(x, y)\r\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n        }\r\n\r\n        uint256 remainder;\r\n        uint256 roundUpUnit;\r\n        assembly {\r\n            remainder := mulmod(x, y, SCALE)\r\n            roundUpUnit := gt(remainder, 499999999999999999)\r\n        }\r\n\r\n        if (prod1 == 0) {\r\n            unchecked {\r\n                result = (prod0 / SCALE) + roundUpUnit;\r\n                return result;\r\n            }\r\n        }\r\n\r\n        require(SCALE > prod1);\r\n\r\n        assembly {\r\n            result := add(\r\n                mul(\r\n                    or(\r\n                        div(sub(prod0, remainder), SCALE_LPOTD),\r\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\r\n                    ),\r\n                    SCALE_INVERSE\r\n                ),\r\n                roundUpUnit\r\n            )\r\n        }\r\n    }\r\n\r\n    /// @notice Calculates the square root of x, rounding down.\r\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\r\n    ///\r\n    /// Caveats:\r\n    /// - This function does not work with fixed-point numbers.\r\n    ///\r\n    /// @param x The uint256 number for which to calculate the square root.\r\n    /// @return result The result as an uint256.\r\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\r\n        if (x == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // Calculate the square root of the perfect square of a power of two that is the closest to x.\r\n        uint256 xAux = uint256(x);\r\n        result = 1;\r\n        if (xAux >= 0x100000000000000000000000000000000) {\r\n            xAux >>= 128;\r\n            result <<= 64;\r\n        }\r\n        if (xAux >= 0x10000000000000000) {\r\n            xAux >>= 64;\r\n            result <<= 32;\r\n        }\r\n        if (xAux >= 0x100000000) {\r\n            xAux >>= 32;\r\n            result <<= 16;\r\n        }\r\n        if (xAux >= 0x10000) {\r\n            xAux >>= 16;\r\n            result <<= 8;\r\n        }\r\n        if (xAux >= 0x100) {\r\n            xAux >>= 8;\r\n            result <<= 4;\r\n        }\r\n        if (xAux >= 0x10) {\r\n            xAux >>= 4;\r\n            result <<= 2;\r\n        }\r\n        if (xAux >= 0x8) {\r\n            result <<= 1;\r\n        }\r\n\r\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\r\n        unchecked {\r\n            result = (result + x / result) >> 1;\r\n            result = (result + x / result) >> 1;\r\n            result = (result + x / result) >> 1;\r\n            result = (result + x / result) >> 1;\r\n            result = (result + x / result) >> 1;\r\n            result = (result + x / result) >> 1;\r\n            result = (result + x / result) >> 1; // Seven iterations should be enough\r\n            uint256 roundedDownResult = x / result;\r\n            return result >= roundedDownResult ? roundedDownResult : result;\r\n        }\r\n    }\r\n}"
    },
    "contracts/swap/Swap.sol": {
      "content": "pragma solidity ^0.8.9;\r\n\r\nimport {IERC20} from \"../facets/Tokens/ERC20/interfaces/IERC20.sol\";\r\nimport { IStake } from \"../facets/Stake/IStake.sol\";\r\nimport { IVersion } from \"./interfaces/IVersion.sol\";\r\nimport { IPOCreate } from \"./IPO.sol\";  \r\n\r\nimport { PRBMathUD60x18 } from \"./UD60x18.sol\";\r\n\r\nimport \"hardhat/console.sol\";\r\n\r\n/**\r\nWe want to allow for IPO purchasing and Internal Swapping \r\n(as opposed to swapping with other platforms).\r\n\r\n */\r\n //tokens can be simply ordered, so highest value will be numerator for the ratio, lowest is denominator\r\ncontract MassDXSwap is IPOCreate{\r\n    using PRBMathUD60x18 for uint256;\r\n    /**\r\n        Sell a given token of type A for a given token of type B from \r\n        their respective ecosystems. \r\n      */\r\n      \r\n      struct Swap{  \r\n        address token;\r\n        bool isEther;\r\n        uint256 amount;\r\n      }\r\n \r\n      enum Direction {UpperToLower, LowerToUpper}\r\n      enum OrderFill {Partial, Full}\r\n\r\n      // note: the order swaps input/output so that it matches the reference frame of a new swapper. \r\n      // hence outputSwap in this struct is really the inputSwap of the user that created the order.\r\n      // But since the logic is primarily concerned with the current swapper, we keep naming convention\r\n      // in line with their point of view. \r\n      struct Order{\r\n        uint256 stakeId;\r\n        address marketMaker;\r\n        Swap inputSwap;\r\n        Swap outputSwap; // the currency a new swap order will expect to receive\r\n      }\r\n      \r\n   \r\n        //upperAddress, lowerAddress, ratio\r\n      mapping ( address => mapping(address => mapping( uint256 => Order ) ) )  orders;\r\n\r\n      error MalOrderedArray(Direction direction, uint256[] targetOrders);\r\n      \r\n      event Fill(address inputSwap, address outputSwap, uint256 ratio, uint256 outputAmount, OrderFill orderFillType);\r\n      event SwapOrderSubmitted(address swapIntiaitor, Swap inputSwapToken, Swap outputSwapToken, uint256 scaledRatio);\r\n      event SwapCancelled(address marketMaker, uint256 ratio, uint256 amount);\r\n\r\n      error InputSwapError(address inputSwapAddress, bool isInputSwapEther);\r\n      error OutputSwapError(address outputSwapAddress, bool isOutputSwapEther);\r\n      \r\n    \r\n    //one caveat is same block transactions will miss eachother (i.e. swaps that overlap in their ratio numbers)\r\n    //won't see each other. There could be some potential off-chain method to combat this, but would involve guessing\r\n    //transaction ordering, transaction inclusion. \r\n\r\n\r\n    //rentrancy guard;\r\n    /**\r\n     */\r\n    /**\r\n     * @dev Swaps from inputSwap token to outputSwap token via consuming valid targetOrders\r\n     * @param inputSwap - The caller's currency intended to be swapped for the outputSwap's currency\r\n     * @param outputSwap - The target currency the caller intends to swap for\r\n     * @param targetOrders - An array of unique ratios (which is enforced by design) that correspond to various outputSwap orders\r\n     * the inputSwap will consume if their inputSwap amount permits it.\r\n     * @param _stakeId If inputSwap token is from a MassDX Ecosystem, whatever inputSwap.amount is left over will be staked at the \r\n     * ratio defined by inputSwap.amount * PRECISiON / outputSwap.amount\r\n     * @param isOrder if true will create a swap order if any inputSwap.amount is leftover\r\n     */\r\n    function swap(Swap memory inputSwap, Swap memory outputSwap, uint256[] memory targetOrders, uint256 _stakeId, bool isOrder) payable external {\r\n         \r\n        //convert to UD60x.18\r\n        inputSwap.amount = inputSwap.amount.scale();\r\n        outputSwap.amount = outputSwap.amount.scale();\r\n\r\n\r\n        // swap requirements and conditions\r\n        require(inputSwap.token != outputSwap.token , \"Can't swap into the same ERC20 token\");\r\n        require(inputSwap.amount.mul( outputSwap.amount ) != 0 ,\"Must have non-zero swap amounts.\");\r\n        require( ! ( inputSwap.isEther &&  outputSwap.isEther ),\r\n                 \"Both currencies can't be ether.\");\r\n\r\n        //Non-ether swap type can't have zero address \r\n        if( inputSwap.token == address(0) && !inputSwap.isEther ){\r\n            revert InputSwapError(inputSwap.token, inputSwap.isEther);\r\n        }\r\n        if( outputSwap.token == address(0) && !outputSwap.isEther ){\r\n            revert OutputSwapError(outputSwap.token, outputSwap.isEther);\r\n        }\r\n\r\n        //If one currency is ether, assign it the zero address for consistent ordering purposes\r\n        if( inputSwap.isEther ){\r\n            inputSwap.token = address(0);\r\n            require( inputSwap.amount == msg.value.scale(),\"Input swap amount must match ether received.\");\r\n        }\r\n        else if( outputSwap.isEther ){\r\n            outputSwap.token = address(0);\r\n        }\r\n\r\n\r\n        //set a direction such that increasing/decreasing ratios are expected for target orders\r\n        (Swap memory upperSwap, Swap memory lowerSwap, Direction direction) = swapOrdered(inputSwap, outputSwap);\r\n       \r\n        uint256 scaledRatio = upperSwap.amount.div(lowerSwap.amount);\r\n        console.log(uint8(38));\r\n        console.log(scaledRatio);\r\n        //loop through target orders, already in decreasing/increasing order with respect to user's\r\n        //input swap\r\n        if(targetOrders.length != 0){\r\n            // need to initialize a ratio just below or above the first order's ratio\r\n            // UpperToLower <---> UpperToken Swapped for LowerToken ---> Ratio ⬇️\r\n            // LowerToUpper <---> LowerToken Swapped for UpperToken ---> Ratio ⬆️\r\n            \r\n            uint256 currentTargetRatio =  direction == Direction.UpperToLower ? targetOrders[0] +  1 : ( targetOrders[0] - 1 ); \r\n            for( uint256 orderIndex; orderIndex < targetOrders.length ; orderIndex ++){\r\n                if(inputSwap.amount == 0){\r\n                    break;\r\n                }\r\n                uint256 newTargetRatio = targetOrders[ orderIndex ];\r\n                //assert arrays are well ordered in the proper direction \r\n                if( direction == Direction.UpperToLower && currentTargetRatio <= newTargetRatio ){  \r\n                    revert MalOrderedArray(direction, targetOrders);\r\n                }\r\n                else if ( direction == Direction.LowerToUpper && currentTargetRatio >= newTargetRatio){ \r\n                    revert MalOrderedArray(direction, targetOrders);\r\n                }\r\n                currentTargetRatio = newTargetRatio;\r\n\r\n                Order storage currentOrder  = orders[ upperSwap.token ] [ lowerSwap.token ][ currentTargetRatio ];\r\n\r\n                require(currentOrder.outputSwap.token == outputSwap.token ,\"Output swap address must match target orders\");\r\n                \r\n                fillOrder(inputSwap, currentOrder, currentTargetRatio, direction);  \r\n\r\n            }\r\n        }\r\n        \r\n        //create order and stake leftover amount\r\n        if(inputSwap.amount != 0 && isOrder){\r\n            try IStake( outputSwap.token ).stakeVirtual( msgSender(), outputSwap.amount.descale(), IStake.StakeTier.Continious , _stakeId ) {} catch( bytes memory ){}\r\n\r\n            if( inputSwap.isEther ){\r\n                require( msg.value.scale() == inputSwap.amount, \"Ether sent must match the input swap amount.\");\r\n            }\r\n            else{  \r\n                IERC20(inputSwap.token).transferFrom(msgSender(), address(this), inputSwap.amount.descale());\r\n            }\r\n\r\n            orders[ upperSwap.token ][ lowerSwap.token ][ scaledRatio ] = Order(_stakeId, msgSender(), outputSwap, inputSwap);\r\n        } \r\n        emit SwapOrderSubmitted(msgSender(), inputSwap, outputSwap, scaledRatio); \r\n    }\r\n\r\n    /**\r\n        Need to know which ratio we're looking at, so need to choose a token to be numerator, \r\n        and the other denominator. Numerator is the largest valued token address. \r\n     */\r\n    function swapOrdered(Swap memory swap1, Swap memory swap2) private returns ( Swap memory ,Swap memory, Direction){\r\n        return swap1.token > swap2.token ? (swap1, swap2, Direction.UpperToLower) : (swap2, swap1, Direction.LowerToUpper);\r\n    }\r\n\r\n  \r\n\r\n    /**\r\n     * \r\n     * @param _inputSwap The caller's currency intended to be swapped for the outputSwap's currency\r\n     * @param _currentOrder current order attempting to be filled\r\n     * @param _currentOrderRatio the ratio the input token and output token will be swapped for the current order\r\n     * @param _direction orientation of\r\n     */\r\n    function fillOrder(Swap memory _inputSwap, Order memory _currentOrder, uint256 _currentOrderRatio, Direction _direction ) internal {\r\n        //convert inputamount to output amount\r\n        //need to find if input is upper or lower \r\n        // need to assert ratio corresponds to proper input token giving the corresponding output token in accordance with input/output swaps \r\n        //i.e. if the input token is lower address, then we must use inverse ratio to convert to upper address (output)\r\n        uint256 orientedRatio = _direction == Direction.UpperToLower ? _currentOrderRatio : _currentOrderRatio.inv();\r\n        uint256 totalOutputAvailable = orientedRatio.mul( _inputSwap.amount );\r\n        \r\n        address payable marketMaker = payable( _currentOrder.marketMaker );\r\n\r\n        uint256 outputAmountConsumed;\r\n        uint256 inputAmountConsumed; \r\n        //PARTIAL FILL\r\n        if ( totalOutputAvailable < _currentOrder.outputSwap.amount ) {\r\n            outputAmountConsumed =  totalOutputAvailable;\r\n            inputAmountConsumed = _inputSwap.amount;\r\n\r\n            //fully complete order of input\r\n            _inputSwap.amount = 0;\r\n\r\n            emit Fill( msgSender(), _currentOrder.marketMaker, _currentOrderRatio, totalOutputAvailable, OrderFill.Partial );\r\n        }\r\n        //TOTAL FILL\r\n        else if ( totalOutputAvailable >= _currentOrder.outputSwap.amount ){\r\n            outputAmountConsumed = _currentOrder.outputSwap.amount;\r\n            //fully complete order of input\r\n            inputAmountConsumed = orientedRatio.inv() .mul( _currentOrder.outputSwap.amount );\r\n            \r\n            _inputSwap.amount -= (inputAmountConsumed);  \r\n            \r\n            emit Fill( msgSender(), _currentOrder.marketMaker, _currentOrderRatio, totalOutputAvailable, OrderFill.Full );\r\n        }\r\n        //PAYOUTS \r\n            //SWAPPER TRANSFER\r\n            if(_inputSwap.isEther){\r\n                address payable ethHolder = payable( _currentOrder.marketMaker );\r\n\r\n                //get fee\r\n                (bool success, ) = ethHolder.call{value : inputAmountConsumed.descale() }(\"\");\r\n \r\n                require(success, \"Must succesfully transfer ether to market maker.\");     \r\n            }\r\n            else{\r\n                IERC20(_inputSwap.token).transferFrom( msgSender(), marketMaker, inputAmountConsumed.descale() );\r\n            }\r\n            //SWAP ORDER TRANSFER\r\n            if( _currentOrder.outputSwap.isEther ){ \r\n                address payable swapper = payable( msgSender() );\r\n\r\n                uint256 transferedAmount;\r\n                uint256 rebate;\r\n                try IStake( _currentOrder.inputSwap.token ).getGasStakeFee()  returns ( uint24 feeScale, uint24 fee ){\r\n                    console.log(fee);\r\n                    console.log(feeScale);\r\n                    rebate =  ( outputAmountConsumed * feeScale ) / fee;\r\n                    transferedAmount = outputAmountConsumed - rebate; \r\n                } catch(bytes memory e){ \r\n                    transferedAmount = outputAmountConsumed; \r\n                } \r\n                //transfer to swapper\r\n                ( bool successSwapperTransfer, ) = swapper.call{value : transferedAmount.descale() }(\"\");\r\n                require( successSwapperTransfer, \"Ether must be succesfully transferred to the swapper.\");\r\n                //transfer rebate to market maker\r\n                if ( rebate != 0 ){\r\n                    ( bool successMarketMakerTransfer, ) = marketMaker.call{value : rebate.descale() }(\"\");\r\n                    require( successMarketMakerTransfer, \"Rebate must succesfully transfer to the marketMaker\");\r\n                }\r\n            }\r\n            else{ \r\n                //initial unstake transfers from ecosystem stake address to holder (this contract)\r\n                try IStake( _currentOrder.inputSwap.token ).unstakeVirtual( marketMaker, inputAmountConsumed.descale(), _currentOrder.stakeId ) {} catch(bytes memory e){}\r\n                //transfer from holder to \r\n                IERC20( _currentOrder.outputSwap.token ).transferFrom( address(this), msgSender(), inputAmountConsumed.descale() ); \r\n            }\r\n            _currentOrder.outputSwap.amount -= outputAmountConsumed; \r\n    } \r\n\r\n    function cancelSwapOrder(uint256 ratio, address token1, address token2) external {\r\n        (address upperToken, address lowerToken) = token1 > token2 ? (token1, token2) : (token2, token1);\r\n        Order storage orders = orders[ upperToken ][ lowerToken ][ ratio ];\r\n\r\n        require(orders.marketMaker == msgSender(), \"Must use the account that initiated the swap order.\");\r\n        //zero swap entry \r\n        address _tokenAddress = orders.outputSwap.token;\r\n        uint256 _amount = orders.outputSwap.amount;\r\n        bool _isEcosystem = IVersion(_tokenAddress).isEcosystem();\r\n\r\n        uint256 _newAmount;\r\n         \r\n        if( _isEcosystem ) { \r\n            uint256 _stakeId = orders.stakeId;\r\n            _newAmount = IStake(_tokenAddress).unstakeContract(msgSender(), _amount, _stakeId); \r\n        } \r\n\r\n        else{\r\n            _newAmount = _amount;\r\n            IERC20(_tokenAddress).transfer(msgSender(), _newAmount);\r\n        }\r\n        emit SwapCancelled(msgSender(), ratio, _newAmount);\r\n    }\r\n}\r\n\r\n//what does amount mean? More efficient if we say amount of upper token\r\n\r\n/**\r\n    preciseRatioAmount = upperToken * Precision / lowerToken\r\n    \r\n    What we want is a fixed ratio type like above, well defined. \r\n\r\n    Now we have inputSwap and targetSwaps. \r\n\r\n    We want to eat orders, how to we eat them? Well first we need to find out, \r\n    at the given targetSwap ratio, how much inputAmount corresponds to how much outputAmount.\r\n\r\n */"
    },
    "contracts/swap/UD60x18.sol": {
      "content": "// SPDX-License-Identifier: WTFPL\r\npragma solidity >=0.8.0;\r\n\r\nimport \"./MathCommon.sol\";\r\n\r\n/// @title PRBMathUD60x18\r\n/// @author Paul Razvan Berg\r\n/// @notice Smart contract library for advanced fixed-point math. It works with uint256 numbers considered to have 18\r\n/// trailing decimals. We call this number representation unsigned 60.18-decimal fixed-point, since there can be up to 60\r\n/// digits in the integer part and up to 18 decimals in the fractional part. The numbers are bound by the minimum and the\r\n/// maximum values permitted by the Solidity type uint256.\r\nlibrary PRBMathUD60x18 {\r\n    /// @dev Half the SCALE number.\r\n    uint256 internal constant HALF_SCALE = 5e17;\r\n\r\n    /// @dev log2(e) as an unsigned 60.18-decimal fixed-point number.\r\n    uint256 internal constant LOG2_E = 1442695040888963407;\r\n\r\n    /// @dev The maximum value an unsigned 60.18-decimal fixed-point number can have.\r\n    uint256 internal constant MAX_UD60x18 = 115792089237316195423570985008687907853269984665640564039457584007913129639935;\r\n\r\n    /// @dev The maximum whole value an unsigned 60.18-decimal fixed-point number can have.\r\n    uint256 internal constant MAX_WHOLE_UD60x18 = 115792089237316195423570985008687907853269984665640564039457000000000000000000;\r\n\r\n    /// @dev How many trailing decimals can be represented.\r\n    uint256 internal constant SCALE = 1e18;\r\n\r\n    /// @notice Calculates arithmetic average of x and y, rounding down.\r\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\r\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\r\n    /// @return result The arithmetic average as an usigned 60.18-decimal fixed-point number.\r\n    function avg(uint256 x, uint256 y) internal pure returns (uint256 result) {\r\n        // The operations can never overflow.\r\n        unchecked {\r\n            // The last operand checks if both x and y are odd and if that is the case, we add 1 to the result. We need\r\n            // to do this because if both numbers are odd, the 0.5 remainder gets truncated twice.\r\n            result = (x >> 1) + (y >> 1) + (x & y & 1);\r\n        }\r\n    }\r\n\r\n    /// @notice Yields the least unsigned 60.18 decimal fixed-point number greater than or equal to x.\r\n    ///\r\n    /// @dev Optimised for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\r\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\r\n    ///\r\n    /// Requirements:\r\n    /// - x must be less than or equal to MAX_WHOLE_UD60x18.\r\n    ///\r\n    /// @param x The unsigned 60.18-decimal fixed-point number to ceil.\r\n    /// @param result The least integer greater than or equal to x, as an unsigned 60.18-decimal fixed-point number.\r\n    function ceil(uint256 x) internal pure returns (uint256 result) {\r\n        require(x <= MAX_WHOLE_UD60x18);\r\n        assembly {\r\n            // Equivalent to \"x % SCALE\" but faster.\r\n            let remainder := mod(x, SCALE)\r\n\r\n            // Equivalent to \"SCALE - remainder\" but faster.\r\n            let delta := sub(SCALE, remainder)\r\n\r\n            // Equivalent to \"x + delta * (remainder > 0 ? 1 : 0)\" but faster.\r\n            result := add(x, mul(delta, gt(remainder, 0)))\r\n        }\r\n    }\r\n\r\n    /// @notice Divides two unsigned 60.18-decimal fixed-point numbers, returning a new unsigned 60.18-decimal fixed-point number.\r\n    ///\r\n    /// @dev Uses mulDiv to enable overflow-safe multiplication and division.\r\n    ///\r\n    /// Requirements:\r\n    /// - y cannot be zero.\r\n    ///\r\n    /// @param x The numerator as an unsigned 60.18-decimal fixed-point number.\r\n    /// @param y The denominator as an unsigned 60.18-decimal fixed-point number.\r\n    /// @param result The quotient as an unsigned 60.18-decimal fixed-point number.\r\n    function div(uint256 x, uint256 y) internal pure returns (uint256 result) {\r\n        result = PRBMathCommon.mulDiv(x, SCALE, y);\r\n    }\r\n\r\n    /// @notice Returns Euler's number as an unsigned 60.18-decimal fixed-point number.\r\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\r\n    function e() internal pure returns (uint256 result) {\r\n        result = 2718281828459045235;\r\n    }\r\n\r\n    /// @notice Calculates the natural exponent of x.\r\n    ///\r\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\r\n    ///\r\n    /// Requirements:\r\n    /// - All from \"log2\".\r\n    /// - x must be less than 88722839111672999628.\r\n    ///\r\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\r\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\r\n    function exp(uint256 x) internal pure returns (uint256 result) {\r\n        // Without this check, the value passed to \"exp2\" would be greater than 128e18.\r\n        require(x < 88722839111672999628);\r\n\r\n        // Do the fixed-point multiplication inline to save gas.\r\n        unchecked {\r\n            uint256 doubleScaleProduct = x * LOG2_E;\r\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\r\n        }\r\n    }\r\n\r\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\r\n    ///\r\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\r\n    ///\r\n    /// Requirements:\r\n    /// - x must be 128e18 or less.\r\n    /// - The result must fit within MAX_UD60x18.\r\n    ///\r\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\r\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\r\n    function exp2(uint256 x) internal pure returns (uint256 result) {\r\n        // 2**128 doesn't fit within the 128.128-bit format used internally in this function.\r\n        require(x < 128e18);\r\n\r\n        unchecked {\r\n            // Convert x to the 128.128-bit fixed-point format.\r\n            uint256 x128x128 = (x << 128) / SCALE;\r\n\r\n            // Pass x to the PRBMathCommon.exp2 function, which uses the 128.128-bit fixed-point number representation.\r\n            result = PRBMathCommon.exp2(x128x128);\r\n        }\r\n    }\r\n\r\n    /// @notice Yields the greatest unsigned 60.18 decimal fixed-point number less than or equal to x.\r\n    /// @dev Optimised for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\r\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\r\n    /// @param x The unsigned 60.18-decimal fixed-point number to floor.\r\n    /// @param result The greatest integer less than or equal to x, as an unsigned 60.18-decimal fixed-point number.\r\n    function floor(uint256 x) internal pure returns (uint256 result) {\r\n        assembly {\r\n            // Equivalent to \"x % SCALE\" but faster.\r\n            let remainder := mod(x, SCALE)\r\n\r\n            // Equivalent to \"x - remainder * (remainder > 0 ? 1 : 0)\" but faster.\r\n            result := sub(x, mul(remainder, gt(remainder, 0)))\r\n        }\r\n    }\r\n\r\n    /// @notice Yields the excess beyond the floor of x.\r\n    /// @dev Based on the odd function definition https://en.wikipedia.org/wiki/Fractional_part.\r\n    /// @param x The unsigned 60.18-decimal fixed-point number to get the fractional part of.\r\n    /// @param result The fractional part of x as an unsigned 60.18-decimal fixed-point number.\r\n    function frac(uint256 x) internal pure returns (uint256 result) {\r\n        assembly {\r\n            result := mod(x, SCALE)\r\n        }\r\n    }\r\n\r\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\r\n    ///\r\n    /// @dev Requirements:\r\n    /// - x * y must fit within MAX_UD60x18, lest it overflows.\r\n    ///\r\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\r\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\r\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\r\n    function gm(uint256 x, uint256 y) internal pure returns (uint256 result) {\r\n        if (x == 0) {\r\n            return 0;\r\n        }\r\n\r\n        unchecked {\r\n            // Checking for overflow this way is faster than letting Solidity do it.\r\n            uint256 xy = x * y;\r\n            require(xy / x == y);\r\n\r\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\r\n            // during multiplication. See the comments within the \"sqrt\" function.\r\n            result = PRBMathCommon.sqrt(xy);\r\n        }\r\n    }\r\n\r\n    /// @notice Calculates 1 / x, rounding towards zero.\r\n    ///\r\n    /// @dev Requirements:\r\n    /// - x cannot be zero.\r\n    ///\r\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the inverse.\r\n    /// @return result The inverse as an unsigned 60.18-decimal fixed-point number.\r\n    function inv(uint256 x) internal pure returns (uint256 result) {\r\n        unchecked {\r\n            // 1e36 is SCALE * SCALE.\r\n            result = 1e36 / x;\r\n        }\r\n    }\r\n\r\n    /// @notice Calculates the natural logarithm of x.\r\n    ///\r\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\r\n    ///\r\n    /// Requirements:\r\n    /// - All from \"log2\".\r\n    ///\r\n    /// Caveats:\r\n    /// - All from \"log2\".\r\n    /// - This doesn't return exactly 1 for 2718281828459045235, for that we would need more fine-grained precision.\r\n    ///\r\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the natural logarithm.\r\n    /// @return result The natural logarithm as an unsigned 60.18-decimal fixed-point number.\r\n    function ln(uint256 x) internal pure returns (uint256 result) {\r\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\r\n        // can return is 196205294292027477728.\r\n        unchecked { result = (log2(x) * SCALE) / LOG2_E; }\r\n    }\r\n\r\n    /// @notice Calculates the common logarithm of x.\r\n    ///\r\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\r\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\r\n    ///\r\n    /// Requirements:\r\n    /// - All from \"log2\".\r\n    ///\r\n    /// Caveats:\r\n    /// - All from \"log2\".\r\n    ///\r\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the common logarithm.\r\n    /// @return result The common logarithm as an unsigned 60.18-decimal fixed-point number.\r\n    function log10(uint256 x) internal pure returns (uint256 result) {\r\n        require(x >= SCALE);\r\n\r\n        // Note that the \"mul\" in this block is the assembly mul operation, not the \"mul\" function defined in this contract.\r\n        // prettier-ignore\r\n        assembly {\r\n            switch x\r\n            case 1 { result := mul(SCALE, sub(0, 18)) }\r\n            case 10 { result := mul(SCALE, sub(1, 18)) }\r\n            case 100 { result := mul(SCALE, sub(2, 18)) }\r\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\r\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\r\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\r\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\r\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\r\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\r\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\r\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\r\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\r\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\r\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\r\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\r\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\r\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\r\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\r\n            case 1000000000000000000 { result := 0 }\r\n            case 10000000000000000000 { result := SCALE }\r\n            case 100000000000000000000 { result := mul(SCALE, 2) }\r\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\r\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\r\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\r\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\r\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\r\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\r\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\r\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\r\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\r\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\r\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\r\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\r\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\r\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\r\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\r\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\r\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\r\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\r\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\r\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\r\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\r\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\r\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\r\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\r\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\r\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\r\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\r\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\r\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\r\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\r\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\r\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\r\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\r\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\r\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\r\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\r\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\r\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\r\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\r\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\r\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\r\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\r\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\r\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\r\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\r\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\r\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\r\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\r\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\r\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\r\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\r\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\r\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\r\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\r\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\r\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\r\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 59) }\r\n            default {\r\n                result := MAX_UD60x18\r\n            }\r\n        }\r\n\r\n        if (result == MAX_UD60x18) {\r\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\r\n            unchecked { result = (log2(x) * SCALE) / 332192809488736234; }\r\n        }\r\n    }\r\n\r\n    /// @notice Calculates the binary logarithm of x.\r\n    ///\r\n    /// @dev Based on the iterative approximation algorithm.\r\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\r\n    ///\r\n    /// Requirements:\r\n    /// - x must be greater than or equal to SCALE, otherwise the result would be negative.\r\n    ///\r\n    /// Caveats:\r\n    /// - The results are nor perfectly accurate to the last digit, due to the lossy precision of the iterative approximation.\r\n    ///\r\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the binary logarithm.\r\n    /// @return result The binary logarithm as an unsigned 60.18-decimal fixed-point number.\r\n    function log2(uint256 x) internal pure returns (uint256 result) {\r\n        require(x >= SCALE);\r\n        unchecked {\r\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\r\n            uint256 n = PRBMathCommon.mostSignificantBit(x / SCALE);\r\n\r\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\r\n            // because n is maximum 255 and SCALE is 1e18.\r\n            result = n * SCALE;\r\n\r\n            // This is y = x * 2^(-n).\r\n            uint256 y = x >> n;\r\n\r\n            // If y = 1, the fractional part is zero.\r\n            if (y == SCALE) {\r\n                return result;\r\n            }\r\n\r\n            // Calculate the fractional part via the iterative approximation.\r\n            // The \"delta >>= 1\" part is equivalent to \"delta /= 2\", but shifting bits is faster.\r\n            for (uint256 delta = HALF_SCALE; delta > 0; delta >>= 1) {\r\n                y = (y * y) / SCALE;\r\n\r\n                // Is y^2 > 2 and so in the range [2,4)?\r\n                if (y >= 2 * SCALE) {\r\n                    // Add the 2^(-m) factor to the logarithm.\r\n                    result += delta;\r\n\r\n                    // Corresponds to z/2 on Wikipedia.\r\n                    y >>= 1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Multiplies two unsigned 60.18-decimal fixed-point numbers together, returning a new unsigned 60.18-decimal\r\n    /// fixed-point number.\r\n    /// @dev See the documentation for the \"PRBMathCommon.mulDivFixedPoint\" function.\r\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\r\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\r\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 result) {\r\n        result = PRBMathCommon.mulDivFixedPoint(x, y);\r\n    }\r\n\r\n    /// @notice Retrieves PI as an unsigned 60.18-decimal fixed-point number.\r\n    function pi() internal pure returns (uint256 result) {\r\n        result = 3141592653589793238;\r\n    }\r\n\r\n    /// @notice Raises x (unsigned 60.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\r\n    /// famous algorithm \"exponentiation by squaring\".\r\n    ///\r\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\r\n    ///\r\n    /// Requirements:\r\n    /// - The result must fit within MAX_UD60x18.\r\n    ///\r\n    /// Caveats:\r\n    /// - All from \"mul\".\r\n    /// - Assumes 0^0 is 1.\r\n    ///\r\n    /// @param x The base as an unsigned 60.18-decimal fixed-point number.\r\n    /// @param y The exponent as an uint256.\r\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\r\n    function pow(uint256 x, uint256 y) internal pure returns (uint256 result) {\r\n        // Calculate the first iteration of the loop in advance.\r\n        result = y & 1 > 0 ? x : SCALE;\r\n\r\n        // Equivalent to \"for(y /= 2; y > 0; y /= 2)\" but faster.\r\n        for (y >>= 1; y > 0; y >>= 1) {\r\n            x = mul(x, x);\r\n\r\n            // Equivalent to \"y % 2 == 1\" but faster.\r\n            if (y & 1 > 0) {\r\n                result = mul(result, x);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Returns 1 as an unsigned 60.18-decimal fixed-point number.\r\n    function scale() internal pure returns (uint256 result) {\r\n        result = SCALE;\r\n    }   \r\n       /// @notice Returns 1 as an unsigned 60.18-decimal fixed-point number.\r\n    function scale(uint256 x) internal pure returns (uint256 result) {\r\n        result = x * SCALE;\r\n    }\r\n       /// @notice Returns 1 as an unsigned 60.18-decimal fixed-point number.\r\n    function descale(uint256 x) internal pure returns (uint256 result) {\r\n        result = x / SCALE;\r\n    }\r\n \r\n    /// @notice Calculates the square root of x, rounding down.\r\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\r\n    ///\r\n    /// Requirements:\r\n    /// - x must be less than MAX_UD60x18 / SCALE.\r\n    ///\r\n    /// Caveats:\r\n    /// - The maximum fixed-point number permitted is 115792089237316195423570985008687907853269.984665640564039458.\r\n    ///\r\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the square root.\r\n    /// @return result The result as an unsigned 60.18-decimal fixed-point .\r\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\r\n        require(x < 115792089237316195423570985008687907853269984665640564039458);\r\n        unchecked {\r\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two unsigned\r\n            // 60.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\r\n            result = PRBMathCommon.sqrt(x * SCALE);\r\n        }\r\n    }\r\n}"
    },
    "contracts/swap/Uniswap.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol\";\r\nimport \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\n/**\r\n * @notice Enables staking on the ecosystem as well as uniswap. \r\n * @title \r\n * @author \r\n * @notice \r\n */\r\ncontract UniswapDoubleStake is ReentrancyGuard {\r\n    INonfungiblePositionManager public immutable positionManager;\r\n    address public immutable token0;\r\n    address public immutable token1;\r\n    uint24 public immutable fee;\r\n    \r\n    mapping(address => uint256) public userStakedLiquidity;\r\n    \r\n    constructor(\r\n        address _positionManager,\r\n        address _token0,\r\n        address _token1,\r\n        uint24 _fee\r\n    ) {\r\n        positionManager = INonfungiblePositionManager(_positionManager);\r\n        token0 = _token0;\r\n        token1 = _token1;\r\n        fee = _fee;\r\n    }\r\n    \r\n    function depositAndStake(\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        int24 tickLower,\r\n        int24 tickUpper\r\n    ) external nonReentrant {\r\n        require(amount0 > 0 && amount1 > 0, \"Amounts must be greater than zero\");\r\n\r\n        IERC20(token0).transferFrom(msg.sender, address(this), amount0);\r\n        IERC20(token1).transferFrom(msg.sender, address(this), amount1);\r\n        \r\n        IERC20(token0).approve(address(positionManager), amount0);\r\n        IERC20(token1).approve(address(positionManager), amount1);\r\n        \r\n        INonfungiblePositionManager.MintParams memory params = INonfungiblePositionManager.MintParams({\r\n            token0: token0,\r\n            token1: token1,\r\n            fee: fee,\r\n            tickLower: tickLower,\r\n            tickUpper: tickUpper,\r\n            amount0Desired: amount0,\r\n            amount1Desired: amount1,\r\n            amount0Min: 0,\r\n            amount1Min: 0,\r\n            recipient: address(this),\r\n            deadline: block.timestamp + 1200\r\n        });\r\n\r\n        (uint256 tokenId, uint128 liquidity,,) = positionManager.mint(params);\r\n        userStakedLiquidity[msg.sender] = tokenId;\r\n    }\r\n    \r\n    function withdrawLiquidity(uint256 tokenId) external nonReentrant {\r\n        require(userStakedLiquidity[msg.sender] == tokenId, \"Not owner of this position\");\r\n        \r\n        positionManager.safeTransferFrom(address(this), msg.sender, tokenId);\r\n        delete userStakedLiquidity[msg.sender];\r\n    }\r\n}\r\n"
    },
    "contracts/test/relay/MockERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract MockERC20 is ERC20 {\r\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\r\n        // Mint some tokens to the deployer for testing\r\n        _mint(msg.sender, 1000000 * 10**18);\r\n    }\r\n\r\n    function mint(address to, uint256 amount) external {\r\n        _mint(to, amount);\r\n    }\r\n}\r\n"
    },
    "contracts/test/relay/MockNFTPositionManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\n\r\n// Mock Uniswap interface\r\ninterface IMockUniswap {\r\n    function swap(address tokenIn, address tokenOut, uint256 amountIn) external returns (uint256 amountOut);\r\n}\r\n\r\n/**\r\n * @title MockNFTPositionManager\r\n * @notice A simplified version of Uniswap V3's NonfungiblePositionManager for testing purposes\r\n */\r\ncontract MockNFTPositionManager is ERC721, Ownable {\r\n    using Counters for Counters.Counter;\r\n\r\n    // Token ID tracker\r\n    Counters.Counter private _tokenIdCounter;\r\n\r\n    // Reference to the mock Uniswap contract\r\n    IMockUniswap public mockUniswap;\r\n\r\n    // Liquidity position information\r\n    struct Position {\r\n        address token0;\r\n        address token1;\r\n        uint24 fee;\r\n        int24 tickLower;\r\n        int24 tickUpper;\r\n        uint128 liquidity;\r\n        uint256 amount0;\r\n        uint256 amount1;\r\n        uint256 feeGrowthInside0LastX128;\r\n        uint256 feeGrowthInside1LastX128;\r\n        uint128 tokensOwed0;\r\n        uint128 tokensOwed1;\r\n    }\r\n\r\n    // Mapping from token ID to position info\r\n    mapping(uint256 => Position) public positionInfo;\r\n\r\n    // Events\r\n    event PositionCreated(uint256 indexed tokenId, address indexed owner, address token0, address token1, uint128 liquidity);\r\n    event PositionIncreased(uint256 indexed tokenId, uint128 liquidityAdded);\r\n    event PositionDecreased(uint256 indexed tokenId, uint128 liquidityRemoved);\r\n    event FeesCollected(uint256 indexed tokenId, uint128 amount0, uint128 amount1);\r\n\r\n    constructor(address _mockUniswapAddress) ERC721(\"Mock Uniswap V3 Positions\", \"UNI-V3-POS\") Ownable() {\r\n        mockUniswap = IMockUniswap(_mockUniswapAddress);\r\n    }\r\n\r\n    /**\r\n     * @notice Mint a new position\r\n     * @param recipient The address to mint the position to\r\n     * @param token0 The first token of the pool\r\n     * @param token1 The second token of the pool\r\n     * @param fee The fee tier of the pool\r\n     * @param tickLower The lower tick bound of the position\r\n     * @param tickUpper The upper tick bound of the position\r\n     * @param amount0Desired The amount of token0 to add as liquidity\r\n     * @param amount1Desired The amount of token1 to add as liquidity\r\n     * @return tokenId The ID of the minted token\r\n     * @return liquidity The amount of liquidity added\r\n     * @return amount0 The amount of token0 actually added\r\n     * @return amount1 The amount of token1 actually added\r\n     */\r\n    function mint(\r\n        address recipient,\r\n        address token0,\r\n        address token1,\r\n        uint24 fee,\r\n        int24 tickLower,\r\n        int24 tickUpper,\r\n        uint256 amount0Desired,\r\n        uint256 amount1Desired\r\n    ) external returns (\r\n        uint256 tokenId,\r\n        uint128 liquidity,\r\n        uint256 amount0,\r\n        uint256 amount1\r\n    ) {\r\n        // For simplicity, we'll assume all liquidity gets added\r\n        amount0 = amount0Desired;\r\n        amount1 = amount1Desired;\r\n        liquidity = uint128(amount0 + amount1); // Simplified liquidity calculation\r\n\r\n        // Mint the position token\r\n        _tokenIdCounter.increment();\r\n        tokenId = _tokenIdCounter.current();\r\n        _mint(recipient, tokenId);\r\n\r\n        // Store position data\r\n        positionInfo[tokenId] = Position({\r\n            token0: token0,\r\n            token1: token1,\r\n            fee: fee,\r\n            tickLower: tickLower,\r\n            tickUpper: tickUpper,\r\n            liquidity: liquidity,\r\n            amount0: amount0,\r\n            amount1: amount1,\r\n            feeGrowthInside0LastX128: 0,\r\n            feeGrowthInside1LastX128: 0,\r\n            tokensOwed0: 0,\r\n            tokensOwed1: 0\r\n        });\r\n\r\n        emit PositionCreated(tokenId, recipient, token0, token1, liquidity);\r\n        return (tokenId, liquidity, amount0, amount1);\r\n    }\r\n\r\n    /**\r\n     * @notice Increases the amount of liquidity in a position\r\n     * @param tokenId The ID of the token for which liquidity is being increased\r\n     * @param amount0Desired The desired amount of token0 to be added\r\n     * @param amount1Desired The desired amount of token1 to be added\r\n     * @return liquidity The new liquidity amount\r\n     * @return amount0 The amount of token0 actually added\r\n     * @return amount1 The amount of token1 actually added\r\n     */\r\n    function increaseLiquidity(\r\n        uint256 tokenId,\r\n        uint256 amount0Desired,\r\n        uint256 amount1Desired\r\n    ) external returns (\r\n        uint128 liquidity,\r\n        uint256 amount0,\r\n        uint256 amount1\r\n    ) {\r\n        require(_exists(tokenId), \"Position does not exist\");\r\n        require(ownerOf(tokenId) == msg.sender, \"Not position owner\");\r\n\r\n        Position storage position = positionInfo[tokenId];\r\n        \r\n        // For simplicity, we'll assume all liquidity gets added\r\n        amount0 = amount0Desired;\r\n        amount1 = amount1Desired;\r\n        liquidity = uint128(amount0 + amount1); // Simplified liquidity calculation\r\n\r\n        // Update position data\r\n        position.liquidity += liquidity;\r\n        position.amount0 += amount0;\r\n        position.amount1 += amount1;\r\n\r\n        emit PositionIncreased(tokenId, liquidity);\r\n        return (position.liquidity, amount0, amount1);\r\n    }\r\n\r\n    /**\r\n     * @notice Decreases the amount of liquidity in a position and accounts for fees earned\r\n     * @param tokenId The ID of the token for which liquidity is being decreased\r\n     * @param liquidity The amount by which liquidity will be decreased\r\n     * @return amount0 The amount of token0 sent to recipient\r\n     * @return amount1 The amount of token1 sent to recipient\r\n     */\r\n    function decreaseLiquidity(\r\n        uint256 tokenId,\r\n        uint128 liquidity\r\n    ) external returns (\r\n        uint256 amount0,\r\n        uint256 amount1\r\n    ) {\r\n        require(_exists(tokenId), \"Position does not exist\");\r\n        require(ownerOf(tokenId) == msg.sender, \"Not position owner\");\r\n        \r\n        Position storage position = positionInfo[tokenId];\r\n        require(position.liquidity >= liquidity, \"Insufficient liquidity\");\r\n\r\n        // Calculate amounts to withdraw based on liquidity proportion\r\n        uint256 proportion = (uint256(liquidity) * 1e18) / uint256(position.liquidity);\r\n        amount0 = (position.amount0 * proportion) / 1e18;\r\n        amount1 = (position.amount1 * proportion) / 1e18;\r\n\r\n        // Update position data\r\n        position.liquidity -= liquidity;\r\n        position.amount0 -= amount0;\r\n        position.amount1 -= amount1;\r\n\r\n        // Add fees to accumulated fees (simplified fee calculation)\r\n        position.tokensOwed0 += uint128(amount0 / 100); // 1% fee\r\n        position.tokensOwed1 += uint128(amount1 / 100); // 1% fee\r\n\r\n        emit PositionDecreased(tokenId, liquidity);\r\n        return (amount0, amount1);\r\n    }\r\n\r\n    /**\r\n     * @notice Collects tokens owed to a position\r\n     * @param tokenId The ID of the NFT for which tokens are being collected\r\n     * @return amount0 The amount of token0 collected\r\n     * @return amount1 The amount of token1 collected\r\n     */\r\n    function collect(\r\n        uint256 tokenId\r\n    ) external returns (\r\n        uint128 amount0,\r\n        uint128 amount1\r\n    ) {\r\n        require(_exists(tokenId), \"Position does not exist\");\r\n        require(ownerOf(tokenId) == msg.sender, \"Not position owner\");\r\n        \r\n        Position storage position = positionInfo[tokenId];\r\n        \r\n        // Get accumulated fees\r\n        amount0 = position.tokensOwed0;\r\n        amount1 = position.tokensOwed1;\r\n        \r\n        // Reset accumulated fees\r\n        position.tokensOwed0 = 0;\r\n        position.tokensOwed1 = 0;\r\n\r\n        emit FeesCollected(tokenId, amount0, amount1);\r\n        return (amount0, amount1);\r\n    }\r\n\r\n    /**\r\n     * @notice Burns a token\r\n     * @param tokenId The ID of the token to burn\r\n     */\r\n    function burn(uint256 tokenId) external {\r\n        require(_exists(tokenId), \"Position does not exist\");\r\n        require(ownerOf(tokenId) == msg.sender, \"Not position owner\");\r\n        \r\n        Position storage position = positionInfo[tokenId];\r\n        require(position.liquidity == 0, \"Cannot burn position with liquidity\");\r\n        \r\n        _burn(tokenId);\r\n        delete positionInfo[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the position information\r\n     * @param tokenId The ID of the token to get info for\r\n     */\r\n    function getPositions(uint256 tokenId) external view returns (\r\n        address token0,\r\n        address token1,\r\n        uint24 fee,\r\n        int24 tickLower,\r\n        int24 tickUpper,\r\n        uint128 liquidity,\r\n        uint256 feeGrowthInside0LastX128,\r\n        uint256 feeGrowthInside1LastX128,\r\n        uint128 tokensOwed0,\r\n        uint128 tokensOwed1\r\n    ) {\r\n        require(_exists(tokenId), \"Position does not exist\");\r\n        \r\n        Position storage position = positionInfo[tokenId];\r\n        return (\r\n            position.token0,\r\n            position.token1,\r\n            position.fee,\r\n            position.tickLower,\r\n            position.tickUpper,\r\n            position.liquidity,\r\n            position.feeGrowthInside0LastX128,\r\n            position.feeGrowthInside1LastX128,\r\n            position.tokensOwed0,\r\n            position.tokensOwed1\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Update the mock Uniswap address\r\n     * @param _mockUniswapAddress The new mock Uniswap address\r\n     */\r\n    function setMockUniswap(address _mockUniswapAddress) external onlyOwner {\r\n        mockUniswap = IMockUniswap(_mockUniswapAddress);\r\n    }\r\n}"
    },
    "contracts/test/relay/MockSwapRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\n/**\r\n * @title ISwapRouter\r\n * @notice Interface for the Uniswap V3 SwapRouter\r\n */\r\ninterface ISwapRouter {\r\n    struct ExactOutputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint24 fee;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountOut;\r\n        uint256 amountInMaximum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\r\n}\r\n\r\n/**\r\n * @title MockUniswapV3Pool\r\n * @notice Interface for the mock Uniswap V3 Pool used for testing\r\n */\r\ninterface IMockUniswapV3Pool {\r\n    function exactOutputSingle(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountOut,\r\n        uint256 amountInMaximum\r\n    ) external returns (uint256 amountIn);\r\n}\r\n\r\n/**\r\n * @title MockWETH\r\n * @notice Interface for WETH with deposit and withdraw functions\r\n */\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function withdraw(uint256 amount) external;\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n}\r\n\r\n/**\r\n * @title MockSwapRouter\r\n * @notice A mock implementation of Uniswap V3's SwapRouter for testing purposes\r\n * @dev This contract simulates the behavior of the swap router using a mock pool\r\n */\r\ncontract MockSwapRouters is ISwapRouter {\r\n    using SafeERC20 for IERC20;\r\n    \r\n    IMockUniswapV3Pool public mockPool;\r\n    IWETH public weth;\r\n    \r\n    /**\r\n     * @notice Constructor for MockSwapRouter\r\n     * @param _mockPool Address of the mock Uniswap V3 pool\r\n     * @param _weth Address of the WETH contract\r\n     */\r\n    constructor(address _mockPool, address _weth) {\r\n        mockPool = IMockUniswapV3Pool(_mockPool);\r\n        weth = IWETH(_weth);\r\n    }\r\n    \r\n    /**\r\n     * @notice Simulates an exact output swap\r\n     * @param params The parameters for the swap\r\n     * @return amountIn The amount of tokens sent to the pool\r\n     */\r\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable override returns (uint256 amountIn) {\r\n        require(block.timestamp <= params.deadline, \"Transaction expired\");\r\n        \r\n        // Get tokens from caller\r\n        IERC20(params.tokenIn).safeTransferFrom(msg.sender, address(this), params.amountInMaximum);\r\n        \r\n        // Approve tokens to the pool\r\n        IERC20(params.tokenIn).approve(address(mockPool), params.amountInMaximum);\r\n        \r\n        // Execute the swap through the mock pool\r\n        amountIn = mockPool.exactOutputSingle(\r\n            params.tokenIn,\r\n            params.tokenOut,\r\n            params.amountOut,\r\n            params.amountInMaximum\r\n        );\r\n        \r\n        // Handle refund of unused tokens\r\n        if (amountIn < params.amountInMaximum) {\r\n            IERC20(params.tokenIn).safeTransfer(msg.sender, params.amountInMaximum - amountIn);\r\n        }\r\n        \r\n        // If tokenOut is WETH and recipient is specified, unwrap WETH and send ETH\r\n        if (params.tokenOut == address(weth) && params.recipient != address(0)) {\r\n            IERC20(params.tokenOut).safeTransferFrom(address(mockPool), address(this), params.amountOut);\r\n            weth.withdraw(params.amountOut);\r\n            (bool success, ) = params.recipient.call{value: params.amountOut}(\"\");\r\n            require(success, \"ETH transfer failed\");\r\n        } else {\r\n            // Otherwise just transfer the tokens\r\n            IERC20(params.tokenOut).safeTransferFrom(address(mockPool), params.recipient, params.amountOut);\r\n        }\r\n        \r\n        return amountIn;\r\n    }\r\n    \r\n    /**\r\n     * @notice Allows the contract to receive ETH\r\n     */\r\n    receive() external payable {}\r\n}"
    },
    "contracts/test/relay/MockTarget.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport {iERC2771Recipient} from \"../../facets/ERC2771Recipient/_ERC2771Recipient.sol\";\r\nimport \"hardhat/console.sol\";\r\n\r\ncontract MockTarget is iERC2771Recipient{\r\n    event TargetCalled(address sender,uint256 data);\r\n    \r\n    uint256 public lastValue;\r\n    address public lastCaller;\r\n    \r\n    // This function will be called by the trusted forwarder\r\n    function execute(uint256 value) external {\r\n        lastValue = value;\r\n        lastCaller = msg.sender;\r\n    }\r\n     \r\n    // Function that can be called via the relay\r\n    function executeWithData(uint256 data) external {\r\n        lastCaller = msgSender(); \r\n        console.log(data);   \r\n        emit TargetCalled(lastCaller, data);\r\n    }\r\n\r\n    function setTrustedForwarder( address trustedForwarder) external {\r\n        _setTrustedForwarder(trustedForwarder);\r\n    }\r\n}"
    },
    "contracts/test/relay/MockUniswapV3.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"./MockWETH.sol\";\r\n\r\ncontract MockUniswapV3Pool {\r\n    address public tokenA;\r\n    address public tokenB;\r\n    \r\n    event Swap(\r\n        address sender,\r\n        address recipient,\r\n        int256 amount0,\r\n        int256 amount1,\r\n        uint160 sqrtPriceX96,\r\n        uint128 liquidity,\r\n        int24 tick\r\n    );\r\n    \r\n    constructor(address _tokenA, address _tokenB) {\r\n        tokenA = _tokenA;\r\n        tokenB = _tokenB;\r\n    }\r\n    \r\n    // Mock exactInputSingle function - simplified version of UniswapV3 swap\r\n    function exactOutputSingle(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint24 poolFee,\r\n        address recipient,\r\n        uint256 amountIn,\r\n        uint256 amountOutMinimum,\r\n        uint160 sqrtPriceLimitX96\r\n    ) external returns (uint256 amountOut) {\r\n        require(\r\n            (tokenIn == tokenA && tokenOut == tokenB) || \r\n            (tokenIn == tokenB && tokenOut == tokenA),\r\n            \"Invalid token pair\"\r\n        );\r\n        \r\n        // Transfer tokenIn from sender to this contract\r\n        IERC20(tokenIn).transferFrom(msg.sender, address(this), amountIn);\r\n        \r\n        // Calculate output amount (simplified calculation - in real Uniswap it would use the price curve)\r\n        // For testing, we'll just apply a 1% fee and do a simple conversion\r\n        uint256 feeAmount = (amountIn * poolFee) / 1000000;\r\n        amountOut = amountIn - feeAmount;\r\n        \r\n        // Check slippage\r\n        require(amountOut >= amountOutMinimum, \"Too little received\");\r\n        \r\n        // Transfer tokenOut to recipient\r\n        IERC20(tokenOut).transfer(recipient, amountOut);\r\n        \r\n        // Emit swap event (with mock values for some parameters)\r\n        emit Swap(\r\n            msg.sender,\r\n            recipient,\r\n            int256(amountIn),\r\n            -int256(amountOut),\r\n            sqrtPriceLimitX96,\r\n            1000000,  // Mock liquidity\r\n            0         // Mock tick\r\n        );\r\n        \r\n        return amountOut;\r\n    }\r\n}"
    },
    "contracts/test/relay/MockWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract MockWETH is ERC20 {\r\n    event Deposit(address indexed dst, uint256 wad);\r\n    event Withdrawal(address indexed src, uint256 wad);\r\n\r\n    constructor() ERC20(\"Wrapped Ether\", \"WETH\") {}\r\n\r\n    // Function to deposit ETH and get WETH in return\r\n    function deposit() public payable {\r\n        _mint(msg.sender, msg.value);\r\n        emit Deposit(msg.sender, msg.value);\r\n    }\r\n\r\n    // Function to withdraw ETH by burning WETH\r\n    function withdraw(uint256 wad) public {\r\n        require(balanceOf(msg.sender) >= wad, \"WETH: insufficient balance\");\r\n        _burn(msg.sender, wad);\r\n        payable(msg.sender).transfer(wad);\r\n        emit Withdrawal(msg.sender, wad);\r\n    }\r\n\r\n    // Function to receive ETH\r\n    receive() external payable {\r\n        deposit();\r\n    }\r\n\r\n    // For testing purposes\r\n    function mint(address to, uint256 amount) external {\r\n        _mint(to, amount);\r\n    }\r\n}"
    },
    "contracts/test/relayNew/mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport { ReentrancyGuardContract } from \"../../ReentrancyGuard.sol\";\r\n\r\n\r\n\r\n/**\r\n * @dev Mock Uniswap Router for testing\r\n */\r\ncontract MockUniswapRouter {\r\n    struct ExactOutputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint24 fee;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountOut;\r\n        uint256 amountInMaximum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n    \r\n    event SwapCalled(address tokenIn, address tokenOut, uint256 amountOut);\r\n    \r\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external returns (uint256 amountIn) {\r\n        emit SwapCalled(params.tokenIn, params.tokenOut, params.amountOut);\r\n        return params.amountInMaximum / 2; // Mock return value\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface for TrustedForwarder\r\n */\r\ninterface ITrustedForwarder {\r\n    struct ForwardRequest {\r\n        address signer;\r\n        address target;\r\n        bytes targetData;\r\n        uint256 nonce;\r\n        uint32 deadline;\r\n    }\r\n    \r\n    function execute(\r\n        MockUniswapRouter.ExactOutputSingleParams calldata params,\r\n        ForwardRequest calldata req,\r\n        address recipient,\r\n        bytes calldata signature\r\n    ) external returns (bool, bytes memory);\r\n}\r\n\r\n/**\r\n * @dev RelayEntryPoint that calls into TrustedForwarder\r\n */\r\ncontract RelayEntryPoint is ReentrancyGuardContract {\r\n    address public immutable trustedForwarder;\r\n    \r\n    event RelayExecuted(\r\n        address indexed signer,\r\n        address indexed target,\r\n        bool success\r\n    );\r\n    \r\n    constructor(address _trustedForwarder) {\r\n        trustedForwarder = _trustedForwarder;\r\n    }\r\n    \r\n    function relay(\r\n        MockUniswapRouter.ExactOutputSingleParams memory paymasterParams,\r\n        ITrustedForwarder.ForwardRequest calldata req,\r\n        address recipient,\r\n        bytes calldata signature\r\n    ) external ReentrancyGuard {\r\n        // Start gas measurement\r\n        uint256 startGas = gasleft();\r\n        \r\n        // Call the trusted forwarder to execute the transaction\r\n        (bool success, bytes memory result) = trustedForwarder.call(\r\n            abi.encodeWithSelector(\r\n                ITrustedForwarder.execute.selector,\r\n                paymasterParams,\r\n                req,\r\n                recipient,\r\n                signature\r\n            )\r\n        );\r\n        \r\n        // Revert if the call failed, forwarding the revert reason\r\n        if (!success) {\r\n            assembly {\r\n                revert(add(result, 32), mload(result))\r\n            }\r\n        }\r\n        \r\n        emit RelayExecuted(req.signer, req.target, success);\r\n    }\r\n}"
    },
    "contracts/test/Test1Facet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract Test1Facet {\r\n    event TestEvent(address something);\r\n\r\n    function test1Func1() external {}\r\n\r\n    function test1Func2() external {}\r\n\r\n    function test1Func3() external {}\r\n\r\n    function test1Func4() external {}\r\n\r\n    function test1Func5() external {}\r\n\r\n    function test1Func6() external {}\r\n\r\n    function test1Func7() external {}\r\n\r\n    function test1Func8() external {}\r\n\r\n    function test1Func9() external {}\r\n\r\n    function test1Func10() external {}\r\n\r\n    function test1Func11() external {}\r\n\r\n    function test1Func12() external {}\r\n\r\n    function test1Func13() external {}\r\n\r\n    function test1Func14() external {}\r\n\r\n    function test1Func15() external {}\r\n\r\n    function test1Func16() external {}\r\n\r\n    function test1Func17() external {}\r\n\r\n    function test1Func18() external {}\r\n\r\n    function test1Func19() external {}\r\n\r\n    function test1Func20() external {}\r\n\r\n    \r\n}"
    },
    "contracts/test/Test2Facet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract Test2Facet {\r\n    function test2Func1() external {}\r\n\r\n    function test2Func2() external {}\r\n\r\n    function test2Func3() external {}\r\n\r\n    function test2Func4() external {}\r\n\r\n    function test2Func5() external {}\r\n\r\n    function test2Func6() external {}\r\n\r\n    function test2Func7() external {}\r\n\r\n    function test2Func8() external {}\r\n\r\n    function test2Func9() external {}\r\n\r\n    function test2Func10() external {}\r\n\r\n    function test2Func11() external {}\r\n\r\n    function test2Func12() external {}\r\n\r\n    function test2Func13() external {}\r\n\r\n    function test2Func14() external {}\r\n\r\n    function test2Func15() external {}\r\n\r\n    function test2Func16() external {}\r\n\r\n    function test2Func17() external {}\r\n\r\n    function test2Func18() external {}\r\n\r\n    function test2Func19() external {}\r\n\r\n    function test2Func20() external {}\r\n}"
    },
    "contracts/test/TestERC1155Operator.sol": {
      "content": "pragma solidity ^0.8.6;\r\n\r\nimport \"../facets/Tokens/ERC1155/interfaces/IERC1155Transfer.sol\";\r\n\r\n\r\ncontract TestERC1155Operator{\r\n    address immutable diamond;\r\n    constructor(address _diamond){\r\n        diamond = _diamond;\r\n    }\r\n    function safeTransferFrom(address to, address from, uint256 id, uint256 amount,\r\n    bytes memory data) external {\r\n        IERC1155Transfer(diamond).safeTransferFrom(to, from, id, amount, data);\r\n    }\r\n\r\n    function safeBatchTransferFrom(address to, address from, uint256[] memory id, uint256[] memory amount,\r\n    bytes memory data) external {\r\n        IERC1155Transfer(diamond).safeBatchTransferFrom(to, from, id, amount, data);\r\n    }\r\n    \r\n\r\n}"
    },
    "contracts/test/TestERC20.sol": {
      "content": "pragma solidity ^0.8.9;\r\n// Mock ERC20 Token\r\ncontract MocksERC20 {\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals = 18;\r\n  \r\n  uint256 public totalSupply;\r\n  mapping(address => uint256) public balanceOf;\r\n  mapping(address => mapping(address => uint256)) public allowance;\r\n  \r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  \r\n  constructor(string memory _name, string memory _symbol, uint256 initialSupply) {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    totalSupply = initialSupply;\r\n    balanceOf[msg.sender] = initialSupply;\r\n    emit Transfer(address(0), msg.sender, initialSupply);\r\n  }\r\n  \r\n  function transfer(address to, uint256 amount) public returns (bool) {\r\n    balanceOf[msg.sender] -= amount;\r\n    balanceOf[to] += amount;\r\n    emit Transfer(msg.sender, to, amount);\r\n    return true;\r\n  }\r\n  \r\n  function approve(address spender, uint256 amount) public returns (bool) {\r\n    allowance[msg.sender][spender] = amount;\r\n    emit Approval(msg.sender, spender, amount);\r\n    return true;\r\n  }\r\n  \r\n  function transferFrom(address from, address to, uint256 amount) public returns (bool) {\r\n    require(allowance[from][msg.sender] >= amount, \"ERC20: insufficient allowance\");\r\n    allowance[from][msg.sender] -= amount;\r\n    balanceOf[from] -= amount;\r\n    balanceOf[to] += amount;\r\n    emit Transfer(from, to, amount);\r\n    return true;\r\n  }\r\n  \r\n  // For WETH functionality\r\n  function withdraw(uint256 amount) public {\r\n    require(balanceOf[msg.sender] >= amount, \"Insufficient balance\");\r\n    balanceOf[msg.sender] -= amount;\r\n    payable(msg.sender).transfer(amount);\r\n  }\r\n  \r\n  // To receive ETH when testing the mock WETH functionality\r\n  receive() external payable {}\r\n}"
    },
    "contracts/test/TestUniswapRouter.sol": {
      "content": "pragma solidity ^0.8.9;\r\n\r\nimport {MocksERC20} from \"./TestERC20.sol\";\r\n// Mock Uniswap Router that simulates token swaps\r\ncontract MockUniswapRouters {\r\n  address payable public immutable WETH;\r\n  uint256 private outputAmount;\r\n  \r\n  constructor(address payable _weth) {\r\n    WETH = _weth;\r\n  }\r\n  \r\n  // Set the amount of tokens the router will return when swapExactTokensForTokens is called\r\n  function setExpectedOutput(uint256 _amount) external {\r\n    outputAmount = _amount;\r\n  }\r\n  \r\n  function swapExactTokensForTokens(\r\n    uint256 amountIn,\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint[] memory amounts) {\r\n    require(path.length >= 2, \"Invalid path\");\r\n    require(deadline >= block.timestamp, \"Expired deadline\");\r\n    \r\n    // Transfer output token (WETH) to recipient\r\n    MocksERC20(WETH).transfer(to, outputAmount); \r\n    \r\n    uint[] memory result = new uint[](2);\r\n    result[0] = amountIn;\r\n    result[1] = outputAmount;\r\n    return result;\r\n  }\r\n}"
    },
    "contracts/upgradeInitializers/DiamondInit.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/******************************************************************************\\\r\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\r\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\r\n*\r\n* Implementation of a diamond.\r\n/******************************************************************************/\r\n\r\nimport {LibDiamond} from \"../facets/Diamond/LibDiamond.sol\";\r\nimport { IDiamondLoupe } from \"../facets/Diamond/IDiamondLoupe.sol\";\r\nimport { IDiamondCut } from \"../facets/Diamond/IDiamondCut.sol\";\r\nimport { IERC173 } from \"../IERC173.sol\";\r\nimport { IERC165 } from \"../IERC165.sol\";\r\nimport { IStake } from \"../facets/Stake/IStake.sol\";\r\nimport { IStake } from \"../facets/Stake/IStake.sol\";\r\n\r\n\r\n// It is expected that this contract is customized if you want to deploy your diamond\r\n// with data from a deployment script. Use the init function to initialize state variables\r\n// of your diamond. Add parameters to the init funciton if you need to.\r\n\r\ncontract DiamondInit {    \r\n\r\n    // You can add parameters to this function in order to pass in \r\n    // data to set your own state variables\r\n    function init() external {\r\n        // adding ERC165 data\r\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\r\n        ds.supportedInterfaces[type(IERC165).interfaceId] = true;\r\n        ds.supportedInterfaces[type(IDiamondCut).interfaceId] = true;\r\n        ds.supportedInterfaces[type(IDiamondLoupe).interfaceId] = true;\r\n        ds.supportedInterfaces[type(IERC173).interfaceId] = true;\r\n        ds.supportedInterfaces[type(IStake).interfaceId] = true;\r\n\r\n        // add your own state variables \r\n        // EIP-2535 specifies that the `diamondCut` function takes two optional \r\n        // arguments: address _init and bytes calldata _calldata\r\n        // These arguments are used to execute an arbitrary function using delegatecall\r\n        // in order to set state variables in the diamond during deployment or an upgrade\r\n        // More info here: https://eips.ethereum.org/EIPS/eip-2535#diamond-interface \r\n    }\r\n\r\n\r\n}\r\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nlibrary console {\n    address constant CONSOLE_ADDRESS =\n        0x000000000000000000636F6e736F6c652e6c6f67;\n\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\n        address consoleAddress = CONSOLE_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            pop(\n                staticcall(\n                    gas(),\n                    consoleAddress,\n                    add(payload, 32),\n                    mload(payload),\n                    0,\n                    0\n                )\n            )\n        }\n    }\n\n    function _castToPure(\n      function(bytes memory) internal view fnIn\n    ) internal pure returns (function(bytes memory) pure fnOut) {\n        assembly {\n            fnOut := fnIn\n        }\n    }\n\n    function _sendLogPayload(bytes memory payload) internal pure {\n        _castToPure(_sendLogPayloadImplementation)(payload);\n    }\n\n    function log() internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\n    }\n\n    function logInt(int256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n    }\n\n    function logUint(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function logString(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function logBool(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function logAddress(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function logBytes(bytes memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n    }\n\n    function logBytes1(bytes1 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n    }\n\n    function logBytes2(bytes2 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n    }\n\n    function logBytes3(bytes3 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n    }\n\n    function logBytes4(bytes4 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n    }\n\n    function logBytes5(bytes5 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n    }\n\n    function logBytes6(bytes6 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n    }\n\n    function logBytes7(bytes7 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n    }\n\n    function logBytes8(bytes8 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n    }\n\n    function logBytes9(bytes9 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n    }\n\n    function logBytes10(bytes10 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n    }\n\n    function logBytes11(bytes11 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n    }\n\n    function logBytes12(bytes12 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n    }\n\n    function logBytes13(bytes13 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n    }\n\n    function logBytes14(bytes14 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n    }\n\n    function logBytes15(bytes15 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n    }\n\n    function logBytes16(bytes16 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n    }\n\n    function logBytes17(bytes17 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n    }\n\n    function logBytes18(bytes18 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n    }\n\n    function logBytes19(bytes19 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n    }\n\n    function logBytes20(bytes20 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n    }\n\n    function logBytes21(bytes21 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n    }\n\n    function logBytes22(bytes22 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n    }\n\n    function logBytes23(bytes23 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n    }\n\n    function logBytes24(bytes24 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n    }\n\n    function logBytes25(bytes25 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n    }\n\n    function logBytes26(bytes26 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n    }\n\n    function logBytes27(bytes27 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n    }\n\n    function logBytes28(bytes28 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n    }\n\n    function logBytes29(bytes29 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n    }\n\n    function logBytes30(bytes30 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n    }\n\n    function logBytes31(bytes31 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n    }\n\n    function logBytes32(bytes32 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n    }\n\n    function log(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function log(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function log(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function log(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function log(uint256 p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n    }\n\n    function log(uint256 p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n    }\n\n    function log(uint256 p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n    }\n\n    function log(uint256 p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n    }\n\n    function log(string memory p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n    }\n\n    function log(string memory p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n\n    function log(string memory p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n    }\n\n    function log(string memory p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n    }\n\n    function log(bool p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n    }\n\n    function log(bool p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n    }\n\n    function log(bool p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n    }\n\n    function log(bool p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n    }\n\n    function log(address p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n    }\n\n    function log(address p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n    }\n\n    function log(address p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n    }\n\n    function log(address p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n    }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "cancun",
    "outputSelection": {
      "*": {
        "*": [
          "*",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}